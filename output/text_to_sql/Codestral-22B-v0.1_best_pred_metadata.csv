,question_id,sql_gold,sql_pred,execution_accuracy,db_id,used_metadata
0,0,SELECT `Free Meal Count (K-12)` / `Enrollment (K-12)` FROM frpm WHERE `County Name` = 'Alameda' ORDER BY (CAST(`Free Meal Count (K-12)` AS REAL) / `Enrollment (K-12)`) DESC LIMIT 1,"
SELECT MAX(`Percent (%) Eligible Free (K-12)`) AS Highest_Eligible_Free_Rate
FROM frpm
WHERE `County Name` = 'Alameda County';",0,california_schools,best_pred_metadata
1,1,SELECT `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)` FROM frpm WHERE `Educational Option Type` = 'Continuation School' AND `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)` IS NOT NULL ORDER BY `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)` ASC LIMIT 3,"
SELECT ""Percent (%) Eligible Free (Ages 5-17)""
FROM frpm
WHERE ""School Type"" = 'Continuation'
ORDER BY ""Percent (%) Eligible Free (Ages 5-17)"" ASC
LIMIT 3;",0,california_schools,best_pred_metadata
2,2,SELECT T2.Zip FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`District Name` = 'Fresno County Office of Education' AND T1.`Charter School (Y/N)` = 1,"
SELECT s.Zip
FROM schools s
JOIN frpm f ON s.CDSCode = f.CDSCode
WHERE s.Charter = 1 AND s.County = 'Fresno' AND f.DistrictType = 'County Office of Education';",0,california_schools,best_pred_metadata
3,3,SELECT T2.MailStreet FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode ORDER BY T1.`FRPM Count (K-12)` DESC LIMIT 1,"
SELECT MailStreet, MailCity, MailZip, MailState
FROM schools
JOIN frpm ON schools.CDSCode = frpm.CDSCode
WHERE frpm.`FRPM Count (K-12)` = (SELECT MAX(`FRPM Count (K-12)`) FROM frpm);",0,california_schools,best_pred_metadata
4,4,SELECT T2.Phone FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`Charter Funding Type` = 'Directly funded' AND T1.`Charter School (Y/N)` = 1 AND T2.OpenDate > '2000-01-01',"
SELECT Phone
FROM schools
WHERE Charter = 1
AND FundingType = 'Direct Charter'
AND OpenDate > '2000-01-01';",0,california_schools,best_pred_metadata
5,5,SELECT COUNT(DISTINCT T2.School) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.Virtual = 'F' AND T1.AvgScrMath < 400,"
SELECT COUNT(*)
FROM schools
JOIN satscores ON schools.CDSCode = satscores.cds
WHERE satscores.AvgScrMath < 400 AND schools.Virtual = 'Yes';",1,california_schools,best_pred_metadata
6,6,SELECT T2.School FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.Magnet = 1 AND T1.NumTstTakr > 500,"
SELECT s.School
FROM schools s
JOIN satscores ss ON s.CDSCode = ss.cds
WHERE ss.NumTstTakr > 500
AND (s.Magnet = 1 OR s.EdOpsName LIKE '%magnet%');",1,california_schools,best_pred_metadata
7,7,SELECT T2.Phone FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.NumGE1500 DESC LIMIT 1,"
SELECT Phone
FROM schools
WHERE CDSCode = (
    SELECT cds
    FROM satscores
    WHERE NumGE1500 = (
        SELECT MAX(NumGE1500)
        FROM satscores
    )
);",1,california_schools,best_pred_metadata
8,8,SELECT NumTstTakr FROM satscores WHERE cds = ( SELECT CDSCode FROM frpm ORDER BY `FRPM Count (K-12)` DESC LIMIT 1 ),"
SELECT satscores.NumTstTakr
FROM satscores
JOIN frpm ON satscores.cds = frpm.CDSCode
WHERE frpm.`FRPM Count (K-12)` = (SELECT MAX(`FRPM Count (K-12)`) FROM frpm);",1,california_schools,best_pred_metadata
9,9,SELECT COUNT(T2.`School Code`) FROM satscores AS T1 INNER JOIN frpm AS T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrMath > 560 AND T2.`Charter Funding Type` = 'Directly funded',"
SELECT COUNT(*)
FROM satscores
JOIN schools ON satscores.cds = schools.CDSCode
WHERE AvgScrMath > 560 AND FundingType = 'Directly Charter-Funded';",0,california_schools,best_pred_metadata
10,10,SELECT T2.`FRPM Count (Ages 5-17)` FROM satscores AS T1 INNER JOIN frpm AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.AvgScrRead DESC LIMIT 1,"
SELECT frpm.""FRPM Count (Ages 5-17)""
FROM frpm
JOIN satscores ON frpm.CDSCode = satscores.cds
WHERE satscores.AvgScrRead = (SELECT MAX(AvgScrRead) FROM satscores)
LIMIT 1;",0,california_schools,best_pred_metadata
11,11,SELECT T2.CDSCode FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.`Enrollment (K-12)` + T2.`Enrollment (Ages 5-17)` > 500,"
SELECT CDSCode
FROM schools
WHERE CDSCode IN (
    SELECT cds
    FROM satscores
    WHERE enroll12 > 500
)
OR CDSCode IN (
    SELECT CDSCode
    FROM frpm
    WHERE ""Enrollment (K-12)"" > 500
);",0,california_schools,best_pred_metadata
12,12,SELECT MAX(CAST(T1.`Free Meal Count (Ages 5-17)` AS REAL) / T1.`Enrollment (Ages 5-17)`) FROM frpm AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE CAST(T2.NumGE1500 AS REAL) / T2.NumTstTakr > 0.3,"
SELECT MAX(`Percent (%) Eligible Free (Ages 5-17)`)
FROM frpm
WHERE CDSCode IN (
    SELECT cds
    FROM satscores
    WHERE (NumGE1500 / NumTstTakr) > 0.3
)",0,california_schools,best_pred_metadata
13,13,SELECT T1.Phone FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds ORDER BY CAST(T2.NumGE1500 AS REAL) / T2.NumTstTakr DESC LIMIT 3,"
SELECT s.Phone
FROM schools s
JOIN satscores ss ON s.CDSCode = ss.cds
ORDER BY ss.PctGE1500 DESC
LIMIT 3;",0,california_schools,best_pred_metadata
14,14,SELECT T1.NCESSchool FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode ORDER BY T2.`Enrollment (Ages 5-17)` DESC LIMIT 5,"
SELECT NCESSchool, Enrollment_Ages_5_17
FROM frpm
JOIN schools ON frpm.CDSCode = schools.CDSCode
ORDER BY Enrollment_Ages_5_17 DESC
LIMIT 5;",0,california_schools,best_pred_metadata
15,15,SELECT T1.District FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.StatusType = 'Active' ORDER BY T2.AvgScrRead DESC LIMIT 1,"
SELECT District, AVG(AvgScrRead) as AverageReadingScore
FROM satscores
JOIN schools ON satscores.cds = schools.CDSCode
WHERE schools.StatusType = 'Active'
GROUP BY District
ORDER BY AverageReadingScore DESC
LIMIT 1;",0,california_schools,best_pred_metadata
16,16,SELECT COUNT(T1.CDSCode) FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.StatusType = 'Merged' AND T2.NumTstTakr < 100 AND T1.County = 'Alameda',"
SELECT COUNT(*)
FROM schools
JOIN satscores ON schools.CDSCode = satscores.cds
WHERE schools.County = 'Alameda' AND satscores.NumTstTakr < 100;",1,california_schools,best_pred_metadata
17,17,SELECT T1.CharterNum FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T2.AvgScrWrite = 499,"
SELECT CharterNum
FROM schools
WHERE CDSCode = (
    SELECT cds
    FROM satscores
    WHERE AvgScrWrite = 499
);",0,california_schools,best_pred_metadata
18,18,SELECT COUNT(T1.CDSCode) FROM frpm AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.`Charter Funding Type` = 'Directly funded' AND T1.`County Name` = 'Contra Costa' AND T2.NumTstTakr <= 250,"
SELECT COUNT(*)
FROM schools
JOIN satscores ON schools.CDSCode = satscores.cds
WHERE schools.County = 'Contra Costa'
AND schools.FundingType = 'Directly Funded'
AND satscores.NumTstTakr <= 250;",1,california_schools,best_pred_metadata
19,19,SELECT T1.Phone FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds ORDER BY T2.AvgScrMath DESC LIMIT 1,"
SELECT Phone
FROM schools
WHERE CDSCode = (
    SELECT cds
    FROM satscores
    ORDER BY AvgScrMath DESC
    LIMIT 1
);",0,california_schools,best_pred_metadata
20,20,SELECT COUNT(T1.`School Name`) FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Amador' AND T1.`Low Grade` = 9 AND T1.`High Grade` = 12,"
SELECT COUNT(*)
FROM frpm
WHERE `County Name` = 'Amador' AND `Low Grade` = 9 AND `High Grade` = 12;",1,california_schools,best_pred_metadata
21,21,SELECT COUNT(CDSCode) FROM frpm WHERE `County Name` = 'Los Angeles' AND `Free Meal Count (K-12)` > 500 AND `Free Meal Count (K-12)` < 700,"
SELECT COUNT(*)
FROM frpm
JOIN schools ON frpm.CDSCode = schools.CDSCode
WHERE schools.County = 'Los Angeles'
AND frpm.`Free Meal Count (K-12)` > 500
AND frpm.`FRPM Count (K-12)` < 700;",0,california_schools,best_pred_metadata
22,22,SELECT sname FROM satscores WHERE cname = 'Contra Costa' AND sname IS NOT NULL ORDER BY NumTstTakr DESC LIMIT 1,"
SELECT s.School, MAX(sat.NumTstTakr) AS HighestTestTakers
FROM schools s
JOIN satscores sat ON s.CDSCode = sat.cds
WHERE s.County = 'Contra Costa'
GROUP BY s.School
ORDER BY HighestTestTakers DESC
LIMIT 1;",0,california_schools,best_pred_metadata
23,23,"SELECT T1.School, T1.StreetAbr FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.`Enrollment (K-12)` - T2.`Enrollment (Ages 5-17)` > 30","
SELECT s.School, s.Street, s.City, s.State, s.Zip
FROM schools s
JOIN frpm f ON s.CDSCode = f.CDSCode
WHERE ABS(f.Enrollment_K_12 - f.Enrollment_Ages_5_17) > 30;",0,california_schools,best_pred_metadata
24,24,SELECT T2.`School Name` FROM satscores AS T1 INNER JOIN frpm AS T2 ON T1.cds = T2.CDSCode WHERE CAST(T2.`Free Meal Count (K-12)` AS REAL) / T2.`Enrollment (K-12)` > 0.1 AND T1.NumGE1500 > 0,"
SELECT frpm.""School Name""
FROM frpm
JOIN satscores ON frpm.CDSCode = satscores.cds
WHERE frpm.""Percent (%) Eligible Free (K-12)"" > 0.1
AND satscores.NumGE1500 > 0;",1,california_schools,best_pred_metadata
25,25,"SELECT T1.sname, T2.`Charter Funding Type` FROM satscores AS T1 INNER JOIN frpm AS T2 ON T1.cds = T2.CDSCode WHERE T2.`District Name` LIKE 'Riverside%' GROUP BY T1.sname, T2.`Charter Funding Type` HAVING CAST(SUM(T1.AvgScrMath) AS REAL) / COUNT(T1.cds) > 400","
SELECT s.School, s.FundingType
FROM schools s
JOIN satscores ss ON s.CDSCode = ss.cds
WHERE s.County = 'Riverside' AND ss.AvgScrMath > 400;",0,california_schools,best_pred_metadata
26,26,"SELECT T1.`School Name`, T2.Zip, T2.Street, T2.City, T2.State FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Monterey' AND T1.`Free Meal Count (Ages 5-17)` > 800 AND T1.`School Type` = 'High Schools (Public)'","
SELECT s.School, s.Street, s.City, s.State, s.Zip
FROM schools s
JOIN frpm f ON s.CDSCode = f.CDSCode
WHERE s.County = 'Monterey'
AND f.HighGrade >= 12
AND f.`FRPM Count (Ages 5-17)` > 800;",0,california_schools,best_pred_metadata
27,27,"SELECT T2.School, T1.AvgScrWrite, T2.Phone, strftime('%Y', T2.OpenDate), strftime('%Y', T2.ClosedDate) FROM schools AS T2 LEFT JOIN satscores AS T1 ON T2.CDSCode = T1.cds WHERE strftime('%Y', T2.OpenDate) > '1991' AND strftime('%Y', T2.ClosedDate) < '2000'","
SELECT s.School, sa.AvgScrWrite, sc.Phone
FROM schools s
JOIN satscores sa ON s.CDSCode = sa.cds
LEFT JOIN schools sc ON s.CDSCode = sc.CDSCode
WHERE (s.OpenDate > '1991-01-01' OR s.ClosedDate < '2000-01-01')
AND sa.AvgScrWrite IS NOT NULL;",0,california_schools,best_pred_metadata
28,28,"SELECT T2.School, T2.DOC FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.FundingType = 'Locally funded' AND (T1.`Enrollment (K-12)` - T1.`Enrollment (Ages 5-17)`) > (SELECT AVG(T3.`Enrollment (K-12)` - T3.`Enrollment (Ages 5-17)`) FROM frpm AS T3 INNER JOIN schools AS T4 ON T3.CDSCode = T4.CDSCode WHERE T4.FundingType = 'Locally funded')","
SELECT s.School, s.DOCType
FROM schools s
JOIN frpm f ON s.CDSCode = f.CDSCode
JOIN satscores sa ON s.CDSCode = sa.cds
WHERE s.FundingType = 'Locally Funded'
GROUP BY s.CDSCode
HAVING ABS(f.Enrollment_K_12 - f.Enrollment_Ages_5_17) > (SELECT AVG(ABS(f.Enrollment_K_12 - f.Enrollment_Ages_5_17))
                                                         FROM schools s
                                                         JOIN frpm f ON s.CDSCode = f.CDSCode
                                                         WHERE s.FundingType = 'Locally Funded')",0,california_schools,best_pred_metadata
29,29,SELECT T2.OpenDate FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode ORDER BY T1.`Enrollment (K-12)` DESC LIMIT 1,"
SELECT OpenDate
FROM schools
JOIN frpm ON schools.CDSCode = frpm.CDSCode
WHERE frpm.`High Grade` = '12'
ORDER BY frpm.`Enrollment (K-12)` DESC
LIMIT 1;",1,california_schools,best_pred_metadata
30,30,SELECT T2.City FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode GROUP BY T2.City ORDER BY SUM(T1.`Enrollment (K-12)`) ASC LIMIT 5,"
SELECT City, Enrollment_K_12
FROM frpm
JOIN schools ON frpm.CDSCode = schools.CDSCode
ORDER BY Enrollment_K_12 ASC
LIMIT 5;",0,california_schools,best_pred_metadata
31,31,"SELECT CAST(`Free Meal Count (K-12)` AS REAL) / `Enrollment (K-12)` FROM frpm ORDER BY `Enrollment (K-12)` DESC LIMIT 9, 2","
SELECT ""Percent (%) Eligible Free (K-12)""
FROM frpm
WHERE CDSCode IN (
    SELECT CDSCode
    FROM schools
    ORDER BY ""Enrollment (K-12)"" DESC
    LIMIT 10
)
ORDER BY ""Enrollment (K-12)"" DESC
LIMIT 2;",0,california_schools,best_pred_metadata
32,32,SELECT CAST(T1.`FRPM Count (K-12)` AS REAL) / T1.`Enrollment (K-12)` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.SOC = 66 ORDER BY T1.`FRPM Count (K-12)` DESC LIMIT 5,"
SELECT ""Percent (%) Eligible FRPM (K-12)""
FROM frpm
WHERE ""District Type"" = 66
ORDER BY ""FRPM Count (K-12)"" DESC
LIMIT 5;",0,california_schools,best_pred_metadata
33,33,"SELECT T2.Website, T1.`School Name` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`Free Meal Count (Ages 5-17)` BETWEEN 1900 AND 2000 AND T2.Website IS NOT NULL","
SELECT s.School, s.Website
FROM schools s
JOIN frpm f ON s.CDSCode = f.CDSCode
WHERE f.`Free Meal Count (Ages 5-17)` BETWEEN 1900 AND 2000;",0,california_schools,best_pred_metadata
34,34,SELECT CAST(T2.`Free Meal Count (Ages 5-17)` AS REAL) / T2.`Enrollment (Ages 5-17)` FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.AdmFName1 = 'Kacey' AND T1.AdmLName1 = 'Gibson',"
SELECT
    ""Percent (%) Eligible Free (Ages 5-17)""
FROM
    frpm
JOIN
    schools ON frpm.CDSCode = schools.CDSCode
WHERE
    schools.AdmFName1 = 'Kacey' AND schools.AdmLName1 = 'Gibson';",0,california_schools,best_pred_metadata
35,35,SELECT T2.AdmEmail1 FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`Charter School (Y/N)` = 1 ORDER BY T1.`Enrollment (K-12)` ASC LIMIT 1,"
SELECT AdmEmail1
FROM schools
JOIN frpm ON schools.CDSCode = frpm.CDSCode
WHERE schools.Charter = 1
ORDER BY frpm.Enrollment_K_12 ASC
LIMIT 1;",0,california_schools,best_pred_metadata
36,36,"SELECT T2.AdmFName1, T2.AdmLName1, T2.AdmFName2, T2.AdmLName2, T2.AdmFName3, T2.AdmLName3 FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.NumGE1500 DESC LIMIT 1","
SELECT s.AdmFName1, s.AdmLName1
FROM schools s
JOIN satscores ss ON s.CDSCode = ss.cds
WHERE ss.NumGE1500 = (SELECT MAX(NumGE1500) FROM satscores)
AND ss.NumTstTakr = (SELECT MAX(NumTstTakr) FROM satscores);",0,california_schools,best_pred_metadata
37,37,"SELECT T2.Street, T2.City, T2.Zip, T2.State FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY CAST(T1.NumGE1500 AS REAL) / T1.NumTstTakr ASC LIMIT 1","
SELECT s.Street, s.City, s.Zip, s.State
FROM schools s
JOIN satscores ss ON s.CDSCode = ss.cds
ORDER BY (ss.AvgScrRead + ss.AvgScrMath + ss.AvgScrWrite) / 3.0 ASC
LIMIT 1;",1,california_schools,best_pred_metadata
38,38,SELECT T2.Website FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.NumTstTakr BETWEEN 2000 AND 3000 AND T2.County = 'Los Angeles',"
SELECT s.Website
FROM schools s
JOIN satscores ss ON s.CDSCode = ss.cds
WHERE s.County = 'Los Angeles' AND ss.NumTstTakr BETWEEN 2000 AND 3000;",1,california_schools,best_pred_metadata
39,39,"SELECT AVG(T1.NumTstTakr) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE strftime('%Y', T2.OpenDate) = '1980' AND T2.County = 'Fresno'","
SELECT AVG(NumTstTakr)
FROM satscores
JOIN schools ON satscores.cds = schools.CDSCode
WHERE schools.County = 'Fresno' AND schools.OpenDate BETWEEN '1980-01-01' AND '1980-12-31';",1,california_schools,best_pred_metadata
40,40,SELECT T2.Phone FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.District = 'Fresno Unified' AND T1.AvgScrRead IS NOT NULL ORDER BY T1.AvgScrRead ASC LIMIT 1,"
SELECT Phone
FROM schools
WHERE District = 'Fresno Unified'
AND CDSCode = (
    SELECT cds
    FROM satscores
    WHERE AvgScrRead = (
        SELECT MIN(AvgScrRead)
        FROM satscores
        WHERE dname = 'Fresno Unified'
    )
)",1,california_schools,best_pred_metadata
41,41,SELECT T2.School FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.Virtual = 'F' ORDER BY T1.AvgScrRead DESC LIMIT 5,"
SELECT s.School, sa.AvgScrRead
FROM schools s
JOIN satscores sa ON s.CDSCode = sa.cds
WHERE s.Virtual = 'Yes'
ORDER BY sa.AvgScrRead DESC
LIMIT 5;",0,california_schools,best_pred_metadata
42,42,SELECT T2.EdOpsName FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.AvgScrMath DESC LIMIT 1,"
SELECT frpm.""Educational Option Type""
FROM frpm
JOIN satscores ON frpm.CDSCode = satscores.cds
WHERE satscores.AvgScrMath = (SELECT MAX(AvgScrMath) FROM satscores)
LIMIT 1;",0,california_schools,best_pred_metadata
43,43,"SELECT T1.AvgScrMath, T2.County FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrMath IS NOT NULL ORDER BY T1.AvgScrMath + T1.AvgScrRead + T1.AvgScrWrite ASC LIMIT 1","
SELECT s.AvgScrMath, sc.County
FROM satscores s
JOIN schools sc ON s.cds = sc.CDSCode
WHERE s.AvgScrRead = (SELECT MIN(AvgScrRead) FROM satscores)
AND s.AvgScrMath = (SELECT MIN(AvgScrMath) FROM satscores)
AND s.AvgScrWrite = (SELECT MIN(AvgScrWrite) FROM satscores);",0,california_schools,best_pred_metadata
44,44,"SELECT T1.AvgScrWrite, T2.City FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.NumGE1500 DESC LIMIT 1","
SELECT AVG(AvgScrWrite) AS Average_Writing_Score, City
FROM satscores
JOIN schools ON satscores.cds = schools.CDSCode
WHERE NumTstTakr = (SELECT MAX(NumTstTakr) FROM satscores WHERE NumGE1500 >= 1500)
AND NumGE1500 >= 1500;",1,california_schools,best_pred_metadata
45,45,"SELECT T2.School, T1.AvgScrWrite FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.AdmFName1 = 'Ricci' AND T2.AdmLName1 = 'Ulrich'","
SELECT s.School, AVG(satscores.AvgScrWrite) AS AverageWritingScore
FROM schools s
JOIN satscores ON s.CDSCode = satscores.cds
WHERE s.AdmFName1 = 'Ricci' AND s.AdmLName1 = 'Ulrich'
GROUP BY s.School;",1,california_schools,best_pred_metadata
46,46,SELECT T2.School FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.DOC = 31 ORDER BY T1.`Enrollment (K-12)` DESC LIMIT 1,"
SELECT s.State, s.School, frpm.`Enrollment (K-12)`
FROM schools s
JOIN frpm ON s.CDSCode = frpm.CDSCode
WHERE s.StatusType = 'Special'
ORDER BY frpm.`Enrollment (K-12)` DESC
LIMIT 1;",0,california_schools,best_pred_metadata
47,47,"SELECT CAST(COUNT(School) AS REAL) / 12 FROM schools WHERE DOC = 52 AND County = 'Alameda' AND strftime('%Y', OpenDate) = '1980'","
SELECT AVG(COUNT(CDSCode)) AS MonthlyAverageSchoolsOpened
FROM schools
WHERE County = 'Alameda' AND District = 'Elementary School District' AND EXTRACT(YEAR FROM OpenDate) = 1980;

The query calculates the monthly average number of schools that opened in Alameda County under the jurisdiction of the Elementary School District in 1980. It does this by counting the number of schools that opened each month and then calculating the average of those counts. The EXTRACT function is used to extract the year from the OpenDate column.",0,california_schools,best_pred_metadata
48,48,SELECT CAST(SUM(CASE WHEN DOC = 54 THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN DOC = 52 THEN 1 ELSE 0 END) FROM schools WHERE StatusType = 'Merged' AND County = 'Orange',"
SELECT
    (COUNT(DISTINCT s.CDSCode) FILTER (WHERE s.District LIKE '%Merged%' AND s.County = 'Orange County' AND f.`District Type` = 'Unified School District')) /
    NULLIF(COUNT(DISTINCT s.CDSCode) FILTER (WHERE s.District LIKE '%Merged%' AND s.County = 'Orange County' AND f.`District Type` = 'Elementary School District'), 0) AS ratio
FROM
    schools s
JOIN
    frpm f ON s.CDSCode = f.CDSCode
WHERE
    s.District LIKE '%Merged%' AND s.County = 'Orange County'
    AND (f.`District Type` = 'Unified School District' OR f.`District Type` = 'Elementary School District');",0,california_schools,best_pred_metadata
49,49,"SELECT DISTINCT County, School, ClosedDate FROM schools WHERE County = ( SELECT County FROM schools WHERE StatusType = 'Closed' GROUP BY County ORDER BY COUNT(School) DESC LIMIT 1 ) AND StatusType = 'Closed' AND school IS NOT NULL","
SELECT County, School, ClosedDate
FROM schools
WHERE ClosedDate IS NOT NULL
GROUP BY County
ORDER BY COUNT(*) DESC
LIMIT 1;",0,california_schools,best_pred_metadata
50,50,"SELECT T2.MailStreet, T2.School FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.AvgScrMath DESC LIMIT 5, 1","
SELECT Street, City, Zip, School
FROM schools
WHERE CDSCode = (
    SELECT cds
    FROM satscores
    ORDER BY AvgScrMath DESC
    LIMIT 1 OFFSET 5
)",0,california_schools,best_pred_metadata
51,51,"SELECT T2.MailStreet, T2.School FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrRead IS NOT NULL ORDER BY T1.AvgScrRead ASC LIMIT 1","
SELECT s.MailStreet, s.School
FROM schools s
JOIN satscores ss ON s.CDSCode = ss.cds
WHERE ss.AvgScrRead = (SELECT MIN(AvgScrRead) FROM satscores WHERE AvgScrRead IS NOT NULL);",0,california_schools,best_pred_metadata
52,52,SELECT COUNT(T1.cds) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.MailCity = 'Lakeport' AND (T1.AvgScrRead + T1.AvgScrMath + T1.AvgScrWrite) >= 1500,"
SELECT COUNT(*)
FROM schools
JOIN satscores ON schools.CDSCode = satscores.cds
WHERE (AvgScrRead + AvgScrMath + AvgScrWrite) >= 1500
AND MailCity = 'Lakeport';",1,california_schools,best_pred_metadata
53,53,SELECT T1.NumTstTakr FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.MailCity = 'Fresno',"
SELECT COUNT(NumTstTakr)
FROM satscores
JOIN schools ON satscores.cds = schools.CDSCode
WHERE schools.MailCity = 'Fresno';",0,california_schools,best_pred_metadata
54,54,"SELECT School, MailZip FROM schools WHERE AdmFName1 = 'Avetik' AND AdmLName1 = 'Atoian'","
SELECT s.School, s.MailZip
FROM schools s
WHERE s.AdmFName1 = 'Avetik' AND s.AdmLName1 = 'Atoian';",1,california_schools,best_pred_metadata
55,55,SELECT CAST(SUM(CASE WHEN County = 'Colusa' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN County = 'Humboldt' THEN 1 ELSE 0 END) FROM schools WHERE MailState = 'CA',"
SELECT
    (COUNT(*) FILTER (WHERE County = 'Colusa'))::FLOAT / NULLIF(COUNT(*) FILTER (WHERE County = 'Humboldt'), 0) AS ratio
FROM
    schools
WHERE
    MailState = 'CA';",0,california_schools,best_pred_metadata
56,56,SELECT COUNT(CDSCode) FROM schools WHERE City = 'San Joaquin' AND MailState = 'CA' AND StatusType = 'Active',"
SELECT COUNT(*)
FROM schools
WHERE MailState = 'CA' AND County = 'San Joaquin' AND StatusType = 'Active';",0,california_schools,best_pred_metadata
57,57,"SELECT T2.Phone, T2.Ext FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.AvgScrWrite DESC LIMIT 332, 1","
SELECT Phone, Ext
FROM schools
WHERE CDSCode = (
    SELECT cds
    FROM satscores
    ORDER BY AvgScrWrite DESC
    LIMIT 1 OFFSET 332
);",0,california_schools,best_pred_metadata
58,58,"SELECT Phone, Ext, School FROM schools WHERE Zip = '95203-3704'","
SELECT Phone, Ext, School
FROM schools
WHERE Zip = '95203-3704';",1,california_schools,best_pred_metadata
59,59,SELECT Website FROM schools WHERE (AdmFName1 = 'Mike' AND AdmLName1 = 'Larson') OR (AdmFName1 = 'Dante' AND AdmLName1 = 'Alvarez'),"
SELECT Website
FROM schools
WHERE AdmFName1 IN ('Mike', 'Dante')
AND (AdmLName1 = 'Larson' OR AdmLName1 = 'Alvarez');",1,california_schools,best_pred_metadata
60,60,SELECT Website FROM schools WHERE County = 'San Joaquin' AND Virtual = 'P' AND Charter = 1,"
SELECT Website
FROM schools
WHERE Charter = 1
AND County = 'San Joaquin'
AND Virtual = 'Partially Virtual';",0,california_schools,best_pred_metadata
61,61,SELECT COUNT(School) FROM schools WHERE DOC = 52 AND Charter = 1 AND City = 'Hickman',"
SELECT COUNT(*)
FROM schools
WHERE City = 'Hickman' AND Charter = 1 AND District = 'Elementary School District';",0,california_schools,best_pred_metadata
62,62,SELECT COUNT(T2.School) FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Los Angeles' AND T2.Charter = 0 AND CAST(T1.`Free Meal Count (K-12)` AS REAL) * 100 / T1.`Enrollment (K-12)` < 0.18,"
SELECT COUNT(*)
FROM frpm
JOIN schools ON frpm.CDSCode = schools.CDSCode
WHERE schools.Charter = 0
AND frpm.CountyName = 'Los Angeles'
AND frpm.`Percent (%) Eligible Free (K-12)` < 0.18;",0,california_schools,best_pred_metadata
63,63,"SELECT AdmFName1, AdmLName1, School, City FROM schools WHERE Charter = 1 AND CharterNum = '00D2'","
SELECT s.School, s.City, s.AdmFName1, s.AdmLName1, s.AdmFName2, s.AdmLName2, s.AdmFName3, s.AdmLName3
FROM schools s
WHERE s.Charter = 1 AND s.CharterNum = '00D2';",0,california_schools,best_pred_metadata
64,64,SELECT COUNT(*) FROM schools WHERE CharterNum = '00D4' AND MailCity = 'Hickman',"
SELECT COUNT(*)
FROM schools
WHERE MailCity = 'Hickman' AND CharterNum = '00D4';",1,california_schools,best_pred_metadata
65,65,SELECT CAST(SUM(CASE WHEN FundingType = 'Locally funded' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN FundingType != 'Locally funded' THEN 1 ELSE 0 END) FROM schools WHERE County = 'Santa Clara' AND Charter = 1,"
SELECT
    (COUNT(CASE WHEN FundingType = 'Locally Funded' THEN 1 END) * 100.0 / COUNT(*)) AS Locally_Funded_Ratio
FROM
    schools
WHERE
    County = 'Santa Clara' AND Charter = 1 AND FundingType != 'Locally Funded';",0,california_schools,best_pred_metadata
66,66,"SELECT COUNT(School) FROM schools WHERE strftime('%Y', OpenDate) BETWEEN '2000' AND '2005' AND County = 'Stanislaus' AND FundingType = 'Directly funded'","
SELECT COUNT(*)
FROM schools
WHERE OpenDate BETWEEN '2000-01-01' AND '2005-12-31'
AND County = 'Stanislaus'
AND FundingType = 'Directly Funded';",0,california_schools,best_pred_metadata
67,67,"SELECT COUNT(School) FROM schools WHERE strftime('%Y', ClosedDate) = '1989' AND City = 'San Francisco' AND DOCType = 'Community College District'","
SELECT COUNT(*)
FROM schools
WHERE ClosedDate BETWEEN '1989-01-01' AND '1989-12-31'
AND City = 'San Francisco'
AND DOCType = 'Community College District'

The query above will count the number of schools that were closed in 1989 in the city of San Francisco and have a District of Control (DOC) type of 'Community College District'. Since the question asks for the total amount of closure, the count of closed schools is the appropriate metric to retrieve.",0,california_schools,best_pred_metadata
68,68,"SELECT County FROM schools WHERE strftime('%Y', ClosedDate) BETWEEN '1980' AND '1989' AND StatusType = 'Closed' AND SOC = 11 GROUP BY County ORDER BY COUNT(School) DESC LIMIT 1","
SELECT County
FROM schools
WHERE ClosedDate BETWEEN '1980-01-01' AND '1989-12-31'
AND DOCType = 'Youth Authority Facilities (CEA)'
GROUP BY County
ORDER BY COUNT(*) DESC
LIMIT 1;",0,california_schools,best_pred_metadata
69,69,SELECT NCESDist FROM schools WHERE SOC = 31,"
SELECT NCESDist
FROM schools
WHERE EdOpsName = 'State Special Schools';",0,california_schools,best_pred_metadata
70,70,SELECT COUNT(School) FROM schools WHERE (StatusType = 'Closed' OR StatusType = 'Active') AND County = 'Alpine',"
SELECT COUNT(*)
FROM schools
WHERE County = 'Alpine' AND StatusType IN ('Active', 'Closed') AND DOCType = 'District Community Day School';",0,california_schools,best_pred_metadata
71,71,SELECT T1.`District Code` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.City = 'Fresno' AND T2.Magnet = 0,"
SELECT DistrictCode
FROM frpm
WHERE SchoolName IN (
    SELECT School
    FROM schools
    WHERE City = 'Fresno' AND Magnet = 0
)",0,california_schools,best_pred_metadata
72,72,SELECT T1.`Enrollment (Ages 5-17)` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.EdOpsCode = 'SSS' AND T2.City = 'Fremont' AND T1.`Academic Year` BETWEEN 2014 AND 2015,"
SELECT frpm.""Enrollment (Ages 5-17)""
FROM frpm
JOIN schools ON frpm.""School Name"" = schools.School
WHERE schools.School = 'State Special School'
AND schools.City = 'Fremont'
AND frpm.""Academic Year"" = '2014-2015';",0,california_schools,best_pred_metadata
73,73,SELECT T1.`FRPM Count (Ages 5-17)` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.MailStreet = 'PO Box 1040' AND T2.SOCType = 'Youth Authority Facilities',"
SELECT ""FRPM Count (Ages 5-17)""
FROM frpm
JOIN schools ON frpm.CDSCode = schools.CDSCode
WHERE schools.School = 'Youth Authority School' AND schools.MailStreet = 'PO Box 1040';",0,california_schools,best_pred_metadata
74,74,SELECT MIN(T1.`Low Grade`) FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.NCESDist = 613360 AND T2.EdOpsCode = 'SPECON',"
SELECT `Low Grade`
FROM frpm
WHERE `District Name` = 'District Special Education Consortia School'
AND `School Code` = (SELECT NCESSchool FROM schools WHERE NCESDist = '613360');",0,california_schools,best_pred_metadata
75,75,"SELECT T2.EILName, T2.School FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`NSLP Provision Status` = 'Breakfast Provision 2' AND T1.`County Code` = 37","
SELECT s.School, f.`Educational Option Type`
FROM schools s
JOIN frpm f ON s.CDSCode = f.CDSCode
WHERE f.`County Code` = 37 AND f.`NSLP Provision Status` = 'Breakfast Provision 2';",0,california_schools,best_pred_metadata
76,76,SELECT T2.City FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`NSLP Provision Status` = 'Lunch Provision 2' AND T2.County = 'Merced' AND T1.`Low Grade` = 9 AND T1.`High Grade` = 12 AND T2.EILCode = 'HS',"
SELECT City
FROM schools
WHERE School LIKE '%High%'
AND CDSCode IN (
    SELECT CDSCode
    FROM frpm
    WHERE `NSLP Provision Status` = '2'
    AND `Low Grade` = '9'
    AND `High Grade` = '12'
    AND `County Name` = 'Merced'
)",0,california_schools,best_pred_metadata
77,77,"SELECT T2.School, T1.`FRPM Count (Ages 5-17)` * 100 / T1.`Enrollment (Ages 5-17)` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Los Angeles' AND T2.GSserved = 'K-9'","
SELECT School, `Percent (%) Eligible FRPM (Ages 5-17)`
FROM frpm
WHERE `County Name` = 'Los Angeles'
AND `Low Grade` = 'Kindergarten'
AND `High Grade` = '9th Grade';",0,california_schools,best_pred_metadata
78,78,SELECT GSserved FROM schools WHERE City = 'Adelanto' GROUP BY GSserved ORDER BY COUNT(GSserved) DESC LIMIT 1,"
SELECT GSserved, COUNT(*) as count
FROM schools
WHERE City = 'Adelanto'
GROUP BY GSserved
ORDER BY count DESC
LIMIT 1;",0,california_schools,best_pred_metadata
79,79,"SELECT County, COUNT(Virtual) FROM schools WHERE (County = 'San Diego' OR County = 'Santa Barbara') AND Virtual = 'F' GROUP BY County ORDER BY COUNT(Virtual) DESC LIMIT 1","
SELECT COUNT(*) as Number_of_Schools, County
FROM schools
WHERE County IN ('San Diego', 'Santa Barbara')
AND (Street IS NULL OR Street = '')
GROUP BY County
ORDER BY Number_of_Schools DESC
LIMIT 1;",0,california_schools,best_pred_metadata
80,80,"SELECT T1.`School Type`, T1.`School Name`, T2.Latitude FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode ORDER BY T2.Latitude DESC LIMIT 1","
SELECT School, Latitude, SchoolType
FROM schools
WHERE Latitude = (SELECT MAX(Latitude) FROM schools);",0,california_schools,best_pred_metadata
81,81,"SELECT T2.City, T1.`Low Grade`, T1.`School Name` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.State = 'CA' ORDER BY T2.Latitude ASC LIMIT 1","
SELECT s.School, f.`Low Grade`
FROM schools s
JOIN frpm f ON s.CDSCode = f.CDSCode
WHERE s.State = 'California'
ORDER BY s.Latitude ASC
LIMIT 1;",0,california_schools,best_pred_metadata
82,82,SELECT GSoffered FROM schools ORDER BY ABS(longitude) DESC LIMIT 1,"
SELECT ""Low Grade"", ""High Grade""
FROM frpm
WHERE ""School Code"" = (
    SELECT ""School Code""
    FROM schools
    ORDER BY ""Longitude"" DESC
    LIMIT 1
)

This query first finds the school code of the school with the highest longitude from the schools table. Then, it uses this school code to retrieve the low and high grade offered in the frpm table.",0,california_schools,best_pred_metadata
83,83,"SELECT T2.City, COUNT(T2.CDSCode) FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.Magnet = 1 AND T2.GSoffered = 'K-8' AND T1.`NSLP Provision Status` = 'Multiple Provision Types' GROUP BY T2.City","
SELECT COUNT(DISTINCT s.CDSCode) AS Number_of_Schools_Offering_Multiple_Provision_Types,
       s.City,
       COUNT(DISTINCT s.CDSCode) AS Number_of_Schools_in_City
FROM schools s
JOIN frpm f ON s.CDSCode = f.CDSCode
WHERE s.Magnet = 1
  AND s.GSserved LIKE '%Kindergarten%'
  AND s.GSserved LIKE '%8th%'
GROUP BY s.City
HAVING COUNT(DISTINCT f.Educational_Option_Type) > 1;",0,california_schools,best_pred_metadata
84,84,"SELECT DISTINCT T1.AdmFName1, T1.District FROM schools AS T1 INNER JOIN ( SELECT admfname1 FROM schools GROUP BY admfname1 ORDER BY COUNT(admfname1) DESC LIMIT 2 ) AS T2 ON T1.AdmFName1 = T2.admfname1","
SELECT AdmFName1, District, COUNT(*) as count
FROM schools
GROUP BY AdmFName1, District
ORDER BY count DESC
LIMIT 2;",0,california_schools,best_pred_metadata
85,85,"SELECT T1.`Free Meal Count (K-12)` * 100 / T1.`Enrollment (K-12)`, T1.`District Code` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.AdmFName1 = 'Alusine'","
SELECT frpm.""Percent (%) Eligible Free (K-12)"", frpm.""District Code""
FROM frpm
JOIN schools ON frpm.CDSCode = schools.CDSCode
WHERE schools.AdmFName1 = 'Alusine';",0,california_schools,best_pred_metadata
86,86,"SELECT AdmLName1, District, County, School FROM schools WHERE CharterNum = '0040'","
SELECT AdmLName1, District, County, School
FROM schools
WHERE CharterNum = 40;",0,california_schools,best_pred_metadata
87,87,"SELECT T2.AdmEmail1 FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'San Bernardino' AND T2.City = 'San Bernardino' AND T2.DOC = 54 AND strftime('%Y', T2.OpenDate) BETWEEN '2009' AND '2010' AND T2.SOC = 62","
SELECT AdmEmail1
FROM schools
WHERE County = 'San Bernardino'
AND District = 'San Bernardino City Unified'
AND OpenDate BETWEEN '2009-01-01' AND '2010-12-31'
AND School IN (
    SELECT School
    FROM frpm
    WHERE (District Type = 'Public Intermediate/Middle Schools' OR District Type = 'Unified Schools')
);",0,california_schools,best_pred_metadata
88,89,SELECT COUNT(T1.district_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T1.A3 = 'East Bohemia' AND T2.frequency = 'POPLATEK PO OBRATU',"
SELECT COUNT(*)
FROM account
JOIN client ON account.district_id = client.district_id
JOIN district ON client.district_id = district.district_id
WHERE account.frequency = 'after transaction' AND district.A2 = 'East Bohemia'",1,financial,best_pred_metadata
89,90,SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T1.district_id = T3.district_id WHERE T3.A3 = 'Prague',"
SELECT COUNT(a.account_id)
FROM account a
JOIN district d ON a.district_id = d.district_id
WHERE d.A2 = 'Prague'
AND EXISTS (
    SELECT 1
    FROM loan l
    WHERE l.account_id = a.account_id
)",0,financial,best_pred_metadata
90,91,"SELECT DISTINCT IIF(AVG(A13) > AVG(A12), '1996', '1995') FROM district","
SELECT AVG(A14 / A4) AS unemployment_ratio
FROM district
WHERE district_id IN (
    SELECT district_id
    FROM account
    WHERE date BETWEEN '1995-01-01' AND '1996-12-31'
)
GROUP BY date
ORDER BY unemployment_ratio DESC
LIMIT 1;",0,financial,best_pred_metadata
91,92,SELECT DISTINCT T2.district_id FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T2.A11 BETWEEN 6000 AND 10000,"
SELECT COUNT(district_id)
FROM district
WHERE A10 > 6000 AND A10 < 10000
AND district_id IN (
    SELECT district_id
    FROM client
    WHERE gender = 'female'
)",0,financial,best_pred_metadata
92,93,SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A3 = 'North Bohemia' AND T2.A11 > 8000,"
SELECT COUNT(*)
FROM client
JOIN district ON client.district_id = district.district_id
WHERE client.gender = 'male' AND district.A2 = 'North Bohemia' AND district.A10 > 8000;",1,financial,best_pred_metadata
93,94,"SELECT T1.account_id , ( SELECT MAX(A11) - MIN(A11) FROM district ) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.district_id = ( SELECT district_id FROM client WHERE gender = 'F' ORDER BY birth_date ASC LIMIT 1 ) ORDER BY T2.A11 DESC LIMIT 1","
SELECT a.account_id,
       (SELECT MAX(A10) FROM district) - (SELECT MIN(A10) FROM district) AS salary_gap
FROM account a
JOIN client c ON a.district_id = c.district_id
JOIN district d ON a.district_id = d.district_id
WHERE c.gender = 'female'
ORDER BY c.birth_date ASC
LIMIT 1;",0,financial,best_pred_metadata
94,95,SELECT T1.account_id FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.district_id = ( SELECT district_id FROM client ORDER BY birth_date DESC LIMIT 1 ) ORDER BY T2.A11 DESC LIMIT 1,"
SELECT a.account_id
FROM account a
JOIN client c ON a.district_id = c.district_id
JOIN district d ON a.district_id = d.district_id
WHERE c.birth_date = (SELECT MAX(birth_date) FROM client)
AND d.A10 = (SELECT MAX(A10) FROM district)",0,financial,best_pred_metadata
95,96,SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T2.type = 'Owner' AND T1.frequency = 'POPLATEK TYDNE',"
SELECT COUNT(*)
FROM client
JOIN disp ON client.client_id = disp.client_id
JOIN account ON disp.account_id = account.account_id
WHERE account.frequency = 'weekly' AND disp.type = 'OWNER';",1,financial,best_pred_metadata
96,97,SELECT T2.client_id FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T1.frequency = 'POPLATEK PO OBRATU' AND T2.type = 'DISPONENT',"
SELECT c.client_id, c.gender, c.birth_date, c.district_id
FROM client c
JOIN disp d ON c.client_id = d.client_id
JOIN account a ON d.account_id = a.account_id
WHERE a.frequency = 'after transaction' AND d.type = 'Disponent';",0,financial,best_pred_metadata
97,98,"SELECT T2.account_id FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T1.date) = '1997' AND T2.frequency = 'POPLATEK TYDNE' ORDER BY T1.amount LIMIT 1","
SELECT account_id, MIN(amount) AS lowest_amount
FROM loan
WHERE strftime('%Y', date) = '1997' AND status = 'approved'
GROUP BY account_id
HAVING account_id IN (
    SELECT account_id
    FROM account
    WHERE frequency = 'weekly'
)",0,financial,best_pred_metadata
98,99,"SELECT T1.account_id FROM loan AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T1.date) = '1993' AND T1.duration = 12 ORDER BY T1.amount DESC LIMIT 1","
SELECT account_id, MAX(amount) AS highest_approved_amount
FROM loan
WHERE duration > 12 AND status = 'approved'
AND account_id IN (
    SELECT account_id
    FROM account
    WHERE strftime('%Y', date) = '1993'
)
GROUP BY account_id
ORDER BY highest_approved_amount DESC
LIMIT 1;",0,financial,best_pred_metadata
99,100,"SELECT COUNT(T2.client_id) FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.gender = 'F' AND STRFTIME('%Y', T2.birth_date) < '1950' AND T1.A2 = 'Slokolov'","
SELECT COUNT(*)
FROM account
JOIN client ON account.district_id = client.district_id
JOIN district ON account.district_id = district.district_id
WHERE client.gender = 'female' AND client.birth_date < '1950-01-01' AND district.A2 = 'Slokolov';",1,financial,best_pred_metadata
100,101,"SELECT account_id FROM trans WHERE STRFTIME('%Y', date) = '1995' ORDER BY date ASC LIMIT 1","
SELECT account_id
FROM trans
WHERE date >= '1995-01-01' AND date <= '1995-12-31'
ORDER BY date ASC
LIMIT 1;",1,financial,best_pred_metadata
101,102,"SELECT DISTINCT T2.account_id FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T2.date) < '1997' AND T1.amount > 3000","
SELECT a.account_id, a.date
FROM account a
JOIN loan l ON a.account_id = l.account_id
WHERE a.date < '1997-01-01' AND l.amount > 3000;",0,financial,best_pred_metadata
102,103,SELECT T2.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T3.issued = '1994-03-03',"
SELECT client.client_id
FROM client
JOIN disp ON client.client_id = disp.client_id
JOIN card ON disp.disp_id = card.disp_id
WHERE card.issued = '1994-03-03';",1,financial,best_pred_metadata
103,104,SELECT T1.date FROM account AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T2.amount = 840 AND T2.date = '1998-10-14',"
SELECT a.date
FROM account a
JOIN trans t ON a.account_id = t.account_id
WHERE t.amount = 840 AND t.date = '1998-10-14';",1,financial,best_pred_metadata
104,105,SELECT T1.district_id FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.date = '1994-08-25',"
SELECT a.district_id
FROM account a
JOIN loan l ON a.account_id = l.account_id
WHERE l.date = '1994-08-25' AND l.status = 'approved';",0,financial,best_pred_metadata
105,107,"SELECT T2.gender FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id ORDER BY T1.A11 DESC, T2.birth_date ASC LIMIT 1","
SELECT client.gender
FROM client
JOIN account ON client.client_id = account.account_id
JOIN district ON account.district_id = district.district_id
WHERE client.birth_date = (SELECT MIN(birth_date) FROM client)
AND district.A10 = (SELECT MAX(A10) FROM district);",0,financial,best_pred_metadata
106,108,"SELECT T2.amount FROM loan AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id ORDER BY T1.amount DESC, T2.date ASC LIMIT 1","
SELECT t.amount
FROM trans t
JOIN account a ON t.account_id = a.account_id
JOIN loan l ON a.account_id = l.account_id
JOIN client c ON a.district_id = c.district_id
WHERE l.amount = (SELECT MAX(amount) FROM loan)
ORDER BY t.date
LIMIT 1;",1,financial,best_pred_metadata
107,106,SELECT T2.amount FROM account AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T1.date = '1996-10-21' ORDER BY T2.amount DESC LIMIT 1,"
SELECT MAX(amount)
FROM trans
WHERE account_id IN (
    SELECT account_id
    FROM card
    WHERE disp_id IN (
        SELECT disp_id
        FROM disp
        WHERE client_id IN (
            SELECT client_id
            FROM client
            WHERE client_id IN (
                SELECT client_id
                FROM card
                WHERE issued = '1996-10-21'
            )
        )
    )
);",0,financial,best_pred_metadata
108,109,SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T2.A2 = 'Jesenik',"
SELECT COUNT(*)
FROM client
WHERE district_id = (SELECT district_id FROM district WHERE A2 = 'Jesenik')
AND gender = 'female';",0,financial,best_pred_metadata
109,110,SELECT T1.disp_id FROM disp AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T2.date = '1998-09-02' AND T2.amount = 5100,"
SELECT disp_id
FROM disp
WHERE client_id = (
    SELECT client_id
    FROM trans
    WHERE amount = 5100 AND date = '1998-09-02'
);",0,financial,best_pred_metadata
110,111,"SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T2.date) = '1996' AND T1.A2 = 'Litomerice'","
SELECT COUNT(*)
FROM account
WHERE district_id IN (
    SELECT district_id
    FROM district
    WHERE A2 = 'Litomerice'
)
AND date BETWEEN '1996-01-01' AND '1996-12-31';",1,financial,best_pred_metadata
111,112,SELECT T1.A2 FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.birth_date = '1976-01-29' AND T2.gender = 'F',"
SELECT d.A2 AS district_name
FROM client c
JOIN account a ON c.client_id = a.account_id
JOIN district d ON a.district_id = d.district_id
WHERE c.gender = 'female' AND c.birth_date = '1976-01-29';",0,financial,best_pred_metadata
112,113,SELECT T3.birth_date FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.district_id = T3.district_id WHERE T1.date = '1996-01-03' AND T1.amount = 98832,"
SELECT client.birth_date
FROM client
JOIN disp ON client.client_id = disp.client_id
JOIN account ON disp.account_id = account.account_id
JOIN loan ON account.account_id = loan.account_id
WHERE loan.amount = 98832 AND loan.date = '1996-01-03';",0,financial,best_pred_metadata
113,114,SELECT T1.account_id FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'Prague' ORDER BY T1.date ASC LIMIT 1,"
SELECT account_id
FROM account
WHERE district_id = (SELECT district_id FROM district WHERE A2 = 'Prague')
ORDER BY date
LIMIT 1;",0,financial,best_pred_metadata
114,115,SELECT CAST(SUM(T1.gender = 'M') AS REAL) * 100 / COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'south Bohemia' GROUP BY T2.A4 ORDER BY T2.A4 DESC LIMIT 1,"
SELECT
    (COUNT(client.client_id) FILTER (WHERE client.gender = 'MALE')) * 100.0 / COUNT(client.client_id) AS male_clients_percentage
FROM
    client
JOIN
    district ON client.district_id = district.district_id
WHERE
    district.A2 = 'SOUTH BOHEMIA'
ORDER BY
    district.A4 DESC
LIMIT 1;",0,financial,best_pred_metadata
115,116,"SELECT CAST((SUM(IIF(T3.date = '1998-12-27', T3.balance, 0)) - SUM(IIF(T3.date = '1993-03-22', T3.balance, 0))) AS REAL) * 100 / SUM(IIF(T3.date = '1993-03-22', T3.balance, 0)) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN trans AS T3 ON T3.account_id = T2.account_id WHERE T1.date = '1993-07-05'","
SELECT
    ((MAX(t2.balance) - MIN(t1.balance)) / MIN(t1.balance)) * 100 AS increase_rate
FROM
    trans t1
JOIN
    trans t2 ON t1.account_id = t2.account_id
JOIN
    loan l ON t1.account_id = l.account_id
JOIN
    client c ON l.account_id = c.client_id
WHERE
    t1.date BETWEEN '1993-03-22' AND '1993-07-05'
    AND t2.date BETWEEN '1993-07-05' AND '1998-12-27'
    AND l.date = '1993-07-05'
GROUP BY
    c.client_id
ORDER BY
    l.date;",0,financial,best_pred_metadata
116,117,SELECT (CAST(SUM(CASE WHEN status = 'A' THEN amount ELSE 0 END) AS REAL) * 100) / SUM(amount) FROM loan,"
SELECT
    (SUM(CASE WHEN status = 'fully paid' THEN amount ELSE 0 END) / CAST(SUM(amount) AS FLOAT)) * 100 AS percentage_fully_paid
FROM
    loan;",0,financial,best_pred_metadata
117,118,SELECT CAST(SUM(status = 'C') AS REAL) * 100 / COUNT(amount) FROM loan WHERE amount < 100000,"
SELECT
    (COUNT(DISTINCT a.account_id) * 100.0 / (SELECT COUNT(DISTINCT account_id) FROM loan WHERE amount < 100000)) AS percentage_of_accounts
FROM
    loan l
JOIN
    account a ON l.account_id = a.account_id
WHERE
    l.amount < 100000 AND l.status = 'running' AND NOT EXISTS (
        SELECT 1
        FROM loan l2
        WHERE l2.account_id = l.account_id AND l2.status <> 'running'
    );",0,financial,best_pred_metadata
118,119,"SELECT T1.account_id, T2.A2, T2.A3 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.frequency = 'POPLATEK PO OBRATU' AND STRFTIME('%Y', T1.date)= '1993'","
SELECT a.account_id, d.A2 AS district_name, d.A3 AS district_region
FROM account a
JOIN district d ON a.district_id = d.district_id
WHERE EXTRACT(YEAR FROM a.date) = 1993
AND a.date > (SELECT MAX(date) FROM trans WHERE trans.account_id = a.account_id);",0,financial,best_pred_metadata
119,120,"SELECT T1.account_id, T1.frequency FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'east Bohemia' AND STRFTIME('%Y', T1.date) BETWEEN '1995' AND '2000'","
SELECT a.account_id, a.frequency
FROM account a
JOIN client c ON a.district_id = c.district_id
JOIN district d ON c.district_id = d.district_id
WHERE d.A2 = 'east Bohemia' AND a.date BETWEEN '1995-01-01' AND '2000-12-31';",0,financial,best_pred_metadata
120,121,"SELECT T1.account_id, T1.date FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Prachatice'","
SELECT account.account_id, account.date
FROM account
JOIN district ON account.district_id = district.district_id
WHERE district.A2 = 'Prachatice';",1,financial,best_pred_metadata
121,122,"SELECT T2.A2, T2.A3 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.loan_id = 4990","
SELECT d.A2 AS district, d.A3 AS region
FROM loan l
JOIN account a ON l.account_id = a.account_id
JOIN district d ON a.district_id = d.district_id
WHERE l.loan_id = 4990;",1,financial,best_pred_metadata
122,123,"SELECT T1.account_id, T2.A2, T2.A3 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.amount > 300000","
SELECT a.account_id, d.A2 AS district, d.A3 AS region
FROM account a
JOIN district d ON a.district_id = d.district_id
JOIN loan l ON a.account_id = l.account_id
WHERE l.amount > 300000;",1,financial,best_pred_metadata
123,124,"SELECT T3.loan_id, T2.A2, T2.A11 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.duration = 60","
SELECT loan.loan_id, district.A2 AS district, district.A10 AS average_salary
FROM loan
JOIN account ON loan.account_id = account.account_id
JOIN district ON account.district_id = district.district_id
WHERE loan.duration = 60;",0,financial,best_pred_metadata
124,125,SELECT CAST((T3.A13 - T3.A12) AS REAL) * 100 / T3.A12 FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.status = 'D',"
SELECT d.A2 AS district, ((d.A13 - (SELECT A13 FROM district WHERE A1 = 1995)) / (SELECT A13 FROM district WHERE A1 = 1995)) * 100 AS unemployment_rate_increment
FROM loan l
JOIN account a ON l.account_id = a.account_id
JOIN disp dsp ON a.account_id = dsp.account_id
JOIN client c ON dsp.client_id = c.client_id
JOIN district d ON c.district_id = d.district_id
WHERE l.status = 'running' AND l.amount > (SELECT SUM(amount) FROM trans WHERE account_id = l.account_id AND type = 'payment')
GROUP BY d.A2;",0,financial,best_pred_metadata
125,126,"SELECT CAST(SUM(T1.A2 = 'Decin') AS REAL) * 100 / COUNT(account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T2.date) = '1993'","
SELECT
    (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM account WHERE strftime('%Y', date) = '1993')) AS percentage_of_accounts
FROM
    account
JOIN
    district ON account.district_id = district.district_id
WHERE
    district.A2 = 'Decin' AND strftime('%Y', account.date) = '1993';",1,financial,best_pred_metadata
126,127,SELECT account_id FROM account WHERE Frequency = 'POPLATEK MESICNE',"
SELECT account_id
FROM account
WHERE frequency = 'monthly';",0,financial,best_pred_metadata
127,128,"SELECT T2.A2, COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' GROUP BY T2.district_id, T2.A2 ORDER BY COUNT(T1.client_id) DESC LIMIT 10","
SELECT d.A2 AS district_name, COUNT(c.client_id) AS female_account_holders
FROM district d
JOIN client c ON d.district_id = c.district_id
JOIN disp dp ON c.client_id = dp.client_id
JOIN account a ON dp.account_id = a.account_id
WHERE c.gender = 'female'
GROUP BY d.district_id, d.A2
ORDER BY female_account_holders DESC
LIMIT 10;",0,financial,best_pred_metadata
128,129,SELECT T1.district_id FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T3.type = 'VYDAJ' AND T2.date LIKE '1996-01%' ORDER BY A2 ASC LIMIT 10,"
SELECT d.A2 AS district_name, t.amount AS withdrawal_amount
FROM trans t
JOIN account a ON t.account_id = a.account_id
JOIN district d ON a.district_id = d.district_id
WHERE t.type = 'WITHDRAWAL'
AND t.operation <> 'CARD'
AND strftime('%Y-%m', t.date) = '1996-01'
ORDER BY t.amount DESC
LIMIT 10;",0,financial,best_pred_metadata
129,130,SELECT COUNT(T3.account_id) FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T2.client_id = T3.client_id WHERE T1.A3 = 'south Bohemia' AND T3.type != 'OWNER',"
SELECT COUNT(*)
FROM client
WHERE district_id IN (
    SELECT district_id
    FROM district
    WHERE A2 = 'South Bohemia'
)
AND client_id NOT IN (
    SELECT client_id
    FROM disp
    WHERE disp_id IN (
        SELECT disp_id
        FROM card
    )
);",0,financial,best_pred_metadata
130,131,"SELECT T2.A3 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.status IN ('C', 'D') GROUP BY T2.A3 ORDER BY SUM(T3.amount) DESC LIMIT 1","
SELECT d.district_id, d.A2 AS district_name, SUM(l.amount) AS total_active_loan
FROM district d
JOIN account a ON d.district_id = a.district_id
JOIN loan l ON a.account_id = l.account_id
WHERE l.status = 'active'
GROUP BY d.district_id, d.A2
ORDER BY total_active_loan DESC
LIMIT 1;",0,financial,best_pred_metadata
131,132,SELECT AVG(T3.amount) FROM client AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T2.account_id = T3.account_id WHERE T1.gender = 'M',"
SELECT AVG(loan.amount)
FROM loan
JOIN account ON loan.account_id = account.account_id
JOIN client ON account.district_id = client.district_id
WHERE client.gender = 'MALE';",0,financial,best_pred_metadata
132,133,"SELECT district_id, A2 FROM district ORDER BY A13 DESC LIMIT 1","
SELECT d.A2 AS district_name, d.A13 AS unemployment_rate
FROM district d
JOIN account a ON d.district_id = a.district_id
JOIN client c ON d.district_id = c.district_id
WHERE YEAR(a.date) = 1996
ORDER BY d.A13 DESC;",0,financial,best_pred_metadata
133,134,SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id GROUP BY T1.A16 ORDER BY T1.A16 DESC LIMIT 1,"
SELECT COUNT(account_id)
FROM account
WHERE district_id = (
    SELECT district_id
    FROM crime_data
    WHERE year = 1996
    ORDER BY crime_count DESC
    LIMIT 1
)",0,financial,best_pred_metadata
134,135,SELECT COUNT(T1.account_id) FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.balance < 0 AND T1.operation = 'VYBER KARTOU' AND T2.frequency = 'POPLATEK MESICNE',"
SELECT COUNT(*)
FROM account
WHERE frequency = 'monthly'
AND account_id IN (
    SELECT account_id
    FROM trans
    WHERE type = 'withdrawal'
    AND account_id IN (
        SELECT account_id
        FROM card
    )
    AND balance < 0
);",0,financial,best_pred_metadata
135,136,SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.date BETWEEN '1995-01-01' AND '1997-12-31' AND T1.frequency = 'POPLATEK MESICNE' AND T2.amount > 250000,"
SELECT COUNT(*)
FROM loan
WHERE amount >= 250000
AND status = 'approved'
AND account_id IN (
    SELECT account_id
    FROM account
    WHERE frequency = 'monthly'
    AND date BETWEEN '1995-01-01' AND '1997-12-31'
)",0,financial,best_pred_metadata
136,137,SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T1.district_id = 1 AND (T3.status = 'C' OR T3.status = 'D'),"
SELECT COUNT(*)
FROM account
WHERE district_id = 1
AND account_id IN (
    SELECT account_id
    FROM loan
    WHERE status = 'running'
);",0,financial,best_pred_metadata
137,138,"SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A15 = (SELECT T3.A15 FROM district AS T3 ORDER BY T3.A15 DESC LIMIT 1, 1)","
SELECT COUNT(*)
FROM client
WHERE district_id = (
    SELECT district_id
    FROM district
    ORDER BY A14 DESC
    LIMIT 1 OFFSET 1
)
AND gender = 'Male';",0,financial,best_pred_metadata
138,139,SELECT COUNT(T1.card_id) FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T1.type = 'gold' AND T2.type = 'DISPONENT',"
SELECT COUNT(*)
FROM card
JOIN disp ON card.disp_id = disp.disp_id
WHERE card.type = 'high-level' AND disp.type = 'disponent';",1,financial,best_pred_metadata
139,140,SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Pisek',"
SELECT COUNT(*)
FROM account
JOIN district ON account.district_id = district.district_id
WHERE district.A2 = 'Pisek' OR district.A3 = 'Pisek';",1,financial,best_pred_metadata
140,141,"SELECT T1.district_id FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T1.account_id = T3.account_id WHERE STRFTIME('%Y', T3.date) = '1997' GROUP BY T1.district_id HAVING SUM(T3.amount) > 10000","
SELECT d.district_id, d.A2
FROM district d
JOIN account a ON d.district_id = a.district_id
JOIN trans t ON a.account_id = t.account_id
WHERE t.amount > 10000 AND strftime('%Y', t.date) = '1997';",0,financial,best_pred_metadata
141,142,SELECT DISTINCT T2.account_id FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.k_symbol = 'SIPO' AND T3.A2 = 'Pisek',"
SELECT a.account_id
FROM account a
JOIN `order` o ON a.account_id = o.account_id
JOIN district d ON a.district_id = d.district_id
WHERE o.k_symbol = 'household payment' AND d.A2 = 'Pisek';",0,financial,best_pred_metadata
142,143,"SELECT T2.account_id FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T1.type IN ('gold', 'junior')","
SELECT a.account_id
FROM account a
JOIN card c ON a.account_id = c.disp_id
JOIN disp d ON a.account_id = d.account_id
WHERE c.type = 'gold'
AND EXISTS (
    SELECT 1
    FROM card c2
    JOIN disp d2 ON c2.disp_id = d2.disp_id
    WHERE d2.account_id = a.account_id
    AND c2.type = 'junior'
)",0,financial,best_pred_metadata
143,144,"SELECT AVG(T3.amount) FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE STRFTIME('%Y', T3.date) = '2021' AND T3.operation = 'VYBER KARTOU'","
SELECT AVG(amount)
FROM trans
JOIN account ON trans.account_id = account.account_id
JOIN card ON account.account_id = card.disp_id
WHERE type = 'credit card' AND strftime('%Y', date) = '2021';",0,financial,best_pred_metadata
144,145,"SELECT T1.account_id FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T1.date) = '1998' AND T1.operation = 'VYBER KARTOU' AND T1.amount < (SELECT AVG(amount) FROM trans WHERE STRFTIME('%Y', date) = '1998')","
SELECT account.account_id
FROM account
JOIN card ON account.account_id = card.disp_id
JOIN disp ON account.account_id = disp.account_id
JOIN client ON disp.client_id = client.client_id
JOIN trans ON account.account_id = trans.account_id
WHERE trans.type = 'CREDIT_CARD' AND strftime('%Y', trans.date) = '1998'
GROUP BY account.account_id
HAVING SUM(trans.amount) / (COUNT(DISTINCT strftime('%m', trans.date)) * 1.0) < (
    SELECT AVG(spent_per_month)
    FROM (
        SELECT account_id, SUM(amount) / (COUNT(DISTINCT strftime('%m', date)) * 1.0) AS spent_per_month
        FROM trans
        WHERE type = 'CREDIT_CARD' AND strftime('%Y', date) = '1998'
        GROUP BY account_id
    )
)",0,financial,best_pred_metadata
145,146,SELECT T1.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN loan AS T3 ON T2.account_id = T3.account_id INNER JOIN card AS T4 ON T2.disp_id = T4.disp_id WHERE T1.gender = 'F',"
SELECT c.client_id, c.gender
FROM client c
JOIN disp d ON c.client_id = d.client_id
JOIN account a ON d.account_id = a.account_id
JOIN card ca ON d.disp_id = ca.disp_id
JOIN loan l ON a.account_id = l.account_id
WHERE c.gender = 'female' AND d.type = 'OWNER' AND ca.type = 'credit';",0,financial,best_pred_metadata
146,147,SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T2.A3 = 'south Bohemia',"
SELECT COUNT(*)
FROM account
JOIN client ON account.account_id = client.client_id
JOIN district ON account.district_id = district.district_id
WHERE client.gender = 'female' AND district.A2 = 'South Bohemia';",0,financial,best_pred_metadata
147,148,SELECT T2.account_id FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T2.account_id = T3.account_id WHERE T3.type = 'OWNER' AND T1.A2 = 'Tabor',"
SELECT a.account_id
FROM account a
JOIN district d ON a.district_id = d.district_id
WHERE d.A2 = 'Tabor'
AND EXISTS (
    SELECT 1
    FROM loan l
    WHERE l.account_id = a.account_id
    AND l.status = 'eligible'
);",0,financial,best_pred_metadata
148,149,SELECT T3.type FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T2.account_id = T3.account_id WHERE T3.type != 'OWNER' AND T1.A11 BETWEEN 8000 AND 9000,"
SELECT a.frequency, d.A10 AS average_income
FROM account a
JOIN district d ON a.district_id = d.district_id
LEFT JOIN loan l ON a.account_id = l.account_id
WHERE l.loan_id IS NULL
AND d.A10 > 8000 AND d.A10 <= 9000;",0,financial,best_pred_metadata
149,150,SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T3.bank = 'AB' AND T1.A3 = 'north Bohemia',"
SELECT COUNT(DISTINCT a.account_id)
FROM account a
JOIN trans t ON a.account_id = t.account_id
JOIN district d ON a.district_id = d.district_id
WHERE d.A2 = 'North Bohemia' AND t.bank = 'AB';",0,financial,best_pred_metadata
150,151,SELECT DISTINCT T1.A2 FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T3.type = 'VYDAJ',"
SELECT d.A2 AS district_name
FROM district d
JOIN account a ON d.district_id = a.district_id
JOIN trans t ON a.account_id = t.account_id
WHERE t.type = 'withdrawal'
GROUP BY d.district_id, d.A2;",0,financial,best_pred_metadata
151,152,"SELECT AVG(T1.A15) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T2.date) >= '1997' AND T1.A15 > 4000","
SELECT AVG(A5)
FROM district
JOIN account ON district.district_id = account.district_id
WHERE A4 > 4000 AND account.date >= '1997-01-01' AND account.date < '1996-01-01'",0,financial,best_pred_metadata
152,153,SELECT COUNT(T1.card_id) FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T1.type = 'classic' AND T2.type = 'Owner',"
SELECT COUNT(c.card_id)
FROM card c
JOIN disp d ON c.disp_id = d.disp_id
JOIN account a ON d.account_id = a.account_id
JOIN loan l ON a.account_id = l.account_id
WHERE c.type = 'classic' AND l.status = 'eligible';",1,financial,best_pred_metadata
153,154,SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A2 = 'Hl.m. Praha',"
SELECT COUNT(*)
FROM client
WHERE gender = 'male'
AND district_id IN (
    SELECT district_id
    FROM district
    WHERE A2 = 'Hl.m. Praha' OR A3 = 'Hl.m. Praha'
);",0,financial,best_pred_metadata
154,155,"SELECT CAST(SUM(type = 'gold') AS REAL) * 100 / COUNT(card_id) FROM card WHERE STRFTIME('%Y', issued) < '1998'","
SELECT
    (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM card WHERE type = 'Gold')) AS percentage
FROM
    card
WHERE
    type = 'Gold' AND issued < '1998-01-01';",0,financial,best_pred_metadata
155,156,SELECT T1.client_id FROM disp AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T1.type = 'OWNER' ORDER BY T2.amount DESC LIMIT 1,"
SELECT c.client_id, c.gender, c.birth_date, c.district_id
FROM client c
JOIN disp d ON c.client_id = d.client_id
JOIN account a ON d.account_id = a.account_id
JOIN loan l ON a.account_id = l.account_id
WHERE d.type = 'OWNER'
ORDER BY l.amount DESC
LIMIT 1;",0,financial,best_pred_metadata
156,157,SELECT T1.A15 FROM district AS T1 INNER JOIN `account` AS T2 ON T1.district_id = T2.district_id WHERE T2.account_id = 532,"
SELECT COUNT(*)
FROM crime
WHERE year = 1995 AND district_id = (SELECT district_id FROM account WHERE account_id = 532);",0,financial,best_pred_metadata
157,158,SELECT T3.district_id FROM `order` AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.order_id = 33333,"
SELECT district_id
FROM account
WHERE account_id = (
    SELECT account_id
    FROM `order`
    WHERE order_id = 33333
);",1,financial,best_pred_metadata
158,159,SELECT T4.trans_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN trans AS T4 ON T3.account_id = T4.account_id WHERE T1.client_id = 3356 AND T4.operation = 'VYBER',"
SELECT trans_id, date, amount, balance
FROM trans
WHERE account_id IN (
    SELECT account_id
    FROM disp
    WHERE client_id = 3356
)
AND type = 'withdrawal'
AND operation = 'cash'",0,financial,best_pred_metadata
159,160,SELECT COUNT(T1.account_id) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T2.frequency = 'POPLATEK TYDNE' AND T1.amount < 200000,"
SELECT COUNT(*)
FROM account
WHERE frequency = 'weekly'
AND account_id IN (
    SELECT account_id
    FROM loan
    WHERE amount < 200000
);",0,financial,best_pred_metadata
160,161,SELECT T3.type FROM disp AS T1 INNER JOIN client AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T1.disp_id = T3.disp_id WHERE T2.client_id = 13539,"
SELECT type
FROM card
JOIN disp ON card.disp_id = disp.disp_id
WHERE disp.client_id = 13539;",0,financial,best_pred_metadata
161,162,"SELECT T2.district_id, T1.A3 FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.client_id = 3541","
SELECT d.A2 AS region
FROM client c
JOIN district d ON c.district_id = d.district_id
WHERE c.client_id = 3541;",0,financial,best_pred_metadata
162,163,SELECT T1.district_id FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T2.account_id = T3.account_id WHERE T3.status = 'A' GROUP BY T1.district_id ORDER BY COUNT(T2.account_id) DESC LIMIT 1,"
SELECT d.district_id, COUNT(a.account_id) as num_accounts
FROM district d
JOIN account a ON d.district_id = a.district_id
JOIN loan l ON a.account_id = l.account_id
WHERE l.status = 'finished with no problems'
GROUP BY d.district_id
ORDER BY num_accounts DESC
LIMIT 1;",0,financial,best_pred_metadata
163,164,SELECT T3.client_id FROM `order` AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.district_id = T3.district_id WHERE T1.order_id = 32423,"
SELECT client.client_id
FROM client
JOIN disp ON client.client_id = disp.client_id
JOIN account ON disp.account_id = account.account_id
JOIN `order` ON account.account_id = `order`.account_id
WHERE `order`.order_id = 32423;",0,financial,best_pred_metadata
164,165,SELECT T3.trans_id FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T1.district_id = 5,"
SELECT trans.*
FROM trans
JOIN account ON trans.account_id = account.account_id
WHERE account.district_id = 5;",0,financial,best_pred_metadata
165,166,SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T1.A2 = 'Jesenik',"
SELECT COUNT(*)
FROM account
JOIN district ON account.district_id = district.district_id
WHERE district.A2 = 'Jesenik';",1,financial,best_pred_metadata
166,167,SELECT T2.client_id FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T1.type = 'junior' AND T1.issued >= '1997-01-01',"
SELECT client.client_id
FROM client
JOIN disp ON client.client_id = disp.client_id
JOIN card ON disp.disp_id = card.disp_id
WHERE card.type = 'junior' AND card.issued > '1996-12-31';",1,financial,best_pred_metadata
167,168,SELECT CAST(SUM(T2.gender = 'F') AS REAL) * 100 / COUNT(T2.client_id) FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T1.A11 > 10000,"
SELECT
    (COUNT(DISTINCT client.client_id) * 100.0 /
    (SELECT COUNT(DISTINCT client.client_id)
     FROM client
     JOIN account ON client.client_id = account.account_id
     JOIN district ON account.district_id = district.district_id
     WHERE district.A10 > 10000)) AS percentage_of_women
FROM
    client
JOIN
    account ON client.client_id = account.account_id
JOIN
    district ON account.district_id = district.district_id
WHERE
    client.gender = 'WOMAN'
    AND district.A10 > 10000;",0,financial,best_pred_metadata
168,169,"SELECT CAST((SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1997' THEN T1.amount ELSE 0 END) - SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1996' THEN T1.amount ELSE 0 END)) AS REAL) * 100 / SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1996' THEN T1.amount ELSE 0 END) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T3 ON T3.account_id = T2.account_id INNER JOIN client AS T4 ON T4.client_id = T3.client_id WHERE T4.gender = 'M' AND T3.type = 'OWNER'","
SELECT
    ((SUM(loan.amount) FILTER (WHERE EXTRACT(YEAR FROM loan.date) = 1997) -
    SUM(loan.amount) FILTER (WHERE EXTRACT(YEAR FROM loan.date) = 1996)) /
    NULLIF(SUM(loan.amount) FILTER (WHERE EXTRACT(YEAR FROM loan.date) = 1996), 0)) * 100 AS growth_rate
FROM
    loan
JOIN
    account ON loan.account_id = account.account_id
JOIN
    client ON account.district_id = client.district_id
WHERE
    client.gender = 'Male';",0,financial,best_pred_metadata
169,170,"SELECT COUNT(account_id) FROM trans WHERE STRFTIME('%Y', date) > '1995' AND operation = 'VYBER KARTOU'","
SELECT COUNT(*)
FROM trans
WHERE type = 'WITHDRAWAL'
AND date > '1995-12-31'
AND account_id IN (SELECT account_id FROM card WHERE type = 'CREDIT');",0,financial,best_pred_metadata
170,171,"SELECT SUM(IIF(A3 = 'East Bohemia', A16, 0)) - SUM(IIF(A3 = 'North Bohemia', A16, 0)) FROM district","
SELECT A4 FROM district WHERE A2 = 'East Bohemia' AND A3 = '1996'
MINUS
SELECT A4 FROM district WHERE A2 = 'North Bohemia' AND A3 = '1996';",0,financial,best_pred_metadata
171,172,"SELECT SUM(type = 'Owner') , SUM(type = 'Disponent') FROM disp WHERE account_id BETWEEN 1 AND 10","
SELECT COUNT(*)
FROM disp
WHERE account_id BETWEEN 1 AND 10
AND type IN ('OWNER', 'DISPONENT');",0,financial,best_pred_metadata
172,174,"SELECT STRFTIME('%Y', T1.birth_date) FROM client AS T1 INNER JOIN disp AS T3 ON T1.client_id = T3.client_id INNER JOIN account AS T2 ON T3.account_id = T2.account_id WHERE T2.account_id = 130","
SELECT EXTRACT(YEAR FROM birth_date) AS birth_year
FROM client
JOIN disp ON client.client_id = disp.client_id
JOIN account ON disp.account_id = account.account_id
WHERE account.account_id = 130 AND disp.type = 'OWNER';",0,financial,best_pred_metadata
173,175,SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T2.type = 'OWNER' AND T1.frequency = 'POPLATEK PO OBRATU',"
SELECT COUNT(*)
FROM account
WHERE account_id IN (
    SELECT account_id
    FROM disp
    WHERE type = 'OWNER'
) AND frequency = 'TRANSACTION';",0,financial,best_pred_metadata
174,176,"SELECT T3.amount, T3.status FROM client AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T2.account_id = T3.account_id WHERE T1.client_id = 992","
SELECT SUM(loan.amount) AS total_debt, loan.status, loan.payments
FROM loan
JOIN account ON loan.account_id = account.account_id
JOIN disp ON account.account_id = disp.account_id
JOIN client ON disp.client_id = client.client_id
WHERE client.client_id = 992;",0,financial,best_pred_metadata
175,177,"SELECT T3.balance, T1.gender FROM client AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T1.client_id = 4 AND T3.trans_id = 851","
SELECT SUM(amount) AS total_amount, client.gender
FROM trans
JOIN account ON trans.account_id = account.account_id
JOIN disp ON account.account_id = disp.account_id
JOIN client ON disp.client_id = client.client_id
WHERE trans.trans_id > 851 AND client.client_id = 4;",0,financial,best_pred_metadata
176,178,SELECT T3.type FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T1.client_id = 9,"
SELECT type
FROM card
JOIN disp ON card.disp_id = disp.disp_id
WHERE disp.client_id = 9;",0,financial,best_pred_metadata
177,179,"SELECT SUM(T3.amount) FROM client AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE STRFTIME('%Y', T3.date)= '1998' AND T1.client_id = 617","
SELECT SUM(amount) AS total_paid
FROM trans
WHERE account_id IN (
    SELECT account_id
    FROM account
    WHERE district_id IN (
        SELECT district_id
        FROM client
        WHERE client_id = 617
    )
)
AND date BETWEEN '1998-01-01' AND '1998-12-31';",1,financial,best_pred_metadata
178,180,"SELECT T1.client_id, T3.account_id FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN account AS T3 ON T2.district_id = T3.district_id WHERE T2.A3 = 'east Bohemia' AND STRFTIME('%Y', T1.birth_date) BETWEEN '1983' AND '1987'","
SELECT client.client_id, client.birth_date
FROM client
JOIN account ON client.client_id = account.account_id
JOIN district ON account.district_id = district.district_id
WHERE client.birth_date BETWEEN '1983-01-01' AND '1987-12-31'
AND district.A2 = 'East Bohemia';",0,financial,best_pred_metadata
179,181,SELECT T1.client_id FROM client AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T2.account_id = T3.account_id WHERE T1.gender = 'F' ORDER BY T3.amount DESC LIMIT 3,"
SELECT client_id
FROM client
WHERE gender = 'female'
ORDER BY (
    SELECT SUM(amount)
    FROM loan
    WHERE loan.account_id = account.account_id
) DESC
LIMIT 3;",0,financial,best_pred_metadata
180,182,"SELECT COUNT(T1.account_id) FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.district_id = T3.district_id WHERE STRFTIME('%Y', T3.birth_date) BETWEEN '1974' AND '1976' AND T3.gender = 'M' AND T1.amount > 4000 AND T1.k_symbol = 'SIPO'","
SELECT COUNT(DISTINCT c.client_id)
FROM client c
JOIN disp d ON c.client_id = d.client_id
JOIN account a ON d.account_id = a.account_id
JOIN trans t ON a.account_id = t.account_id
WHERE c.gender = 'MALE'
AND c.birth_date BETWEEN '1974-01-01' AND '1976-12-31'
AND t.type = 'PAYMENT'
AND t.operation = 'HOME'
AND t.amount > 4000;",0,financial,best_pred_metadata
181,183,"SELECT COUNT(account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T1.date) > '1996' AND T2.A2 = 'Beroun'","
SELECT COUNT(*)
FROM account
WHERE district_id = (SELECT district_id FROM district WHERE A2 = 'Beroun')
AND date > '1996-12-31';",1,financial,best_pred_metadata
182,184,SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T1.gender = 'F' AND T3.type = 'junior',"
SELECT COUNT(*)
FROM client
JOIN disp ON client.client_id = disp.client_id
JOIN account ON disp.account_id = account.account_id
JOIN card ON disp.disp_id = card.disp_id
WHERE client.gender = 'female' AND card.type = 'junior'",0,financial,best_pred_metadata
183,186,SELECT CAST(SUM(T1.gender = 'M') AS REAL) * 100 / COUNT(T1.client_id) FROM client AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T2.frequency = 'POPLATEK TYDNE',"
SELECT
    (COUNT(c.client_id) * 100.0 / (SELECT COUNT(client_id) FROM client WHERE gender = 'Male')) AS percentage
FROM
    client c
JOIN
    account a ON c.client_id = a.district_id
WHERE
    c.gender = 'Male' AND a.frequency = 'Weekly'",0,financial,best_pred_metadata
184,187,SELECT COUNT(T2.account_id) FROM account AS T1 INNER JOIN disp AS T2 ON T2.account_id = T1.account_id WHERE T1.frequency = 'POPLATEK TYDNE' AND T2.type = 'USER',"
SELECT COUNT(*)
FROM client
WHERE client_id IN (
    SELECT client_id
    FROM disp
    WHERE account_id IN (
        SELECT account_id
        FROM account
        WHERE frequency = 'weekly'
    )
    AND type = 'User'
)",1,financial,best_pred_metadata
185,188,"SELECT T1.account_id FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.duration > 24 AND STRFTIME('%Y', T2.date) < '1997' ORDER BY T1.amount ASC LIMIT 1","
SELECT account_id, MIN(amount) AS lowest_approved_amount
FROM loan
WHERE duration > 24
AND account_id IN (
    SELECT account_id
    FROM account
    WHERE date < '1997-01-01'
)
GROUP BY account_id
ORDER BY lowest_approved_amount ASC
LIMIT 1;",0,financial,best_pred_metadata
186,189,"SELECT T3.account_id FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN account AS T3 ON T2.district_id = T3.district_id WHERE T1.gender = 'F' ORDER BY T1.birth_date ASC, T2.A11 ASC LIMIT 1","
SELECT a.account_id
FROM account a
JOIN client c ON a.district_id = c.district_id
JOIN district d ON a.district_id = d.district_id
WHERE c.gender = 'female'
ORDER BY c.birth_date ASC, d.A10 ASC
LIMIT 1;",0,financial,best_pred_metadata
187,190,"SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T1.birth_date) = '1920' AND T2.A3 = 'east Bohemia'","
SELECT COUNT(*)
FROM client
WHERE birth_date BETWEEN '1920-01-01' AND '1920-12-31'
AND district_id IN (
    SELECT district_id
    FROM district
    WHERE A2 = 'east Bohemia'
)",0,financial,best_pred_metadata
188,191,SELECT COUNT(T2.account_id) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.duration = 24 AND T1.frequency = 'POPLATEK TYDNE',"
SELECT COUNT(*)
FROM loan
JOIN account ON loan.account_id = account.account_id
WHERE loan.duration = 24 AND account.frequency = 'weekly';",0,financial,best_pred_metadata
189,192,"SELECT AVG(T2.payments) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.status IN ('C', 'D') AND T1.frequency = 'POPLATEK PO OBRATU'","
SELECT AVG(loan.amount)
FROM loan
JOIN account ON loan.account_id = account.account_id
WHERE loan.status = 'running' AND account.frequency = 'after each transaction'",0,financial,best_pred_metadata
190,193,"SELECT T3.client_id, T2.district_id, T2.A2 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T1.account_id = T3.account_id WHERE T3.type = 'OWNER'","
SELECT client.client_id, district.district_id
FROM client
JOIN account ON client.client_id = disp.client_id
JOIN disp ON account.account_id = disp.account_id
WHERE disp.type = 'OWNER'
AND NOT EXISTS (
    SELECT 1
    FROM `order`
    WHERE `order`.account_id = account.account_id
    AND `order`.k_symbol != 'PERMANENT'
)
AND NOT EXISTS (
    SELECT 1
    FROM loan
    WHERE loan.account_id = account.account_id
);",0,financial,best_pred_metadata
191,194,"SELECT T1.client_id, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T3.birth_date) FROM disp AS T1 INNER JOIN card AS T2 ON T2.disp_id = T1.disp_id INNER JOIN client AS T3 ON T1.client_id = T3.client_id WHERE T2.type = 'gold' AND T1.type = 'OWNER'","
SELECT client.client_id,
       (strftime('%Y', 'now') - strftime('%Y', client.birth_date)) AS age
FROM client
JOIN disp ON client.client_id = disp.client_id
JOIN account ON disp.account_id = account.account_id
JOIN card ON disp.disp_id = card.disp_id
JOIN loan ON account.account_id = loan.account_id
WHERE card.type = 'high level'
AND loan.status = 'eligible'",0,financial,best_pred_metadata
192,195,"SELECT T.bond_type FROM ( SELECT bond_type, COUNT(bond_id) FROM bond GROUP BY bond_type ORDER BY COUNT(bond_id) DESC LIMIT 1 ) AS T","
SELECT bond_type, COUNT(*) as count
FROM bond
GROUP BY bond_type
ORDER BY count DESC
LIMIT 1;",0,toxicology,best_pred_metadata
193,196,SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.element = 'cl' AND T1.label = '-',"
SELECT COUNT(DISTINCT a.molecule_id)
FROM atom a
JOIN molecule m ON a.molecule_id = m.molecule_id
WHERE a.element = 'chlorine'
AND m.label <> 'carcinogenic'",0,toxicology,best_pred_metadata
194,197,"SELECT AVG(oxygen_count) FROM (SELECT T1.molecule_id, COUNT(T1.element) AS oxygen_count FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id  WHERE T2.bond_type = '-' AND T1.element = 'o'  GROUP BY T1.molecule_id) AS oxygen_counts","
SELECT AVG(oxygen_count)
FROM (
  SELECT COUNT(*) AS oxygen_count
  FROM atom
  WHERE element = 'O'
  AND atom_id IN (
    SELECT atom_id
    FROM connected
    WHERE bond_id IN (
      SELECT bond_id
      FROM bond
      WHERE bond_type = 'single'
    )
  )
  GROUP BY molecule_id
) AS subquery;",0,toxicology,best_pred_metadata
195,198,"SELECT AVG(single_bond_count) FROM (SELECT T3.molecule_id, COUNT(T1.bond_type) AS single_bond_count FROM bond AS T1  INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN molecule AS T3 ON T3.molecule_id = T2.molecule_id WHERE T1.bond_type = '-' AND T3.label = '+' GROUP BY T3.molecule_id) AS subquery","
SELECT COUNT(*) / COUNT(DISTINCT molecule_id) AS average_carcinogenic_single_bonded_molecules
FROM molecule
JOIN atom ON molecule.molecule_id = atom.molecule_id
JOIN connected ON atom.atom_id = connected.atom_id
JOIN bond ON connected.bond_id = bond.bond_id
WHERE bond.bond_type = 'single' AND molecule.label = 'carcinogenic'",0,toxicology,best_pred_metadata
196,199,SELECT COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'na' AND T2.label = '-',"
SELECT COUNT(*)
FROM atom
WHERE element = 'Sodium'
AND molecule_id NOT IN (
    SELECT molecule_id
    FROM atom
    WHERE element IN (
        'Cyclopentadiene', 'Benzene', 'Formaldehyde', 'Acrylamide', 'Acetaldehyde', 'Acrolein', 'Benzopyrene', 'Nitrosamine'
    )
)

This query first identifies the molecules containing sodium atoms. Then, it excludes the molecules containing carcinogenic elements from the count of sodium atoms. The final result is the count of non-carcinogenic sodium atoms.",0,toxicology,best_pred_metadata
197,200,SELECT DISTINCT T2.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#' AND T2.label = '+',"
SELECT m.molecule_id, m.label
FROM molecule m
JOIN bond b ON m.molecule_id = b.molecule_id
WHERE b.bond_type = 'triple'
AND m.label = 'carcinogenic';",0,toxicology,best_pred_metadata
198,201,SELECT CAST(COUNT(DISTINCT CASE WHEN T1.element = 'c' THEN T1.atom_id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T1.atom_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '=',"
SELECT
    (COUNT(a.atom_id) * 100.0 / (SELECT COUNT(*) FROM atom WHERE element = 'C')) AS percentage_carbon_in_double_bond_molecules
FROM
    atom a
JOIN
    bond b ON a.molecule_id = b.molecule_id
WHERE
    a.element = 'C' AND b.bond_type = 'double'",0,toxicology,best_pred_metadata
199,202,SELECT COUNT(T.bond_id) FROM bond AS T WHERE T.bond_type = '#',"
SELECT COUNT(*)
FROM bond
WHERE bond_type = 'triple';",0,toxicology,best_pred_metadata
200,203,SELECT COUNT(DISTINCT T.atom_id) FROM atom AS T WHERE T.element <> 'br',"
SELECT COUNT(*)
FROM atom
WHERE element <> 'bromine';",0,toxicology,best_pred_metadata
201,204,SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE molecule_id BETWEEN 'TR000' AND 'TR099' AND T.label = '+',"
SELECT COUNT(*)
FROM molecule
WHERE label = 'carcinogenic'
ORDER BY molecule_id
LIMIT 100;",0,toxicology,best_pred_metadata
202,205,SELECT T.atom_id FROM atom AS T WHERE T.element = 'si',"
SELECT molecule_id
FROM atom
WHERE element = 'silicon';",0,toxicology,best_pred_metadata
203,206,SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR004_8_9',"
SELECT a.element
FROM atom a
JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2
WHERE c.bond_id = 'TR004_8_9';",0,toxicology,best_pred_metadata
204,207,SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN connected AS T3 ON T1.atom_id = T3.atom_id WHERE T2.bond_type = '=',"
SELECT a1.element, a2.element
FROM connected
JOIN atom a1 ON connected.atom_id = a1.atom_id
JOIN atom a2 ON connected.atom_id2 = a2.atom_id
JOIN bond ON connected.bond_id = bond.bond_id
WHERE bond.bond_type = 'double';",0,toxicology,best_pred_metadata
205,208,"SELECT T.label FROM ( SELECT T2.label, COUNT(T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'h' GROUP BY T2.label ORDER BY COUNT(T2.molecule_id) DESC LIMIT 1 ) t","
SELECT m.label, COUNT(*) as atom_count
FROM atom a
JOIN molecule m ON a.molecule_id = m.molecule_id
WHERE a.element = 'hydrogen'
GROUP BY m.label
ORDER BY atom_count DESC
LIMIT 1;",0,toxicology,best_pred_metadata
206,209,SELECT DISTINCT T1.bond_type FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id = T3.atom_id WHERE T3.element = 'te',"
SELECT bond_type
FROM bond
JOIN atom ON bond.molecule_id = atom.molecule_id
WHERE atom.element = 'Tellurium';",0,toxicology,best_pred_metadata
207,210,"SELECT T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_type = '-'","
SELECT a1.atom_id, a2.atom_id
FROM connected
JOIN bond ON connected.bond_id = bond.bond_id
WHERE bond.bond_type = 'single'
JOIN atom a1 ON connected.atom_id = a1.atom_id
JOIN atom a2 ON connected.atom_id2 = a2.atom_id;",0,toxicology,best_pred_metadata
208,211,SELECT DISTINCT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN connected AS T3 ON T1.atom_id = T3.atom_id WHERE T2.label = '-',"
SELECT a.atom_id, a2.atom_id
FROM connected c
JOIN atom a ON c.atom_id = a.atom_id
JOIN atom a2 ON c.atom_id2 = a2.atom_id
JOIN molecule m ON a.molecule_id = m.molecule_id
WHERE m.label <> 'carcinogenic'",0,toxicology,best_pred_metadata
209,212,"SELECT T.element FROM ( SELECT T1.element, COUNT(DISTINCT T1.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '-' GROUP BY T1.element ORDER BY COUNT(DISTINCT T1.molecule_id) ASC LIMIT 4 ) t","
SELECT a.element, COUNT(*) as atom_count
FROM atom a
JOIN molecule m ON a.molecule_id = m.molecule_id
WHERE m.label != 'carcinogenic'
GROUP BY a.element
ORDER BY atom_count ASC
LIMIT 1;",0,toxicology,best_pred_metadata
210,213,SELECT T1.bond_type FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.atom_id = 'TR004_8' AND T2.atom_id2 = 'TR004_20' OR T2.atom_id2 = 'TR004_8' AND T2.atom_id = 'TR004_20',"
SELECT bond.bond_type
FROM bond
JOIN connected ON bond.bond_id = connected.bond_id
WHERE connected.atom_id = 'TR004_8' AND connected.atom_id2 = 'TR004_20'
OR connected.atom_id = 'TR004_20' AND connected.atom_id2 = 'TR004_8';",1,toxicology,best_pred_metadata
211,214,SELECT DISTINCT T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element != 'sn',"
SELECT DISTINCT m.label
FROM molecule m
WHERE NOT EXISTS (
    SELECT 1
    FROM atom a
    WHERE a.molecule_id = m.molecule_id
    AND a.element = 'tin'
);",1,toxicology,best_pred_metadata
212,215,"SELECT COUNT(DISTINCT CASE WHEN T1.element = 'i' THEN T1.atom_id ELSE NULL END) AS iodine_nums , COUNT(DISTINCT CASE WHEN T1.element = 's' THEN T1.atom_id ELSE NULL END) AS sulfur_nums FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '-'","
SELECT COUNT(*)
FROM atom
WHERE element IN ('iodine', 'sulfur')
AND molecule_id IN (
    SELECT molecule_id
    FROM bond
    WHERE bond_type = 'single'
)",0,toxicology,best_pred_metadata
213,216,"SELECT T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_type = '#'","
SELECT a1.atom_id, a2.atom_id
FROM connected c
JOIN bond b ON c.bond_id = b.bond_id
JOIN atom a1 ON c.atom_id = a1.atom_id
JOIN atom a2 ON c.atom_id2 = a2.atom_id
WHERE b.bond_type = 'triple bond';",0,toxicology,best_pred_metadata
214,217,"SELECT T2.atom_id, T2.atom_id2 FROM atom AS T1 INNER JOIN connected AS T2 ON T2.atom_id = T1.atom_id WHERE T1.molecule_id = 'TR181'","
SELECT a.*
FROM atom a
JOIN connected c ON a.atom_id = c.atom_id2
WHERE c.atom_id IN (
    SELECT atom_id
    FROM atom
    WHERE molecule_id = 'TR181'
)

UNION

SELECT a.*
FROM atom a
JOIN connected c ON a.atom_id = c.atom_id
WHERE c.atom_id2 IN (
    SELECT atom_id
    FROM atom
    WHERE molecule_id = 'TR181'
)",0,toxicology,best_pred_metadata
215,218,SELECT CAST(COUNT(DISTINCT CASE WHEN T1.element <> 'f' THEN T2.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+',"
SELECT
    (COUNT(DISTINCT m.molecule_id) * 100.0 / (SELECT COUNT(DISTINCT molecule_id) FROM molecule WHERE label = 'carcinogenic')) AS percentage
FROM
    molecule m
LEFT JOIN
    atom a ON m.molecule_id = a.molecule_id
WHERE
    m.label = 'carcinogenic'
    AND a.element <> 'fluorine'
    OR a.element IS NULL;",0,toxicology,best_pred_metadata
216,219,SELECT CAST(COUNT(DISTINCT CASE WHEN T2.label = '+' THEN T2.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '#',"
SELECT
    (COUNT(DISTINCT b.molecule_id) * 100.0 / (SELECT COUNT(DISTINCT molecule_id) FROM bond)) AS percentage_carcinogenic_molecules
FROM
    bond b
JOIN
    connected c ON b.bond_id = c.bond_id
JOIN
    atom a ON c.atom_id = a.atom_id
WHERE
    b.bond_type = 'triple' AND a.element IN ('C', 'N', 'O')

This query calculates the percentage of carcinogenic molecules in triple type bonds. It assumes that carcinogenic molecules contain carbon ('C'), nitrogen ('N'), or oxygen ('O') atoms. The query first counts the number of distinct molecule_ids with triple type bonds that contain carcinogenic elements, then divides that by the total number of distinct molecule_ids in the bond table. The result is multiplied by 100 to get the percentage.",0,toxicology,best_pred_metadata
217,220,SELECT DISTINCT T.element FROM atom AS T WHERE T.molecule_id = 'TR000' ORDER BY T.element LIMIT 3,"
SELECT element
FROM atom
WHERE molecule_id = 'TR000'
ORDER BY element ASC
LIMIT 3;",0,toxicology,best_pred_metadata
218,221,"SELECT SUBSTR(T.bond_id, 1, 7) AS atom_id1 , T.molecule_id || SUBSTR(T.bond_id, 8, 2) AS atom_id2 FROM bond AS T WHERE T.molecule_id = 'TR001' AND T.bond_id = 'TR001_2_6'","
SELECT atom_id, atom_id2
FROM connected
WHERE bond_id = 'TR001_2_6'
AND atom_id IN (SELECT atom_id FROM atom WHERE molecule_id = 'TR001')
AND atom_id2 IN (SELECT atom_id FROM atom WHERE molecule_id = 'TR001');",0,toxicology,best_pred_metadata
219,222,SELECT COUNT(CASE WHEN T.label = '+' THEN T.molecule_id ELSE NULL END) - COUNT(CASE WHEN T.label = '-' THEN T.molecule_id ELSE NULL END) AS diff_car_notcar FROM molecule t,"
SELECT COUNT(*) AS carcinogenic_molecules
FROM molecule
WHERE label = 'carcinogenic'

SELECT COUNT(*) AS non_carcinogenic_molecules
FROM molecule
WHERE label <> 'carcinogenic'

SELECT (carcinogenic_molecules - non_carcinogenic_molecules) AS difference
FROM (
  SELECT COUNT(*) AS carcinogenic_molecules
  FROM molecule
  WHERE label = 'carcinogenic'
) AS carcinogenic,
(
  SELECT COUNT(*) AS non_carcinogenic_molecules
  FROM molecule
  WHERE label <> 'carcinogenic'
) AS non_carcinogenic;",0,toxicology,best_pred_metadata
220,223,SELECT T.atom_id FROM connected AS T WHERE T.bond_id = 'TR000_2_5',"
SELECT atom_id, atom_id2
FROM connected
WHERE bond_id = 'TR_000_2_5';",0,toxicology,best_pred_metadata
221,224,SELECT T.bond_id FROM connected AS T WHERE T.atom_id2 = 'TR000_2',"
SELECT bond_id
FROM connected
WHERE atom_id2 = 'TR000_2';",1,toxicology,best_pred_metadata
222,225,SELECT DISTINCT T.molecule_id FROM bond AS T WHERE T.bond_type = '=' ORDER BY T.molecule_id LIMIT 5,"
SELECT molecule.label
FROM molecule
JOIN bond ON molecule.molecule_id = bond.molecule_id
WHERE bond.bond_type = 'double'
GROUP BY molecule.label
ORDER BY molecule.label ASC
LIMIT 5;",0,toxicology,best_pred_metadata
223,226,SELECT CAST(COUNT(CASE WHEN T.bond_type = '=' THEN T.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T.bond_id) FROM bond AS T WHERE T.molecule_id = 'TR008',"
SELECT
    (COUNT(b.bond_id) * 100.0 / (SELECT COUNT(*) FROM bond WHERE molecule_id = 'TR008')) AS percentage_double_bonds
FROM
    bond b
WHERE
    b.molecule_id = 'TR008' AND b.bond_type = 'double';",0,toxicology,best_pred_metadata
224,227,SELECT CAST(COUNT(CASE WHEN T.label = '+' THEN T.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(T.molecule_id) FROM molecule t,"
SELECT COUNT(DISTINCT molecule.molecule_id) * 100.0 / (SELECT COUNT(*) FROM molecule) AS carcinogenic_percentage
FROM molecule
WHERE molecule.label = 'carcinogenic';",0,toxicology,best_pred_metadata
225,228,SELECT CAST(COUNT(CASE WHEN T.element = 'h' THEN T.atom_id ELSE NULL END) AS REAL) * 100 / COUNT(T.atom_id) FROM atom AS T WHERE T.molecule_id = 'TR206',"
SELECT
    (COUNT(a.atom_id) * 100.0 / (SELECT COUNT(*) FROM atom WHERE molecule_id = 'TR206')) AS percentage_hydrogen
FROM
    atom a
JOIN
    connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2
JOIN
    bond b ON c.bond_id = b.bond_id
WHERE
    a.molecule_id = 'TR206' AND a.element = 'H'

This query calculates the percentage of hydrogen atoms in the molecule TR206 by counting the number of hydrogen atoms and dividing it by the total number of atoms in the molecule, then multiplying by 100 to get the percentage.",0,toxicology,best_pred_metadata
226,229,SELECT DISTINCT T.bond_type FROM bond AS T WHERE T.molecule_id = 'TR000',"
SELECT bond.bond_type
FROM bond
JOIN atom ON bond.molecule_id = atom.molecule_id
WHERE atom.molecule_id = 'TR000';",0,toxicology,best_pred_metadata
227,230,"SELECT DISTINCT T1.element, T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR060'","
SELECT a.element, m.label
FROM atom a
JOIN molecule m ON a.molecule_id = m.molecule_id
WHERE m.molecule_id = 'TR060';",0,toxicology,best_pred_metadata
228,231,"SELECT T.bond_type FROM ( SELECT T1.bond_type, COUNT(T1.molecule_id) FROM bond AS T1  WHERE T1.molecule_id = 'TR018' GROUP BY T1.bond_type ORDER BY COUNT(T1.molecule_id) DESC LIMIT 1 ) AS T","
SELECT bond_type, COUNT(*) as bond_count
FROM bond
WHERE molecule_id = 'TR018'
GROUP BY bond_type
ORDER BY bond_count DESC
LIMIT 1;

-- To determine if the molecule is carcinogenic, we would need additional information about the bond types and their carcinogenic properties, which is not provided in the given tables.",0,toxicology,best_pred_metadata
229,232,SELECT DISTINCT T2.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '-' AND T2.label = '-' ORDER BY T2.molecule_id LIMIT 3,"
SELECT m.label
FROM molecule m
JOIN bond b ON m.molecule_id = b.molecule_id
JOIN connected c ON b.bond_id = c.bond_id
WHERE b.bond_type = 'single'
AND m.label NOT LIKE '%carcinogenic%'
GROUP BY m.label
ORDER BY m.label ASC
LIMIT 3;",0,toxicology,best_pred_metadata
230,233,SELECT DISTINCT T2.bond_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.molecule_id = 'TR006' ORDER BY T2.bond_id LIMIT 2,"
SELECT bond_id
FROM bond
WHERE molecule_id = 'TR006'
ORDER BY bond_id ASC
LIMIT 2;",1,toxicology,best_pred_metadata
231,234,SELECT COUNT(T2.bond_id) FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.molecule_id = 'TR009' AND T2.atom_id = T1.molecule_id || '_1' AND T2.atom_id2 = T1.molecule_id || '_2',"
SELECT COUNT(*)
FROM bond
WHERE molecule_id = 'TR009'
AND bond_id IN (
    SELECT bond_id
    FROM connected
    WHERE atom_id = 12 OR atom_id2 = 12
);",0,toxicology,best_pred_metadata
232,235,SELECT COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND T1.element = 'br',"
SELECT COUNT(DISTINCT m.molecule_id)
FROM molecule m
JOIN atom a ON m.molecule_id = a.molecule_id
WHERE a.element = 'bromine'
AND m.label = 'carcinogenic';",0,toxicology,best_pred_metadata
233,236,"SELECT T1.bond_type, T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.bond_id = 'TR001_6_9'","
SELECT bond.bond_type, atom1.atom_id, atom2.atom_id
FROM bond
JOIN connected ON bond.bond_id = connected.bond_id
JOIN atom AS atom1 ON connected.atom_id = atom1.atom_id
JOIN atom AS atom2 ON connected.atom_id2 = atom2.atom_id
WHERE bond.bond_id = 'TR001_6_9';",1,toxicology,best_pred_metadata
234,237,"SELECT T2.molecule_id , IIF(T2.label = '+', 'YES', 'NO') AS flag_carcinogenic FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR001_10'","
SELECT m.molecule_id, m.label
FROM molecule m
JOIN atom a ON m.molecule_id = a.molecule_id
WHERE a.atom_id = 'TR001_10';

-- To determine if the molecule is carcinogenic, we would need additional information about carcinogenicity in the database schema. If such information exists, we can modify the query to include that information. However, based on the provided schema, we cannot determine carcinogenicity from the given information.",0,toxicology,best_pred_metadata
235,238,SELECT COUNT(DISTINCT T.molecule_id) FROM bond AS T WHERE T.bond_type = '#',"
SELECT COUNT(DISTINCT m.molecule_id)
FROM molecule m
JOIN bond b ON m.molecule_id = b.molecule_id
WHERE b.bond_type = 'triple';",0,toxicology,best_pred_metadata
236,239,"SELECT COUNT(T.bond_id) FROM connected AS T WHERE SUBSTR(T.atom_id, -2) = '19'","
SELECT COUNT(*)
FROM connected
WHERE atom_id = 19 OR atom_id2 = 19;",0,toxicology,best_pred_metadata
237,240,SELECT DISTINCT T.element FROM atom AS T WHERE T.molecule_id = 'TR004',"
SELECT a.element
FROM atom a
JOIN molecule m ON a.molecule_id = m.molecule_id
WHERE m.label = 'TR004'",0,toxicology,best_pred_metadata
238,241,SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE T.label = '-',"
SELECT COUNT(*)
FROM molecule
WHERE label <> 'carcinogenic';",0,toxicology,best_pred_metadata
239,242,"SELECT DISTINCT T2.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE SUBSTR(T1.atom_id, -2) BETWEEN '21' AND '25' AND T2.label = '+'","
SELECT m.molecule_id, m.label
FROM molecule m
JOIN atom a ON m.molecule_id = a.molecule_id
WHERE a.atom_id BETWEEN 21 AND 25
AND m.label = 'carcinogenic';",0,toxicology,best_pred_metadata
240,243,SELECT T2.bond_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id IN ( SELECT T3.bond_id FROM connected AS T3 INNER JOIN atom AS T4 ON T3.atom_id = T4.atom_id WHERE T4.element = 'p' ) AND T1.element = 'n',"
SELECT bond.bond_id, bond.bond_type
FROM bond
JOIN connected ON bond.bond_id = connected.bond_id
JOIN atom ON connected.atom_id = atom.atom_id
WHERE atom.element = 'phosphorus'
JOIN atom AS atom2 ON connected.atom_id2 = atom2.atom_id
WHERE atom2.element = 'nitrogen';",0,toxicology,best_pred_metadata
241,245,SELECT CAST(COUNT(T2.bond_id) AS REAL) / COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.element = 'i',"
SELECT AVG(bond_count)
FROM (
  SELECT COUNT(bond_id) AS bond_count
  FROM atom
  JOIN connected ON atom.atom_id = connected.atom_id OR atom.atom_id = connected.atom_id2
  WHERE atom.element = 'iodine'
  GROUP BY atom.atom_id
) AS subquery;",0,toxicology,best_pred_metadata
242,246,"SELECT T1.bond_type, T1.bond_id FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE SUBSTR(T2.atom_id, 7, 2) = '45'","
SELECT bond.bond_type, bond.bond_id
FROM bond
JOIN connected ON bond.bond_id = connected.bond_id
WHERE connected.atom_id = 45 OR connected.atom_id2 = 45;",0,toxicology,best_pred_metadata
243,247,SELECT DISTINCT T.element FROM atom AS T WHERE T.element NOT IN ( SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id ),"
SELECT a.element
FROM atom a
LEFT JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2
WHERE c.atom_id IS NULL AND c.atom_id2 IS NULL;",0,toxicology,best_pred_metadata
244,248,"SELECT T2.atom_id, T2.atom_id2 FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '#' AND T3.molecule_id = 'TR447'","
SELECT a.atom_id
FROM atom a
JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2
JOIN bond b ON c.bond_id = b.bond_id
WHERE b.bond_type = 'triple' AND b.molecule_id = 'TR447';",0,toxicology,best_pred_metadata
245,249,SELECT T2.element FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T1.bond_id = 'TR144_8_19',"
SELECT a.element
FROM atom a
JOIN molecule m ON a.molecule_id = m.molecule_id
WHERE m.label = 'TR144_8_19';",0,toxicology,best_pred_metadata
246,250,"SELECT T.molecule_id FROM ( SELECT T3.molecule_id, COUNT(T1.bond_type) FROM bond AS T1 INNER JOIN molecule AS T3 ON T1.molecule_id = T3.molecule_id WHERE T3.label = '+' AND T1.bond_type = '=' GROUP BY T3.molecule_id ORDER BY COUNT(T1.bond_type) DESC LIMIT 1 ) AS T","
SELECT molecule_id
FROM molecule
WHERE label = 'carcinogenic'
GROUP BY molecule_id
HAVING COUNT(DISTINCT b.bond_id) = (
    SELECT COUNT(DISTINCT b.bond_id)
    FROM molecule m
    JOIN bond b ON m.molecule_id = b.molecule_id
    WHERE m.label = 'carcinogenic' AND b.bond_type = 'double'
    GROUP BY m.molecule_id
    ORDER BY COUNT(DISTINCT b.bond_id) DESC
    LIMIT 1
)
AND molecule_id IN (
    SELECT b.molecule_id
    FROM bond b
    WHERE b.bond_type = 'double'
);",0,toxicology,best_pred_metadata
247,251,"SELECT T.element FROM ( SELECT T2.element, COUNT(DISTINCT T2.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+' GROUP BY T2.element ORDER BY COUNT(DISTINCT T2.molecule_id) LIMIT 1 ) t","
SELECT a.element
FROM atom a
JOIN molecule m ON a.molecule_id = m.molecule_id
WHERE m.label = 'carcinogenic'
GROUP BY a.element
ORDER BY COUNT(*) ASC
LIMIT 1;",0,toxicology,best_pred_metadata
248,252,"SELECT T2.atom_id, T2.atom_id2 FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.element = 'pb'","
SELECT a2.atom_id, a2.element
FROM atom a1
JOIN connected c ON a1.atom_id = c.atom_id
JOIN atom a2 ON c.atom_id2 = a2.atom_id
WHERE a1.element = 'lead';",0,toxicology,best_pred_metadata
249,253,SELECT DISTINCT T3.element FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id = T3.atom_id WHERE T1.bond_type = '#',"
SELECT a1.element, a2.element, a3.element
FROM connected c1
JOIN connected c2 ON c1.atom_id2 = c2.atom_id
JOIN connected c3 ON c2.atom_id2 = c3.atom_id
JOIN bond b ON c1.bond_id = b.bond_id AND c2.bond_id = b.bond_id AND c3.bond_id = b.bond_id
JOIN atom a1 ON c1.atom_id = a1.atom_id
JOIN atom a2 ON c2.atom_id2 = a2.atom_id
JOIN atom a3 ON c3.atom_id2 = a3.atom_id
WHERE b.bond_type = 'triple'",0,toxicology,best_pred_metadata
250,254,SELECT CAST((SELECT COUNT(T1.atom_id) FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id GROUP BY T2.bond_type ORDER BY COUNT(T2.bond_id) DESC LIMIT 1 ) AS REAL) * 100 / ( SELECT COUNT(atom_id) FROM connected ),"
SELECT
    (COUNT(*) * 100.0) / (SELECT COUNT(*) FROM bond) AS percentage
FROM
    bond
WHERE
    bond_id IN (
        SELECT
            bond_id
        FROM
            connected
        WHERE
            (atom_id, atom_id2) IN (
                SELECT
                    a1.atom_id, a2.atom_id
                FROM
                    atom a1
                JOIN
                    atom a2 ON a1.atom_id != a2.atom_id
                JOIN
                    connected c ON a1.atom_id = c.atom_id AND a2.atom_id = c.atom_id2
                GROUP BY
                    a1.element, a2.element
                ORDER BY
                    COUNT(*) DESC
                LIMIT 1
            )
    )",0,toxicology,best_pred_metadata
251,256,SELECT COUNT(T.atom_id) FROM atom AS T WHERE T.element = 'c' OR T.element = 'h',"
SELECT COUNT(*)
FROM atom
WHERE element IN ('carbon', 'hydrogen');",0,toxicology,best_pred_metadata
252,257,SELECT DISTINCT T2.atom_id2 FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.element = 's',"
SELECT atom_id2
FROM connected
WHERE atom_id IN (
    SELECT atom_id
    FROM atom
    WHERE element = 'sulfur'
);",0,toxicology,best_pred_metadata
253,258,SELECT DISTINCT T3.bond_type FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T3.bond_id = T2.bond_id WHERE T1.element = 'sn',"
SELECT bond.bond_type
FROM bond
JOIN connected ON bond.bond_id = connected.bond_id
JOIN atom ON connected.atom_id = atom.atom_id
WHERE atom.element = 'Tin';",0,toxicology,best_pred_metadata
254,259,"SELECT COUNT(DISTINCT T.element) FROM ( SELECT DISTINCT T2.molecule_id, T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '-' ) AS T","
SELECT COUNT(DISTINCT a.element)
FROM atom a
JOIN bond b ON a.molecule_id = b.molecule_id
WHERE b.bond_type = 'single'",0,toxicology,best_pred_metadata
255,260,"SELECT COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '#' AND T1.element IN ('p', 'br')","
SELECT COUNT(*)
FROM atom
WHERE molecule_id IN (
    SELECT molecule_id
    FROM bond
    WHERE bond_type = 'triple-bond'
)
AND (element = 'phosphorus' OR element = 'bromine');",0,toxicology,best_pred_metadata
256,261,SELECT DISTINCT T1.bond_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+',"
SELECT bond.bond_id
FROM bond
JOIN molecule ON bond.molecule_id = molecule.molecule_id
WHERE molecule.label = 'carcinogenic';",0,toxicology,best_pred_metadata
257,262,SELECT DISTINCT T1.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '-' AND T1.bond_type = '-',"
SELECT m.molecule_id
FROM molecule m
LEFT JOIN bond b ON m.molecule_id = b.molecule_id
WHERE b.bond_type = 'single'
AND m.molecule_id NOT IN (
    SELECT molecule_id
    FROM carcinogenic_molecules
)

Note: Since the question does not provide information about the carcinogenic_molecules table, I assumed that it exists and contains the molecule_id of carcinogenic molecules.",0,toxicology,best_pred_metadata
258,263,"SELECT CAST(COUNT(CASE WHEN T.element = 'cl' THEN T.atom_id ELSE NULL END) AS REAL) * 100 / COUNT(T.atom_id) FROM ( SELECT T1.atom_id, T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '-' ) AS T","
SELECT
    COUNT(a.atom_id) * 100.0 / (SELECT COUNT(*) FROM atom WHERE molecule_id IN (SELECT molecule_id FROM bond WHERE bond_type = 'single')) AS chlorine_percentage
FROM
    atom a
JOIN
    bond b ON a.molecule_id = b.molecule_id
WHERE
    a.element = 'chlorine' AND b.bond_type = 'single'",0,toxicology,best_pred_metadata
259,264,"SELECT molecule_id, T.label FROM molecule AS T WHERE T.molecule_id IN ('TR000', 'TR001', 'TR002')","
SELECT label FROM molecule WHERE molecule_id IN ('TR000', 'TR001', 'TR002');",0,toxicology,best_pred_metadata
260,265,SELECT T.molecule_id FROM molecule AS T WHERE T.label = '-',"
SELECT molecule_id
FROM molecule
WHERE label <> 'carcinogenic';",0,toxicology,best_pred_metadata
261,266,SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE T.molecule_id BETWEEN 'TR000' AND 'TR030' AND T.label = '+',"
SELECT COUNT(DISTINCT m.molecule_id)
FROM molecule m
JOIN atom a ON m.molecule_id = a.molecule_id
JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2
JOIN bond b ON c.bond_id = b.bond_id
WHERE m.molecule_id BETWEEN 'TR000' AND 'TR030'
AND (a.element IN ('C', 'N', 'As', 'Co', 'Cd', 'Cr', 'Ni') OR b.bond_type = 'carbon-carbon triple bond')",0,toxicology,best_pred_metadata
262,267,"SELECT T2.molecule_id, T2.bond_type FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id BETWEEN 'TR000' AND 'TR050'","
SELECT bond.bond_type
FROM bond
JOIN molecule ON bond.molecule_id = molecule.molecule_id
WHERE molecule.molecule_id BETWEEN 'TR000' AND 'TR050';",0,toxicology,best_pred_metadata
263,268,SELECT T2.element FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T1.bond_id = 'TR001_10_11',"
SELECT a.element
FROM atom a
JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2
WHERE c.bond_id = 'TR001_10_11';",0,toxicology,best_pred_metadata
264,269,SELECT COUNT(T3.bond_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T1.element = 'i',"
SELECT COUNT(b.bond_id)
FROM bond b
JOIN connected c ON b.bond_id = c.bond_id
JOIN atom a ON c.atom_id = a.atom_id OR c.atom_id2 = a.atom_id
WHERE a.element = 'iodine';",0,toxicology,best_pred_metadata
265,270,SELECT T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'ca' GROUP BY T2.label ORDER BY COUNT(T2.label) DESC LIMIT 1,"
SELECT m.label
FROM molecule m
JOIN atom a ON m.molecule_id = a.molecule_id
WHERE a.element = 'Calcium'
GROUP BY m.label
ORDER BY COUNT(*) DESC
LIMIT 1;",0,toxicology,best_pred_metadata
266,271,"SELECT T2.bond_id, T2.atom_id2, T1.element AS flag_have_CaCl FROM atom AS T1 INNER JOIN connected AS T2 ON T2.atom_id = T1.atom_id WHERE T2.bond_id = 'TR001_1_8' AND (T1.element = 'c1' OR T1.element = 'c')","
SELECT COUNT(*)
FROM atom
WHERE bond_id = 'TR001_1_8'
AND element IN ('carbon', 'chlorine');

This query will count the number of atoms with the bond_id 'TR001_1_8' that have an element of either 'carbon' or 'chlorine'. If the count is 2, then both elements are present. However, since we only need to know if both elements are present, we can modify the query to stop as soon as it finds both elements. Here's the modified query:

SELECT 1
FROM atom
WHERE bond_id = 'TR001_1_8'
AND element = 'carbon'
INTERSECT
SELECT 1
FROM atom
WHERE bond_id = 'TR001_1_8'
AND element = 'chlorine'
LIMIT 1;

This query will return a result if both elements are present in the bond, and it will stop as soon as it finds both elements. If no result is returned, then both elements are not present in the bond.",0,toxicology,best_pred_metadata
267,272,SELECT DISTINCT T2.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '#' AND T1.element = 'c' AND T2.label = '-',"
SELECT m.molecule_id
FROM molecule m
JOIN atom a ON m.molecule_id = a.molecule_id
JOIN bond b ON m.molecule_id = b.molecule_id
WHERE a.element = 'carbon'
AND b.bond_type = 'triple'
AND m.label NOT LIKE '%carcinogenic%'
LIMIT 2;",0,toxicology,best_pred_metadata
268,273,SELECT CAST(COUNT( CASE WHEN T1.element = 'cl' THEN T1.element ELSE NULL END) AS REAL) * 100 / COUNT(T1.element) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+',"
SELECT
    (COUNT(a.atom_id) * 100.0 / (SELECT COUNT(a.atom_id) FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.label = 'carcinogenic')) AS percentage_chlorine
FROM
    atom a
JOIN
    molecule m ON a.molecule_id = m.molecule_id
WHERE
    a.element = 'chlorine' AND m.label = 'carcinogenic'",0,toxicology,best_pred_metadata
269,274,SELECT DISTINCT T.element FROM atom AS T WHERE T.molecule_id = 'TR001',"
SELECT a.element
FROM atom a
JOIN molecule m ON a.molecule_id = m.molecule_id
WHERE m.molecule_id = 'TR001'
AND a.element IN ('toxic element 1', 'toxic element 2', ...);

Please note that the actual toxic elements are not mentioned in the provided schema, so you would need to replace 'toxic element 1', 'toxic element 2', ... with the actual toxic elements.",0,toxicology,best_pred_metadata
270,275,SELECT DISTINCT T.molecule_id FROM bond AS T WHERE T.bond_type = '=',"
SELECT molecule_id
FROM bond
WHERE bond_type = 'double';",0,toxicology,best_pred_metadata
271,276,"SELECT T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_type = '#'","
SELECT a1.atom_id, a2.atom_id
FROM connected c
JOIN bond b ON c.bond_id = b.bond_id
JOIN atom a1 ON c.atom_id = a1.atom_id
JOIN atom a2 ON c.atom_id2 = a2.atom_id
WHERE b.bond_type = 'triple bond'
GROUP BY b.molecule_id
HAVING COUNT(*) = 2;",0,toxicology,best_pred_metadata
272,277,SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR005_16_26',"
SELECT a.element
FROM atom a
JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2
JOIN bond b ON c.bond_id = b.bond_id
WHERE b.bond_id = 'TR005_16_26'

This query joins the atom, connected, and bond tables based on the bond_id and atom_id. It then selects the element associated with the specified bond_id.",0,toxicology,best_pred_metadata
273,278,SELECT COUNT(DISTINCT T2.molecule_id) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '-' AND T1.bond_type = '-',"
SELECT COUNT(*)
FROM molecule
WHERE molecule_id IN (
    SELECT molecule_id
    FROM bond
    WHERE bond_type = 'single'
) AND label != 'carcinogenic';",0,toxicology,best_pred_metadata
274,279,SELECT T2.label FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_id = 'TR001_10_11',"
SELECT m.label
FROM molecule m
JOIN bond b ON m.molecule_id = b.molecule_id
WHERE b.bond_id = 'TR001_10_11';",1,toxicology,best_pred_metadata
275,280,"SELECT DISTINCT T1.bond_id, T2.label FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#'","
SELECT b.bond_id,
       CASE
         WHEN b.bond_type = 'triple' THEN 'Carcinogenic'
         ELSE 'Not Carcinogenic'
       END AS carcinogenicity
FROM bond b
WHERE b.bond_type = 'triple';",0,toxicology,best_pred_metadata
276,281,"SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND SUBSTR(T1.atom_id, -1) = '4' AND LENGTH(T1.atom_id) = 7","
SELECT a.element
FROM atom a
JOIN molecule m ON a.molecule_id = m.molecule_id
WHERE m.label = 'carcinogenic'
AND a.atom_id = (
    SELECT atom_id
    FROM (
        SELECT atom_id, ROW_NUMBER() OVER (PARTITION BY molecule_id ORDER BY atom_id) as row_num
        FROM atom
    ) subquery
    WHERE row_num = 4
)",0,toxicology,best_pred_metadata
277,282,"SELECT CAST(COUNT(CASE WHEN T.element = 'h' THEN T.atom_id ELSE NULL END) AS REAL) / COUNT(T.atom_id) FROM ( SELECT DISTINCT T1.atom_id, T1.element, T1.molecule_id, T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR006' ) AS T UNION ALL SELECT DISTINCT T3.label FROM ( SELECT DISTINCT T1.atom_id, T1.element, T1.molecule_id, T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR006' ) AS T3","
SELECT
    (SELECT COUNT(*) FROM atom WHERE molecule_id = 'TR006' AND element = 'Hydrogen') /
    (SELECT COUNT(*) FROM atom WHERE molecule_id = 'TR006') AS hydrogen_ratio,
    (SELECT label FROM molecule WHERE molecule_id = 'TR006') AS molecule_label;",0,toxicology,best_pred_metadata
278,283,SELECT T2.label AS flag_carcinogenic FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'ca',"
SELECT molecule.label
FROM molecule
JOIN atom ON molecule.molecule_id = atom.molecule_id
WHERE atom.element = 'Calcium'
AND molecule.label LIKE '%carcinogenic%';",0,toxicology,best_pred_metadata
279,284,SELECT DISTINCT T2.bond_type FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'te',"
SELECT bond.bond_type
FROM bond
JOIN atom ON bond.molecule_id = atom.molecule_id
WHERE atom.element = 'Tellurium';",0,toxicology,best_pred_metadata
280,285,SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_id = 'TR001_10_11',"
SELECT a1.element, a2.element
FROM connected c
JOIN atom a1 ON c.atom_id = a1.atom_id
JOIN atom a2 ON c.atom_id2 = a2.atom_id
WHERE c.bond_id = 'TR001_10_11';",0,toxicology,best_pred_metadata
281,286,SELECT CAST(COUNT(CASE WHEN T.bond_type = '#' THEN T.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T.bond_id) FROM bond AS T,"
SELECT
    (COUNT(DISTINCT b.molecule_id) * 100.0 / COUNT(DISTINCT m.molecule_id)) AS percentage_triple_bond
FROM
    molecule m
    JOIN bond b ON m.molecule_id = b.molecule_id
WHERE
    b.bond_type = 'triple-bond';",0,toxicology,best_pred_metadata
282,287,SELECT CAST(COUNT(CASE WHEN T.bond_type = '=' THEN T.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T.bond_id) FROM bond AS T WHERE T.molecule_id = 'TR047',"
SELECT
    (COUNT(DISTINCT b.bond_id) * 100.0 / (SELECT COUNT(DISTINCT a.atom_id) FROM atom a WHERE a.molecule_id = 'TR047')) AS percentage_double_bond
FROM
    bond b
JOIN
    connected c ON b.bond_id = c.bond_id
JOIN
    atom a ON c.atom_id = a.atom_id
WHERE
    b.bond_type = 'double-bond' AND a.molecule_id = 'TR047';",0,toxicology,best_pred_metadata
283,288,SELECT T2.label AS flag_carcinogenic FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR001_1',"
SELECT molecule.label
FROM molecule
JOIN atom ON molecule.molecule_id = atom.molecule_id
WHERE atom.atom_id = 'TR001_1' AND molecule.label LIKE '%carcinogenic%';",0,toxicology,best_pred_metadata
284,290,SELECT DISTINCT T.element FROM atom AS T WHERE T.molecule_id = 'TR151',"
SELECT a.element
FROM atom a
JOIN molecule m ON a.molecule_id = m.molecule_id
WHERE m.label = 'TR151'
AND a.element IN ('Arsenic', 'Lead', 'Mercury', 'Cadmium')",0,toxicology,best_pred_metadata
285,291,SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE T.label = '+',"
SELECT COUNT(DISTINCT m.molecule_id)
FROM molecule m
WHERE m.label = 'carcinogenic';",0,toxicology,best_pred_metadata
286,292,SELECT T.atom_id FROM atom AS T WHERE T.molecule_id BETWEEN 'TR010' AND 'TR050' AND T.element = 'c',"
SELECT atom_id, molecule_id, element
FROM atom
WHERE molecule_id BETWEEN 'TR010' AND 'TR050'
AND element = 'carbon';",0,toxicology,best_pred_metadata
287,293,SELECT COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+',"
SELECT COUNT(atom_id)
FROM atom
WHERE molecule_id IN (
    SELECT molecule_id
    FROM molecule
    WHERE label = 'carcinogenic compounds'
);",0,toxicology,best_pred_metadata
288,294,SELECT T1.bond_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND T1.bond_type = '=',"
SELECT b.bond_id
FROM bond b
JOIN molecule m ON b.molecule_id = m.molecule_id
WHERE b.bond_type = 'double-bond' AND m.label = 'carcinogenic compound';",0,toxicology,best_pred_metadata
289,295,SELECT COUNT(T1.atom_id) AS atomnums_h FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND T1.element = 'h',"
SELECT COUNT(*)
FROM atom
WHERE element = 'hydrogen'
AND molecule_id IN (
    SELECT molecule_id
    FROM molecule
    WHERE label = 'carcinogenic compound'
)",0,toxicology,best_pred_metadata
290,296,"SELECT T2.molecule_id, T2.bond_id, T1.atom_id FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE T1.atom_id = 'TR000_1' AND T2.bond_id = 'TR000_1_2'","
SELECT molecule_id
FROM bond
WHERE bond_id = 'TR00_1_2'
AND bond_id IN (
    SELECT bond_id
    FROM connected
    WHERE atom_id = 'TR00_1'
);",0,toxicology,best_pred_metadata
291,297,SELECT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'c' AND T2.label = '-',"
SELECT a.atom_id
FROM atom a
LEFT JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2
LEFT JOIN atom a2 ON c.atom_id = a.atom_id AND c.atom_id2 = a2.atom_id OR c.atom_id2 = a.atom_id AND c.atom_id = a2.atom_id
WHERE a.element = 'carbon'
AND NOT EXISTS (
  SELECT 1
  FROM atom a3
  WHERE (a3.atom_id = a.atom_id OR a3.atom_id = a2.atom_id)
  AND a3.element = 'carbon'
  AND a3.atom_id IN (
    SELECT atom_id
    FROM carcinogenic_compounds
  )
)
LIMIT 1;",0,toxicology,best_pred_metadata
292,298,SELECT CAST(COUNT(CASE WHEN T1.element = 'h' THEN T2.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+',"
SELECT
    (COUNT(DISTINCT m.molecule_id) * 100.0 / (SELECT COUNT(DISTINCT molecule_id) FROM molecule)) AS percentage
FROM
    molecule m
JOIN
    atom a ON m.molecule_id = a.molecule_id
WHERE
    a.element = 'hydrogen'
    AND m.molecule_id IN (
        SELECT DISTINCT molecule_id
        FROM atom
        WHERE element IN ('carbon', 'nitrogen', 'arsenic')
    )

This query calculates the percentage of molecules containing carcinogenic compounds (carbon, nitrogen, or arsenic) that also contain hydrogen. It first counts the number of distinct molecules that contain hydrogen and then divides that by the total number of distinct molecules in the database. The molecules containing carcinogenic compounds are filtered in the subquery.",0,toxicology,best_pred_metadata
293,300,SELECT T.atom_id FROM atom AS T WHERE T.molecule_id = 'TR186',"
SELECT atom.atom_id, atom.element
FROM atom
WHERE atom.molecule_id = (SELECT molecule_id FROM molecule WHERE label = 'TR186');",0,toxicology,best_pred_metadata
294,301,SELECT T.bond_type FROM bond AS T WHERE T.bond_id = 'TR007_4_19',"
SELECT bond_type
FROM bond
WHERE bond_id = 'TR007_4_19';",1,toxicology,best_pred_metadata
295,302,SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR001_2_4',"
SELECT a.element
FROM atom a
JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2
WHERE c.bond_id = 'TR001_2_4';",0,toxicology,best_pred_metadata
296,303,"SELECT COUNT(T1.bond_id), T2.label FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '=' AND T2.molecule_id = 'TR006' GROUP BY T2.label","
SELECT COUNT(*)
FROM bond
WHERE molecule_id = (SELECT molecule_id FROM molecule WHERE label = 'TR006')
AND bond_type = 'double';

-- Since the question does not provide information about carcinogenicity, I'm unable to include that in the SQL query. To answer the carcinogenicity part, additional data or a table containing this information would be required.",0,toxicology,best_pred_metadata
297,304,"SELECT DISTINCT T2.molecule_id, T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'","
SELECT m.molecule_id, m.label, a.element
FROM molecule m
JOIN atom a ON m.molecule_id = a.molecule_id
WHERE m.label = 'carcinogenic'",0,toxicology,best_pred_metadata
298,305,"SELECT T1.bond_id, T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_type = '-'","
SELECT bond.bond_id, connected.atom_id, connected.atom_id2
FROM bond
JOIN connected ON bond.bond_id = connected.bond_id
WHERE bond.bond_type = 'single';",0,toxicology,best_pred_metadata
299,306,"SELECT DISTINCT T1.molecule_id, T2.element FROM bond AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#'","
SELECT m.molecule_id, a.element
FROM molecule m
JOIN bond b ON m.molecule_id = b.molecule_id
JOIN connected c ON b.bond_id = c.bond_id
JOIN atom a ON c.atom_id = a.atom_id OR c.atom_id2 = a.atom_id
WHERE b.bond_type = 'triple'
GROUP BY m.molecule_id, a.element;",0,toxicology,best_pred_metadata
300,307,SELECT T2.element FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T1.bond_id = 'TR000_2_3',"
SELECT a.element
FROM atom a
JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2
WHERE c.bond_id = 'TR000_2_3';",0,toxicology,best_pred_metadata
301,308,SELECT COUNT(T1.bond_id) FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T2.element = 'cl',"
SELECT COUNT(*)
FROM bond
WHERE bond_id IN (
    SELECT b.bond_id
    FROM bond b
    JOIN connected c ON b.bond_id = c.bond_id
    JOIN atom a ON c.atom_id = a.atom_id
    WHERE a.element = 'chlorine'
);",0,toxicology,best_pred_metadata
302,309,"SELECT T1.atom_id, COUNT(DISTINCT T2.bond_type) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR346' GROUP BY T1.atom_id, T2.bond_type","
SELECT a.atom_id, COUNT(DISTINCT b.bond_type) as bond_type_count
FROM atom a
JOIN molecule m ON a.molecule_id = m.molecule_id
LEFT JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2
LEFT JOIN bond b ON c.bond_id = b.bond_id
WHERE m.label = 'TR346'
GROUP BY a.atom_id;",0,toxicology,best_pred_metadata
303,310,"SELECT COUNT(DISTINCT T2.molecule_id), SUM(CASE WHEN T2.label = '+' THEN 1 ELSE 0 END) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '='","
SELECT COUNT(DISTINCT m.molecule_id) AS molecules_with_double_bond
FROM molecule m
JOIN bond b ON m.molecule_id = b.molecule_id
WHERE b.bond_type = 'double'
AND m.label = 'carcinogenic compound';",0,toxicology,best_pred_metadata
304,311,SELECT COUNT(DISTINCT T1.molecule_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element <> 's' AND T2.bond_type <> '=',"
SELECT COUNT(DISTINCT m.molecule_id)
FROM molecule m
LEFT JOIN atom a ON m.molecule_id = a.molecule_id
LEFT JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2
LEFT JOIN bond b ON c.bond_id = b.bond_id
WHERE a.element <> 'Sulphur'
AND (b.bond_type IS NULL OR b.bond_type <> 'Double')

This query first joins the molecule table with the atom table and the connected table. It then joins the connected table with the bond table. The WHERE clause filters out molecules that contain sulphur and have a double bond. The COUNT function is used to count the number of distinct molecule_ids that meet these criteria.",0,toxicology,best_pred_metadata
305,312,SELECT DISTINCT T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_id = 'TR001_2_4',"
SELECT m.label
FROM molecule m
JOIN bond b ON m.molecule_id = b.molecule_id
WHERE b.bond_id = 'TR001_2_4';",1,toxicology,best_pred_metadata
306,313,SELECT COUNT(T.atom_id) FROM atom AS T WHERE T.molecule_id = 'TR005',"
SELECT COUNT(atom_id) FROM atom WHERE molecule_id = 'TR005';",1,toxicology,best_pred_metadata
307,314,SELECT COUNT(T.bond_id) FROM bond AS T WHERE T.bond_type = '-',"
SELECT COUNT(*)
FROM bond
WHERE bond_type = 'single';",0,toxicology,best_pred_metadata
308,315,SELECT DISTINCT T1.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'cl' AND T2.label = '+',"
SELECT m.molecule_id, m.label
FROM molecule m
JOIN atom a ON m.molecule_id = a.molecule_id
WHERE a.element = 'cl'
AND m.label LIKE '%carcinogenic%';",0,toxicology,best_pred_metadata
309,316,SELECT DISTINCT T1.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'c' AND T2.label = '-',"
SELECT m.molecule_id, m.label
FROM molecule m
WHERE EXISTS (
  SELECT 1
  FROM atom a
  WHERE a.molecule_id = m.molecule_id
  AND a.element = 'c'
)
AND m.label NOT LIKE '%carcinogenic%';",0,toxicology,best_pred_metadata
310,317,SELECT COUNT(CASE WHEN T2.label = '+' AND T1.element = 'cl' THEN T2.molecule_id ELSE NULL END) * 100 / COUNT(T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id,"
SELECT
    (COUNT(DISTINCT m.molecule_id) * 100.0 / (SELECT COUNT(DISTINCT molecule_id) FROM molecule WHERE label = 'carcinogenic')) AS percentage_of_carcinogenic_molecules_with_chlorine
FROM
    molecule m
JOIN
    atom a ON m.molecule_id = a.molecule_id
WHERE
    m.label = 'carcinogenic'
    AND a.element = 'Chlorine';",0,toxicology,best_pred_metadata
311,318,SELECT DISTINCT T1.molecule_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR001_1_7',"
SELECT molecule_id
FROM bond
WHERE bond_id = 'TR001_1_7';",1,toxicology,best_pred_metadata
312,319,SELECT COUNT(DISTINCT T1.element) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR001_3_4',"
SELECT COUNT(DISTINCT a.element)
FROM atom a
JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2
WHERE c.bond_id = 'TR001_3_4';",1,toxicology,best_pred_metadata
313,320,SELECT T1.bond_type FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.atom_id = 'TR000_1' AND T2.atom_id2 = 'TR000_2',"
SELECT bond.bond_type
FROM bond
JOIN connected ON bond.bond_id = connected.bond_id
WHERE connected.atom_id = 'TR000_1' AND connected.atom_id2 = 'TR000_2';",1,toxicology,best_pred_metadata
314,321,SELECT T1.molecule_id FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.atom_id = 'TR000_2' AND T2.atom_id2 = 'TR000_4',"
SELECT m.molecule_id
FROM molecule m
JOIN atom a1 ON m.molecule_id = a1.molecule_id
JOIN atom a2 ON m.molecule_id = a2.molecule_id
WHERE a1.atom_id = 'TR000_2' AND a2.atom_id = 'TR000_4';",1,toxicology,best_pred_metadata
315,322,SELECT T.element FROM atom AS T WHERE T.atom_id = 'TR000_1',"
SELECT a.element
FROM atom a
WHERE a.atom_id = 'TR000_1';",1,toxicology,best_pred_metadata
316,324,SELECT CAST(COUNT(CASE WHEN T.bond_type = '-' THEN T.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T.bond_id) FROM bond t,"
SELECT
    (COUNT(DISTINCT c.atom_id) * 100.0) / (SELECT COUNT(*) FROM atom) AS percentage_of_atoms_with_single_bond
FROM
    connected c
JOIN
    bond b ON c.bond_id = b.bond_id
WHERE
    b.bond_type = 'single'",0,toxicology,best_pred_metadata
317,325,SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.element = 'n' AND T1.label = '+',"
SELECT COUNT(DISTINCT m.molecule_id)
FROM molecule m
JOIN atom a ON m.molecule_id = a.molecule_id
WHERE a.element = 'Nitrogen'
AND m.label = 'carcinogenic'",0,toxicology,best_pred_metadata
318,326,SELECT DISTINCT T1.molecule_id FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 's' AND T2.bond_type = '=',"
SELECT m.molecule_id
FROM molecule m
JOIN atom a ON m.molecule_id = a.molecule_id
JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2
JOIN bond b ON c.bond_id = b.bond_id
WHERE a.element = 'Sulphur' AND b.bond_type = 'double'
GROUP BY m.molecule_id
HAVING COUNT(DISTINCT b.bond_id) > 0;",0,toxicology,best_pred_metadata
319,327,"SELECT T.molecule_id FROM ( SELECT T1.molecule_id, COUNT(T2.atom_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '-' GROUP BY T1.molecule_id HAVING COUNT(T2.atom_id) > 5 ) t","
SELECT m.molecule_id, m.label
FROM molecule m
WHERE m.label <> 'carcinogenic'
AND (SELECT COUNT(*) FROM atom a WHERE a.molecule_id = m.molecule_id) > 5;",0,toxicology,best_pred_metadata
320,328,SELECT T1.element FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR024' AND T2.bond_type = '=',"
SELECT a.element
FROM atom a
JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2
JOIN bond b ON c.bond_id = b.bond_id
WHERE b.bond_type = 'double' AND b.molecule_id = 'TR024';",0,toxicology,best_pred_metadata
321,329,"SELECT T.molecule_id FROM ( SELECT T2.molecule_id, COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' GROUP BY T2.molecule_id ORDER BY COUNT(T1.atom_id) DESC LIMIT 1 ) t","
SELECT molecule.molecule_id, COUNT(atom.atom_id) AS atom_count
FROM molecule
JOIN atom ON molecule.molecule_id = atom.molecule_id
WHERE molecule.label = 'carcinogenic'
GROUP BY molecule.molecule_id
ORDER BY atom_count DESC
LIMIT 1;",0,toxicology,best_pred_metadata
322,330,SELECT CAST(SUM(CASE WHEN T1.label = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T1.molecule_id = T3.molecule_id WHERE T3.bond_type = '#' AND T2.element = 'h',"
SELECT
    (COUNT(DISTINCT m.molecule_id) * 100.0 / (SELECT COUNT(DISTINCT molecule_id) FROM molecule)) AS percentage_carcinogenic_molecules_with_triple_bonded_hydrogen
FROM
    molecule m
JOIN
    atom a ON m.molecule_id = a.molecule_id
JOIN
    connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2
JOIN
    bond b ON c.bond_id = b.bond_id
WHERE
    m.label = 'carcinogenic'
    AND a.element = 'H'
    AND b.bond_type = 'triple'
GROUP BY
    m.molecule_id
HAVING
    COUNT(DISTINCT a.atom_id) = 3;",0,toxicology,best_pred_metadata
323,331,SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE T.label = '+',"
SELECT COUNT(DISTINCT molecule_id)
FROM molecule
WHERE label = 'carcinogenic';",0,toxicology,best_pred_metadata
324,332,SELECT COUNT(DISTINCT T.molecule_id) FROM bond AS T WHERE T.molecule_id BETWEEN 'TR004' AND 'TR010' AND T.bond_type = '-',"
SELECT COUNT(DISTINCT m.molecule_id)
FROM molecule m
JOIN bond b ON m.molecule_id = b.molecule_id
WHERE m.molecule_id BETWEEN 'TR004' AND 'TR010'
AND b.bond_type = 'single'",0,toxicology,best_pred_metadata
325,333,SELECT COUNT(T.atom_id) FROM atom AS T WHERE T.molecule_id = 'TR008' AND T.element = 'c',"
SELECT COUNT(*)
FROM atom
WHERE molecule_id = 'TR008' AND element = 'Carbon';",0,toxicology,best_pred_metadata
326,334,SELECT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR004_7' AND T2.label = '-',"
SELECT a.element
FROM atom a
JOIN molecule m ON a.molecule_id = m.molecule_id
WHERE a.atom_id = 'TR004_7' AND m.label <> 'carcinogenic';",1,toxicology,best_pred_metadata
327,335,SELECT COUNT(DISTINCT T1.molecule_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '=' AND T1.element = 'o',"
SELECT COUNT(DISTINCT m.molecule_id)
FROM molecule m
JOIN bond b ON m.molecule_id = b.molecule_id
JOIN connected c ON b.bond_id = c.bond_id
JOIN atom a ON c.atom_id = a.atom_id
WHERE b.bond_type = 'double' AND a.element = 'oxygen';",0,toxicology,best_pred_metadata
328,336,SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '#' AND T1.label = '-',"
SELECT COUNT(DISTINCT m.molecule_id)
FROM molecule m
JOIN bond b ON m.molecule_id = b.molecule_id
WHERE b.bond_type = 'triple'
AND m.label <> 'carcinogenic';",0,toxicology,best_pred_metadata
329,337,"SELECT DISTINCT T1.element, T2.bond_type FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR016'","
SELECT a.element, b.bond_type
FROM atom a
JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2
JOIN bond b ON c.bond_id = b.bond_id
WHERE a.molecule_id = 'TR016';",0,toxicology,best_pred_metadata
330,338,SELECT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T2.molecule_id = 'TR012' AND T3.bond_type = '=' AND T1.element = 'c',"
SELECT atom.atom_id
FROM atom
JOIN connected ON atom.atom_id = connected.atom_id OR atom.atom_id = connected.atom_id2
JOIN bond ON connected.bond_id = bond.bond_id
JOIN molecule ON atom.molecule_id = molecule.molecule_id
WHERE atom.element = 'Carbon' AND bond.bond_type = 'Double' AND molecule.label = 'TR012'",0,toxicology,best_pred_metadata
331,339,SELECT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'o' AND T2.label = '+',"
SELECT a.atom_id
FROM atom a
JOIN molecule m ON a.molecule_id = m.molecule_id
WHERE a.element = 'oxygen'
AND m.label = 'carcinogenic'",0,toxicology,best_pred_metadata
332,340,SELECT id FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL,"
SELECT *
FROM cards
WHERE hasFoil = 1
ORDER BY convertedManaCost DESC
LIMIT 10;",0,card_games,best_pred_metadata
333,341,SELECT id FROM cards WHERE borderColor = 'borderless' AND (cardKingdomId IS NULL OR cardKingdomId IS NULL),"
SELECT *
FROM cards
WHERE borderColor IS NULL
AND hasFoil = 0;",0,card_games,best_pred_metadata
334,342,SELECT name FROM cards ORDER BY faceConvertedManaCost LIMIT 1,"
SELECT name, faceConvertedManaCost FROM cards WHERE faceConvertedManaCost > convertedManaCost;",0,card_games,best_pred_metadata
335,343,SELECT id FROM cards WHERE edhrecRank < 100 AND frameVersion = 2015,"
SELECT name
FROM cards
WHERE frameVersion = '2015' AND edhrecRank < 100;",0,card_games,best_pred_metadata
336,344,SELECT DISTINCT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'gladiator' AND T2.status = 'Banned' AND T1.rarity = 'mythic',"
SELECT c.name, c.setCode
FROM cards c
JOIN legalities l ON c.uuid = l.uuid
WHERE c.rarity = 'mythic' AND l.format = 'gladiator' AND l.status = 'banned';",0,card_games,best_pred_metadata
337,345,SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.type = 'Artifact' AND T2.format = 'vintage' AND T1.side IS NULL,"
SELECT l.status
FROM cards c
JOIN legalities l ON c.uuid = l.uuid
WHERE c.type LIKE '%Artifact%'
AND c.layout NOT LIKE '%double-faced%'
AND l.format = 'vintage'",0,card_games,best_pred_metadata
338,346,"SELECT T1.id, T1.artist FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Legal' AND T2.format = 'commander' AND (T1.power IS NULL OR T1.power = '*')","
SELECT c.id, c.artist
FROM cards c
JOIN legalities l ON c.uuid = l.uuid
WHERE c.power IS NULL AND l.format = 'commander' AND l.status = 'legal';",0,card_games,best_pred_metadata
339,347,"SELECT T1.id, T2.text, T1.hasContentWarning FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Stephen Daniele'","
SELECT c.name, r.text,
       CASE
           WHEN c.artist IS NULL OR c.artist = '' THEN 'Missing artist'
           ELSE 'Artist: ' || c.artist
       END AS artist_status,
       CASE
           WHEN c.text IS NULL OR c.text = '' THEN 'Missing text'
           ELSE 'Text: ' || c.text
       END AS text_status,
       CASE
           WHEN r.text IS NULL OR r.text = '' THEN 'Missing ruling text'
           ELSE 'Ruling text: ' || r.text
       END AS ruling_status
FROM cards c
LEFT JOIN rulings r ON c.uuid = r.uuid
WHERE c.artist = 'Stephen Daniel';",0,card_games,best_pred_metadata
340,348,SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Sublime Epiphany' AND T1.number = '74s',"
SELECT *
FROM rulings
WHERE uuid = (
    SELECT uuid
    FROM cards
    WHERE name = 'Sublime Epiphany' AND number = '74s'
)",0,card_games,best_pred_metadata
341,349,"SELECT T1.name, T1.artist, T1.isPromo FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.isPromo = 1 GROUP BY T1.artist ORDER BY COUNT(DISTINCT T1.uuid) DESC LIMIT 1","
SELECT c.name, c.artist, c.isPromo, COUNT(r.id) AS ruling_count
FROM cards c
JOIN rulings r ON c.uuid = r.uuid
GROUP BY c.name, c.artist, c.isPromo
ORDER BY ruling_count DESC
LIMIT 1;",0,card_games,best_pred_metadata
342,350,SELECT T2.language FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Annul' AND T1.number = 29,"
SELECT language
FROM foreign_data
WHERE name = 'Annul' AND multiverseid = (
    SELECT multiverseid
    FROM cards
    WHERE name = 'Annul' AND number = '29'
)

This SQL query first retrieves the multiverseid of the card named 'Annul' with the number '29' from the cards table. Then, it uses this multiverseid to find the alternative languages available for this card in the foreign_data table.",0,card_games,best_pred_metadata
343,351,SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Japanese',"
SELECT c.name
FROM cards c
JOIN foreign_data fd ON c.uuid = fd.uuid
WHERE fd.language = 'Japanese';",1,card_games,best_pred_metadata
344,352,SELECT CAST(SUM(CASE WHEN T2.language = 'Chinese Simplified' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid,"
SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM cards) AS percentage_chinese_simplified
FROM foreign_data
WHERE language = 'Chinese Simplified'

This query calculates the percentage of cards available in Chinese Simplified by counting the number of cards in the foreign_data table with the language set to 'Chinese Simplified' and dividing it by the total number of cards in the cards table. The result is multiplied by 100 to get the percentage.",0,card_games,best_pred_metadata
345,353,"SELECT T1.name, T1.totalSetSize FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Italian'","
SELECT s.name, s.code, COUNT(c.id) AS total_cards
FROM sets s
JOIN set_translations st ON s.code = st.setCode
JOIN cards c ON s.code = c.setCode
WHERE st.language = 'Italian'
GROUP BY s.name, s.code;",0,card_games,best_pred_metadata
346,354,SELECT COUNT(type) FROM cards WHERE artist = 'Aaron Boyd',"
SELECT COUNT(DISTINCT type)
FROM cards
WHERE artist = 'Aaron Boyd' AND isFullArt = 1;",0,card_games,best_pred_metadata
347,355,SELECT DISTINCT keywords FROM cards WHERE name = 'Angel of Mercy',"
SELECT keywords FROM cards WHERE name = 'Angel of Mercy';",0,card_games,best_pred_metadata
348,356,SELECT COUNT(*) FROM cards WHERE power = '*',"
SELECT COUNT(*) FROM cards WHERE power = 'Infinity' OR power = '∞';",0,card_games,best_pred_metadata
349,357,SELECT promoTypes FROM cards WHERE name = 'Duress' AND promoTypes IS NOT NULL,"
SELECT promoTypes FROM cards WHERE name = 'Duress';",0,card_games,best_pred_metadata
350,358,SELECT DISTINCT borderColor FROM cards WHERE name = 'Ancestor''s Chosen',"
SELECT borderColor FROM cards WHERE name = ""Ancestor's Chosen"";",0,card_games,best_pred_metadata
351,359,SELECT originalType FROM cards WHERE name = 'Ancestor''s Chosen' AND originalType IS NOT NULL,"
SELECT originalType FROM cards WHERE name = 'Ancestor\'s Chosen';",0,card_games,best_pred_metadata
352,360,SELECT language FROM set_translations WHERE id IN ( SELECT id FROM cards WHERE name = 'Angel of Mercy' ),"
SELECT language
FROM set_translations
WHERE setCode = (
    SELECT setCode
    FROM cards
    WHERE name = 'Angel of Mercy'
);",0,card_games,best_pred_metadata
353,362,SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Condemn',"
SELECT text FROM rulings WHERE uuid = (SELECT uuid FROM cards WHERE name = 'Condemn');",0,card_games,best_pred_metadata
354,363,SELECT COUNT(DISTINCT T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Restricted' AND T1.isStarter = 1,"
SELECT COUNT(*)
FROM cards
WHERE isStarter = 1
AND uuid IN (
    SELECT uuid
    FROM legalities
    WHERE status = 'restricted'
)",0,card_games,best_pred_metadata
355,364,SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Cloudchaser Eagle',"
SELECT status
FROM legalities
JOIN cards ON legalities.uuid = cards.uuid
WHERE cards.name = 'Cloudchaser Eagle';",0,card_games,best_pred_metadata
356,365,SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight',"
SELECT type FROM cards WHERE name = ""Benalish Knight"";",0,card_games,best_pred_metadata
357,367,SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Phyrexian',"
SELECT artist
FROM cards
WHERE setCode = (
    SELECT code
    FROM sets
    WHERE name = 'Phyrexian'
)",0,card_games,best_pred_metadata
358,368,SELECT CAST(SUM(CASE WHEN borderColor = 'borderless' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM cards,"
SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM cards) AS borderless_percentage
FROM cards
WHERE borderColor IS NULL OR borderColor = ''

Note: The question asks for the percentage of borderless cards, but the database schema does not include a column that directly indicates whether a card is borderless. In this case, we assume that borderless cards are those with a null or empty value in the borderColor column.",0,card_games,best_pred_metadata
359,369,SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'German' AND T1.isReprint = 1,"
SELECT COUNT(*)
FROM cards
JOIN foreign_data ON cards.uuid = foreign_data.uuid
WHERE foreign_data.language = 'German' AND cards.isReprint = 1;",1,card_games,best_pred_metadata
360,370,SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.borderColor = 'borderless' AND T2.language = 'Russian',"
SELECT COUNT(*)
FROM cards
JOIN foreign_data ON cards.uuid = foreign_data.uuid
WHERE cards.borderColor IS NULL AND foreign_data.language = 'Russian';",0,card_games,best_pred_metadata
361,371,SELECT CAST(SUM(CASE WHEN T2.language = 'French' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.isStorySpotlight = 1,"
SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM cards WHERE isStorySpotlight = 1)) AS percentage_french_story_spotlight_cards
FROM foreign_data
JOIN cards ON foreign_data.uuid = cards.uuid
WHERE foreign_data.language = 'French' AND cards.isStorySpotlight = 1;",0,card_games,best_pred_metadata
362,372,SELECT COUNT(id) FROM cards WHERE toughness = 99,"
SELECT COUNT(*) FROM cards WHERE toughness = 99;",1,card_games,best_pred_metadata
363,373,SELECT DISTINCT name FROM cards WHERE artist = 'Aaron Boyd',"
SELECT name FROM cards WHERE artist = 'Aaron Boyd';",0,card_games,best_pred_metadata
364,374,SELECT COUNT(id) FROM cards WHERE availability = 'mtgo' AND borderColor = 'black',"
SELECT COUNT(*)
FROM cards
WHERE borderColor = 'Black' AND availability = 'mtgo' AND isOnlineOnly = 1;",0,card_games,best_pred_metadata
365,375,SELECT id FROM cards WHERE convertedManaCost = 0,"
SELECT id FROM cards WHERE convertedManaCost = 0;",1,card_games,best_pred_metadata
366,376,SELECT layout FROM cards WHERE keywords = 'Flying',"
SELECT layout FROM cards WHERE keywords LIKE '%flying%';",0,card_games,best_pred_metadata
367,377,SELECT COUNT(id) FROM cards WHERE originalType = 'Summon - Angel' AND subtypes != 'Angel',"
SELECT COUNT(*)
FROM cards
WHERE originalType = 'Summon - Angel' AND subtypes NOT LIKE '%Angel%';",0,card_games,best_pred_metadata
368,378,SELECT id FROM cards WHERE cardKingdomId IS NOT NULL AND cardKingdomFoilId IS NOT NULL,"
SELECT id
FROM cards
WHERE hasFoil = 1
AND convertedManaCost > (
    SELECT AVG(convertedManaCost)
    FROM cards
    WHERE hasNonFoil = 1
)

This query selects the IDs of foiled cards that have a converted mana cost greater than the average converted mana cost of non-foiled cards. This can be interpreted as identifying foiled cards that are incredibly powerful when paired with non-foiled cards.",0,card_games,best_pred_metadata
369,379,SELECT id FROM cards WHERE duelDeck = 'a',"
SELECT id FROM cards WHERE duelDeck = 'a';",1,card_games,best_pred_metadata
370,380,SELECT edhrecRank FROM cards WHERE frameVersion = 2015,"
SELECT edhrecRank FROM cards WHERE frameVersion = 2015;",1,card_games,best_pred_metadata
371,381,SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Chinese Simplified',"
SELECT DISTINCT artist
FROM cards
WHERE id IN (
    SELECT uuid
    FROM foreign_data
    WHERE language = 'Chinese Simplified'
)",0,card_games,best_pred_metadata
372,382,SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.availability = 'paper' AND T2.language = 'Japanese',"
SELECT c.name
FROM cards c
JOIN foreign_data fd ON c.uuid = fd.uuid
WHERE c.availability = 'paper' AND fd.language = 'Japanese';",1,card_games,best_pred_metadata
373,383,SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Banned' AND T1.borderColor = 'white',"
SELECT COUNT(*)
FROM cards
JOIN legalities ON cards.uuid = legalities.uuid
WHERE legalities.status = 'Banned' AND cards.borderColor = 'White';",0,card_games,best_pred_metadata
374,384,"SELECT T1.uuid, T3.language FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid INNER JOIN foreign_data AS T3 ON T1.uuid = T3.uuid WHERE T2.format = 'legacy'","
SELECT c.uuid, f.language
FROM cards c
JOIN legalities l ON c.uuid = l.uuid
JOIN foreign_data f ON c.uuid = f.uuid
WHERE l.format = 'legacy' AND l.status = 'legal';",0,card_games,best_pred_metadata
375,385,SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Beacon of Immortality',"
SELECT text FROM rulings WHERE uuid = (SELECT uuid FROM cards WHERE name = 'Beacon of Immortality');",0,card_games,best_pred_metadata
376,386,SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.frameVersion = 'future',"
SELECT c.id, c.name, l.format, l.status
FROM cards c
JOIN legalities l ON c.uuid = l.uuid
WHERE c.frameVersion > (SELECT MAX(frameVersion) FROM cards)

This query will return the id, name, format, and status of cards that have a future frame version and their corresponding legality status.",0,card_games,best_pred_metadata
377,387,"SELECT id, colors FROM cards WHERE id IN ( SELECT id FROM set_translations WHERE setCode = 'OGW' )","
SELECT name, colors FROM cards WHERE setCode = 'OGW';",0,card_games,best_pred_metadata
378,388,"SELECT id, language FROM set_translations WHERE id = ( SELECT id FROM cards WHERE convertedManaCost = 5 ) AND setCode = '10E'","
SELECT c.name, st.language
FROM cards c
JOIN sets s ON c.setCode = s.code
JOIN set_translations st ON s.code = st.setCode
WHERE s.code = '10E' AND c.convertedManaCost = 5;",0,card_games,best_pred_metadata
379,389,"SELECT T1.id, T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Creature - Elf'","
SELECT c.name, r.date
FROM cards c
JOIN rulings r ON c.uuid = r.uuid
WHERE c.originalType = 'Creature - Elf';",0,card_games,best_pred_metadata
380,390,"SELECT T1.colors, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.id BETWEEN 1 AND 20","
SELECT colors, format
FROM cards
JOIN legalities ON cards.uuid = legalities.uuid
WHERE cards.id BETWEEN 1 AND 20;",1,card_games,best_pred_metadata
381,391,SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Artifact' AND T1.colors = 'B',"
SELECT c.name
FROM cards c
JOIN foreign_data f ON c.uuid = f.uuid
WHERE c.types LIKE '%Artifact%'
AND c.colors LIKE '%Black%'
AND f.language IS NOT NULL;",0,card_games,best_pred_metadata
382,393,SELECT COUNT(id) FROM cards WHERE (cardKingdomId IS NULL OR cardKingdomFoilId IS NULL) AND artist = 'John Avon',"
SELECT COUNT(*)
FROM cards
WHERE artist = 'John Avon'
AND hasFoil = 1
AND (edhrecRank IS NULL OR edhrecRank > 1000)

This query selects the count of cards designed by John Avon that are foil and have an EDHREC rank of null or greater than 1000, indicating that they are not powerful.",0,card_games,best_pred_metadata
383,394,SELECT COUNT(id) FROM cards WHERE borderColor = 'white' AND cardKingdomId IS NOT NULL AND cardKingdomFoilId IS NOT NULL,"
SELECT COUNT(*)
FROM cards
WHERE borderColor = 'white' AND power IS NOT NULL;",0,card_games,best_pred_metadata
384,395,SELECT COUNT(id) FROM cards WHERE hAND = '-1' AND artist = 'UDON' AND Availability = 'print' AND type = 'mtgo',"
SELECT COUNT(*)
FROM cards
WHERE artist = 'UDON'
AND availability LIKE '%mtgo%'
AND hand = '-1';",0,card_games,best_pred_metadata
385,396,SELECT COUNT(id) FROM cards WHERE frameVersion = 1993 AND availability = 'paper' AND hasContentWarning = 1,"
SELECT COUNT(*)
FROM cards
WHERE frameVersion = '1993'
AND availability LIKE '%paper%'
AND hasContentWarning = 1;",1,card_games,best_pred_metadata
386,397,"SELECT manaCost FROM cards WHERE availability = 'mtgo,paper' AND borderColor = 'black' AND frameVersion = 2003 AND layout = 'normal'","
SELECT manaCost
FROM cards
WHERE layout = 'normal'
AND frameVersion = '2003'
AND borderColor = 'black'
AND availability LIKE '%paper%'
AND availability LIKE '%mtgo%';",1,card_games,best_pred_metadata
387,398,SELECT SUM(manaCost) FROM cards WHERE artist = 'Rob Alexander',"
SELECT SUM(convertedManaCost) AS total_unconverted_mana_cost
FROM cards
WHERE artist = 'Rob Alexander';",0,card_games,best_pred_metadata
388,392,SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'uncommon' ORDER BY T2.date ASC LIMIT 3,"
SELECT name
FROM cards
WHERE rarity = 'uncommon'
ORDER BY (SELECT MIN(date) FROM rulings WHERE rulings.uuid = cards.uuid)
LIMIT 3;",0,card_games,best_pred_metadata
389,399,"SELECT DISTINCT subtypes, supertypes FROM cards WHERE availability = 'arena' AND subtypes IS NOT NULL AND supertypes IS NOT NULL","
SELECT DISTINCT type FROM cards WHERE mtgArenaId IS NOT NULL;",0,card_games,best_pred_metadata
390,400,SELECT setCode FROM set_translations WHERE language = 'Spanish',"
SELECT s.code
FROM sets s
JOIN set_translations st ON s.code = st.setCode
WHERE st.language = 'Spanish';",1,card_games,best_pred_metadata
391,401,SELECT SUM(CASE WHEN hAND = '+3' THEN 1.0 ELSE 0 END) / COUNT(id) * 100 FROM cards WHERE frameEffects = 'legendary',"
SELECT
    (COUNT(*) * 100.0) / (SELECT COUNT(*) FROM cards WHERE frameEffects LIKE '%legendary%') AS percentage
FROM
    cards
WHERE
    frameEffects LIKE '%legendary%'
    AND hand LIKE '%+3%'
    AND hand LIKE '%starting%'
    AND hand LIKE '%maximum%';",1,card_games,best_pred_metadata
392,402,SELECT CAST(SUM(CASE WHEN isTextless = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM cards WHERE isStorySpotlight = 1,"
SELECT id, (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM cards WHERE isStorySpotlight = 1)) AS percentage
FROM cards
WHERE isStorySpotlight = 1 AND text IS NOT NULL
GROUP BY id
ORDER BY id;",0,card_games,best_pred_metadata
393,403,"SELECT ( SELECT CAST(SUM(CASE WHEN language = 'Spanish' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM foreign_data ), name FROM foreign_data WHERE language = 'Spanish'","
SELECT
    name,
    (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM foreign_data)) AS percentage_in_spanish
FROM
    foreign_data
WHERE
    language = 'Spanish'
GROUP BY
    name
ORDER BY
    percentage_in_spanish DESC;",0,card_games,best_pred_metadata
394,404,SELECT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.baseSetSize = 309,"
SELECT language
FROM set_translations
WHERE setCode = (SELECT code FROM sets WHERE totalSetSize = 309);",1,card_games,best_pred_metadata
395,405,SELECT COUNT(T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Portuguese (Brazil)' AND T1.block = 'Commander',"
SELECT COUNT(*)
FROM sets
JOIN set_translations ON sets.code = set_translations.setCode
WHERE set_translations.language = 'Brazilian Portuguese' AND sets.block = 'Commander';",0,card_games,best_pred_metadata
396,406,SELECT T1.id FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid INNER JOIN legalities AS T3 ON T1.uuid = T3.uuid WHERE T3.status = 'Legal' AND T1.types = 'Creature',"
SELECT c.id
FROM cards c
JOIN legalities l ON c.uuid = l.uuid
WHERE c.type LIKE '%Creature%';",0,card_games,best_pred_metadata
397,407,"SELECT T1.subtypes, T1.supertypes FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'German' AND T1.subtypes IS NOT NULL AND T1.supertypes IS NOT NULL","
SELECT DISTINCT type
FROM foreign_data
WHERE language = 'German';",0,card_games,best_pred_metadata
398,408,SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE (T1.power IS NULL OR T1.power LIKE '%*%') AND T2.text LIKE '%triggered ability%',"
SELECT COUNT(*)
FROM cards
WHERE power IS NULL
AND text LIKE '%triggered ability%';",0,card_games,best_pred_metadata
399,409,SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid INNER JOIN rulings AS T3 ON T1.uuid = T3.uuid WHERE T2.format = 'premodern' AND T3.text = 'This is a triggered mana ability.' AND T1.Side IS NULL,"
SELECT COUNT(*)
FROM cards
WHERE id IN (
    SELECT DISTINCT uuid
    FROM legalities
    WHERE format = 'pre-modern'
)
AND id IN (
    SELECT DISTINCT uuid
    FROM rulings
    WHERE text = 'This is a triggered mana ability'
)
AND layout NOT IN ('transform', 'modal_dfc', 'double_faced_token', 'meld', 'flip', 'reversible_card');",0,card_games,best_pred_metadata
400,410,SELECT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Erica Yang' AND T2.format = 'pauper' AND T1.availability = 'paper',"
SELECT c.id
FROM cards c
JOIN legalities l ON c.uuid = l.uuid
WHERE c.artist = 'Erica Yang'
AND l.format = 'pauper'
AND l.status = 'legal'
AND c.availability LIKE '%paper%';",0,card_games,best_pred_metadata
401,411,SELECT DISTINCT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.flavorText LIKE '%DAS perfekte Gegenmittel zu einer dichten Formation%',"
SELECT artist FROM cards WHERE text = ""Das perfekte Gegenmittel zu einer dichten Formation"";",0,card_games,best_pred_metadata
402,412,SELECT name FROM foreign_data WHERE uuid IN ( SELECT uuid FROM cards WHERE types = 'Creature' AND layout = 'normal' AND borderColor = 'black' AND artist = 'Matthew D. Wilson' ) AND language = 'French',"
SELECT foreign_data.name
FROM foreign_data
JOIN cards ON foreign_data.uuid = cards.uuid
WHERE cards.type = 'Creature'
AND cards.layout = 'normal'
AND cards.borderColor = 'black'
AND cards.artist = 'Matthew D. Wilson'
AND foreign_data.language = 'French';",0,card_games,best_pred_metadata
403,413,SELECT COUNT(DISTINCT T1.id) FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'rare' AND T2.date = '2009-01-10',"
SELECT COUNT(*)
FROM cards
WHERE rarity IS NOT NULL
AND id IN (
    SELECT uuid
    FROM rulings
    WHERE date = '2009-10-01'
    AND text IS NOT NULL
);",1,card_games,best_pred_metadata
404,414,SELECT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.block = 'Ravnica' AND T1.baseSetSize = 180,"
SELECT language
FROM set_translations
WHERE setCode = (
    SELECT code
    FROM sets
    WHERE baseSetSize = 180 AND block = 'Ravnica'
);",1,card_games,best_pred_metadata
405,415,SELECT CAST(SUM(CASE WHEN T1.hasContentWarning = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'commander' AND T2.status = 'Legal',"
SELECT
    (COUNT(DISTINCT c.uuid) * 100.0 /
    (SELECT COUNT(DISTINCT l.uuid)
     FROM legalities l
     WHERE l.format = 'commander' AND l.status = 'legal')) AS percentage_no_content_warning
FROM
    cards c
LEFT JOIN
    legalities l ON c.uuid = l.uuid
WHERE
    l.format = 'commander' AND l.status = 'legal' AND c.hasContentWarning = 0;",0,card_games,best_pred_metadata
406,416,SELECT CAST(SUM(CASE WHEN T2.language = 'French' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.power IS NULL OR T1.power LIKE '%*%',"
SELECT
    (COUNT(DISTINCT cards.uuid) * 100.0 / (SELECT COUNT(DISTINCT uuid) FROM cards WHERE power IS NULL)) AS percentage_without_power_in_french
FROM
    cards
JOIN
    foreign_data ON cards.uuid = foreign_data.uuid
WHERE
    cards.power IS NULL AND foreign_data.language = 'French';",0,card_games,best_pred_metadata
407,417,SELECT CAST(SUM(CASE WHEN T2.language = 'Japanese' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.type = 'expansion',"
SELECT
    (COUNT(DISTINCT st.setCode) * 100.0 / (SELECT COUNT(DISTINCT s.code) FROM sets s WHERE s.code IN (SELECT DISTINCT setCode FROM set_translations WHERE language = 'Japanese'))) AS percentage_expansion_sets
FROM
    sets s
JOIN
    set_translations st ON s.code = st.setCode
WHERE
    st.language = 'Japanese'
    AND s.type = 'expansion';",0,card_games,best_pred_metadata
408,418,SELECT DISTINCT availability FROM cards WHERE artist = 'Daren Bader',"
SELECT printings
FROM cards
WHERE artist = 'Daren Bader';",0,card_games,best_pred_metadata
409,419,SELECT COUNT(id) FROM cards WHERE edhrecRank > 12000 AND borderColor = 'borderless',"
SELECT COUNT(*)
FROM cards
WHERE colorIdentity IS NOT NULL
AND borderColor IS NULL
AND edhrecRank > 12000;",0,card_games,best_pred_metadata
410,420,SELECT COUNT(id) FROM cards WHERE isOversized = 1 AND isReprint = 1 AND isPromo = 1,"
SELECT COUNT(*)
FROM cards
WHERE isOversized = 1 AND isReprint = 1 AND isPromo = 1;",1,card_games,best_pred_metadata
411,421,SELECT name FROM cards WHERE (power IS NULL OR power LIKE '%*%') AND promoTypes = 'arenaleague' ORDER BY name LIMIT 3,"
SELECT name, power
FROM cards
WHERE power IS NULL AND promoTypes LIKE '%arena league%'
ORDER BY name
LIMIT 3;",0,card_games,best_pred_metadata
412,422,SELECT language FROM foreign_data WHERE multiverseid = 149934,"
SELECT language
FROM foreign_data
WHERE multiverseid = 149934;",1,card_games,best_pred_metadata
413,423,"SELECT cardKingdomFoilId, cardKingdomId FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL ORDER BY cardKingdomFoilId LIMIT 3","
SELECT c1.id AS kingdom_foil_id, c2.id AS kingdom_card_id
FROM cards c1
JOIN cards c2 ON c1.cardKingdomFoilId = c2.cardKingdomId
ORDER BY c1.cardKingdomFoilId
LIMIT 3;",0,card_games,best_pred_metadata
414,424,SELECT CAST(SUM(CASE WHEN isTextless = 1 AND layout = 'normal' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM cards,"
SELECT COUNT(*) * 1.0 / (SELECT COUNT(*) FROM cards)
FROM cards
WHERE layout != 'normal' OR text IS NULL;",0,card_games,best_pred_metadata
415,425,"SELECT id FROM cards WHERE subtypes = 'Angel,Wizard' AND side IS NULL","
SELECT number
FROM cards
WHERE layout != 'double-faced'
AND subtypes LIKE '%Angel%'
AND subtypes LIKE '%Wizard%';",0,card_games,best_pred_metadata
416,426,SELECT name FROM sets WHERE mtgoCode IS NULL ORDER BY name LIMIT 3,"
SELECT code, name
FROM sets
WHERE isOnlineOnly = 0
ORDER BY name
LIMIT 3;",0,card_games,best_pred_metadata
417,427,SELECT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.mcmName = 'Archenemy' AND T2.setCode = 'ARC',"
SELECT language
FROM set_translations
WHERE setCode = 'ARC' AND setCode IN (SELECT code FROM sets WHERE name = 'Archenemy');",1,card_games,best_pred_metadata
418,428,"SELECT T1.name, T2.translation FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.id = 5 GROUP BY T1.name, T2.translation","
SELECT s.name, st.translation
FROM sets s
JOIN set_translations st ON s.code = st.setCode
WHERE s.id = 5;",0,card_games,best_pred_metadata
419,429,"SELECT T2.language, T1.type FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.id = 206","
SELECT language, type
FROM sets
JOIN set_translations ON sets.code = set_translations.setCode
WHERE sets.id = 206;",0,card_games,best_pred_metadata
420,430,"SELECT T1.name, T1.id FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.block = 'Shadowmoor' AND T2.language = 'Italian' ORDER BY T1.id LIMIT 2","
SELECT id, name
FROM sets
WHERE code IN (
    SELECT DISTINCT setCode
    FROM foreign_data
    WHERE language = 'Italian'
)
AND block = 'Shadowmoor'
ORDER BY name
LIMIT 2;",0,card_games,best_pred_metadata
421,431,"SELECT T1.name, T1.id FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Japanese' AND T1.isFoilOnly = 1 AND T1.isForeignOnly = 0","
SELECT s.id
FROM sets s
JOIN cards c ON c.setCode = s.code
WHERE s.isForeignOnly = 1 AND c.hasFoil = 1 AND c.language = 'Japanese'

This query joins the sets and cards tables based on the setCode column. It then filters the results to include only sets that are foreign-only (isForeignOnly = 1), have foil cards (hasFoil = 1), and have cards with Japanese writing (language = 'Japanese'). The set ID is then selected in the result.",0,card_games,best_pred_metadata
422,432,SELECT T1.id FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Russian' GROUP BY T1.baseSetSize ORDER BY COUNT(T1.id) DESC LIMIT 1,"
SELECT s.name, COUNT(c.id) as card_count
FROM sets s
JOIN set_translations st ON s.code = st.setCode
JOIN cards c ON s.code = c.setCode
WHERE st.language = 'Russian'
GROUP BY s.name
ORDER BY card_count DESC
LIMIT 1;",0,card_games,best_pred_metadata
423,433,SELECT CAST(SUM(CASE WHEN T2.language = 'Chinese Simplified' AND T1.isOnlineOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode,"
SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM cards WHERE language = 'Chinese Simplified' AND isOnlineOnly = 1) AS percentage_online_chinese_simplified_cards FROM cards WHERE language = 'Chinese Simplified' AND isOnlineOnly = 1;",0,card_games,best_pred_metadata
424,434,SELECT COUNT(T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.language = 'Japanese'  AND (T1.mtgoCode IS NULL OR T1.mtgoCode = ''),"
SELECT COUNT(*)
FROM sets
WHERE code IN (
    SELECT setCode
    FROM set_translations
    WHERE language = 'Japanese'
    AND setCode NOT IN (
        SELECT code
        FROM sets
        WHERE mtgoCode IS NOT NULL
    )
)",1,card_games,best_pred_metadata
425,435,SELECT id FROM cards WHERE borderColor = 'black' GROUP BY id,"
SELECT id FROM cards WHERE borderColor = 'Black';",0,card_games,best_pred_metadata
426,436,SELECT id FROM cards WHERE frameEffects = 'extendedart' GROUP BY id,"
SELECT id FROM cards WHERE frameEffects LIKE '%extendedart%';",0,card_games,best_pred_metadata
427,437,SELECT id FROM cards WHERE borderColor = 'black' AND isFullArt = 1,"
SELECT name FROM cards WHERE borderColor = 'black' AND isFullArt = 1;",0,card_games,best_pred_metadata
428,438,SELECT language FROM set_translations WHERE id = 174,"
SELECT language FROM set_translations WHERE setCode = '174';",0,card_games,best_pred_metadata
429,439,SELECT name FROM sets WHERE code = 'ALL',"
SELECT name FROM sets WHERE code = 'ALL';",1,card_games,best_pred_metadata
430,440,SELECT DISTINCT language FROM foreign_data WHERE name = 'A Pedra Fellwar',"
SELECT language
FROM foreign_data
WHERE uuid = (SELECT uuid FROM cards WHERE name = 'A Pedra Fellwar');",0,card_games,best_pred_metadata
431,441,SELECT T2.setCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.releaseDate = '2007-07-13',"
SELECT code FROM sets WHERE releaseDate = '2007-07-13';",0,card_games,best_pred_metadata
432,442,"SELECT DISTINCT T1.baseSetSize, T2.setCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.block IN ('Masques', 'Mirage')","
SELECT baseSetSize, code
FROM sets
WHERE block IN ('Masques', 'Mirage');",0,card_games,best_pred_metadata
433,443,SELECT T2.setCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.type = 'expansion' GROUP BY T2.setCode,"
SELECT code FROM sets WHERE type = 'expansion';",0,card_games,best_pred_metadata
434,444,"SELECT DISTINCT T1.name, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'boros'","
SELECT name, type
FROM foreign_data
WHERE uuid IN (
    SELECT uuid
    FROM cards
    WHERE watermark = 'boros'
);",0,card_games,best_pred_metadata
435,445,"SELECT DISTINCT T2.language, T2.flavorText FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'colorpie'","
SELECT language, flavorText, type
FROM foreign_data
WHERE uuid IN (
    SELECT uuid
    FROM cards
    WHERE watermark = 'colorpie'
)",0,card_games,best_pred_metadata
436,446,"SELECT CAST(SUM(CASE WHEN T1.convertedManaCost = 10 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id), T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Abyssal Horror'","
SELECT
    (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM cards WHERE setCode = 'Abyssal Horror')) AS percentage
FROM
    cards
WHERE
    convertedManaCost = 10 AND setCode = 'Abyssal Horror';",0,card_games,best_pred_metadata
437,447,SELECT T2.setCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.type = 'commander',"
SELECT code FROM sets WHERE type = 'expansion' AND block = 'commander';",0,card_games,best_pred_metadata
438,448,"SELECT DISTINCT T1.name, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'abzan'","
SELECT name, type
FROM foreign_data
WHERE uuid IN (
    SELECT uuid
    FROM cards
    WHERE watermark = 'abzan'
);",0,card_games,best_pred_metadata
439,449,"SELECT DISTINCT T2.language, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'azorius'","
SELECT language, type
FROM foreign_data
WHERE uuid IN (
    SELECT uuid
    FROM cards
    WHERE watermark = 'azorius'
);",0,card_games,best_pred_metadata
440,450,SELECT SUM(CASE WHEN artist = 'Aaron Miller' AND cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL THEN 1 ELSE 0 END) FROM cards,"
SELECT COUNT(*)
FROM cards
WHERE artist = 'Aaron Miller'
AND (edhrecRank IS NOT NULL OR convertedManaCost >= 10)

This query selects the count of cards designed by Aaron Miller that are either highly ranked on EDHREC or have a converted mana cost of 10 or more, indicating their power level.",0,card_games,best_pred_metadata
441,451,SELECT SUM(CASE WHEN availability = 'paper' AND hAND LIKE '+%' AND hAND != '+0' THEN 1 ELSE 0 END) FROM cards,"
SELECT COUNT(*)
FROM cards
WHERE availability = 'paper'
AND hand IS NOT NULL
AND CAST(hand AS INTEGER) > 0;",0,card_games,best_pred_metadata
442,452,SELECT DISTINCT name FROM cards WHERE isTextless = 0,"
SELECT name FROM cards WHERE text IS NOT NULL;",0,card_games,best_pred_metadata
443,453,SELECT DISTINCT manaCost FROM cards WHERE name = 'Ancestor''s Chosen',"
SELECT convertedManaCost FROM cards WHERE name = ""Ancestor's Chosen"";",0,card_games,best_pred_metadata
444,454,SELECT SUM(CASE WHEN power LIKE '%*%' OR power IS NULL THEN 1 ELSE 0 END) FROM cards WHERE borderColor = 'white',"
SELECT COUNT(*)
FROM cards
WHERE borderColor = 'white' AND power IS NULL;",0,card_games,best_pred_metadata
445,455,SELECT DISTINCT name FROM cards WHERE isPromo = 1 AND side IS NOT NULL,"
SELECT name FROM cards WHERE isPromo = 1 AND layout LIKE '%double-faced%' AND artist LIKE '%promotional painting%';",0,card_games,best_pred_metadata
446,456,"SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer'","
SELECT type FROM cards WHERE name = 'Molimo, Maro-Sorcerer';",0,card_games,best_pred_metadata
447,457,SELECT DISTINCT purchaseUrls FROM cards WHERE promoTypes = 'bundle',"
SELECT purchaseUrls
FROM cards
WHERE promoTypes LIKE '%bundle%';",1,card_games,best_pred_metadata
448,458,"SELECT COUNT(CASE WHEN availability LIKE '%arena,mtgo%' THEN 1 ELSE NULL END) FROM cards","
SELECT COUNT(DISTINCT artist)
FROM cards
WHERE borderColor = 'Black'
AND availability LIKE '%arena%'
AND availability LIKE '%mtgo%';",0,card_games,best_pred_metadata
449,459,"SELECT name FROM cards WHERE name IN ('Serra Angel', 'Shrine Keeper') ORDER BY convertedManaCost DESC LIMIT 1","
SELECT name, convertedManaCost
FROM cards
WHERE name IN ('Serra Angel', 'Shrine Keeper')
ORDER BY convertedManaCost DESC
LIMIT 1;",0,card_games,best_pred_metadata
450,460,"SELECT artist FROM cards WHERE flavorName = 'Battra, Dark Destroyer'","
SELECT artist
FROM cards
WHERE flavorName = ""Battra, Dark Destroyer"";",1,card_games,best_pred_metadata
451,461,SELECT name FROM cards WHERE frameVersion = 2003 ORDER BY convertedManaCost DESC LIMIT 3,"
SELECT name, convertedManaCost
FROM cards
WHERE frameVersion = '2003'
ORDER BY convertedManaCost DESC
LIMIT 3;",0,card_games,best_pred_metadata
452,462,SELECT translation FROM set_translations WHERE setCode IN ( SELECT setCode FROM cards WHERE name = 'Ancestor''s Chosen' ) AND language = 'Italian',"
SELECT st.translation
FROM sets s
JOIN set_translations st ON s.code = st.setCode
JOIN cards c ON s.code = c.setCode
WHERE c.name = 'Ancestor''s Chosen' AND st.language = 'Italian';",0,card_games,best_pred_metadata
453,463,SELECT COUNT(DISTINCT translation) FROM set_translations WHERE setCode IN ( SELECT setCode FROM cards WHERE name = 'Angel of Mercy' ) AND translation IS NOT NULL,"
SELECT COUNT(*)
FROM set_translations
WHERE setCode IN (
    SELECT setCode
    FROM cards
    WHERE name LIKE '%Angel of Mercy%'
);",0,card_games,best_pred_metadata
454,464,SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T2.translation = 'Hauptset Zehnte Edition',"
SELECT name FROM cards WHERE setCode = 'Hauptset Zehnte Edition';",0,card_games,best_pred_metadata
455,465,"SELECT IIF(SUM(CASE WHEN T2.language = 'Korean' AND T2.translation IS NOT NULL THEN 1 ELSE 0 END) > 0, 'YES', 'NO') FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Ancestor''s Chosen'","
SELECT COUNT(*)
FROM foreign_data
WHERE uuid IN (
    SELECT uuid
    FROM cards
    WHERE name LIKE '%Ancestor\'s Chosen%'
) AND language = 'Korean';",0,card_games,best_pred_metadata
456,466,SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T2.translation = 'Hauptset Zehnte Edition' AND T1.artist = 'Adam Rex',"
SELECT COUNT(*)
FROM cards
WHERE setCode = 'Hauptset Zehnte Edition' AND artist = 'Adam Rex';",0,card_games,best_pred_metadata
457,467,SELECT T1.baseSetSize FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation = 'Hauptset Zehnte Edition',"
SELECT COUNT(*)
FROM cards
WHERE setCode = (SELECT code FROM sets WHERE name = 'Hauptset Zehnte Edition')
AND id IN (SELECT id FROM cards WHERE setCode = (SELECT code FROM sets WHERE name = 'Hauptset Zehnte Edition' AND isFoilOnly = 0 AND isForeignOnly = 0 AND isNonFoilOnly = 1))

The query first selects the code of the set ""Hauptset Zehnte Edition"" from the sets table. Then, it selects the cards that have this setCode and are not foil, foreign, or non-foil only. Finally, it counts the number of such cards.",0,card_games,best_pred_metadata
458,468,SELECT T2.translation FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.name = 'Eighth Edition' AND T2.language = 'Chinese Simplified',"
SELECT translation
FROM set_translations
WHERE setCode = (SELECT code FROM sets WHERE name = 'Eighth Edition')
AND language = 'Simplified Chinese';",0,card_games,best_pred_metadata
459,469,"SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Angel of Mercy'","
SELECT s.isOnlineOnly
FROM sets s
JOIN cards c ON s.code = c.setCode
WHERE c.name = 'Angel of Mercy';",0,card_games,best_pred_metadata
460,470,SELECT DISTINCT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Ancestor''s Chosen',"
SELECT releaseDate FROM sets WHERE code = (SELECT setCode FROM cards WHERE name = 'Ancestor\'s Chosen');",0,card_games,best_pred_metadata
461,471,SELECT T1.type FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation = 'Hauptset Zehnte Edition',"
SELECT type FROM sets WHERE name = 'Hauptset Zehnte Edition';",0,card_games,best_pred_metadata
462,472,SELECT COUNT(DISTINCT T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.block = 'Ice Age' AND T2.language = 'Italian' AND T2.translation IS NOT NULL,"
SELECT COUNT(*)
FROM sets
WHERE block = 'Ice Age'
AND EXISTS (
    SELECT 1
    FROM set_translations
    WHERE set_translations.setCode = sets.code
    AND set_translations.language = 'Italian'
);",0,card_games,best_pred_metadata
463,474,SELECT COUNT(T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation IS NOT NULL AND T1.baseSetSize < 10 AND T2.language = 'Italian',"
SELECT COUNT(*)
FROM sets
WHERE EXISTS (
    SELECT 1
    FROM set_translations
    WHERE set_translations.setCode = sets.code
    AND set_translations.language = 'Italian'
)
AND sets.baseSetSize < 10;",1,card_games,best_pred_metadata
464,475,SELECT SUM(CASE WHEN T1.borderColor = 'black' THEN 1 ELSE 0 END) FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap',"
SELECT COUNT(*)
FROM cards
WHERE setCode = 'Coldsnap' AND borderColor = 'Black';",0,card_games,best_pred_metadata
465,476,SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap' ORDER BY T1.convertedManaCost DESC LIMIT 1,"
SELECT name
FROM cards
WHERE setCode = 'Coldsnap'
ORDER BY convertedManaCost DESC
LIMIT 1;",0,card_games,best_pred_metadata
466,477,SELECT T1.artist FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE (T2.name = 'Coldsnap' AND T1.artist = 'Chippy') OR (T2.name = 'Coldsnap' AND T1.artist = 'Aaron Miller') OR (T2.name = 'Coldsnap' AND T1.artist = 'Jeremy Jarvis') GROUP BY T1.artist,"
SELECT artist
FROM cards
WHERE setCode = 'Coldsnap' AND artist IN ('Jeremy Jarvis', 'Aaron Miller', 'Chippy');",0,card_games,best_pred_metadata
467,478,SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap' AND T1.number = 4,"
SELECT * FROM cards WHERE number = 4 AND setCode = 'Coldsnap';",0,card_games,best_pred_metadata
468,361,SELECT COUNT(DISTINCT T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Restricted' AND T1.isTextless = 0,"
SELECT COUNT(*)
FROM cards
WHERE EXISTS (
    SELECT 1
    FROM legalities
    WHERE legalities.uuid = cards.uuid
    AND legalities.status = 'restricted'
)
AND text IS NOT NULL;",0,card_games,best_pred_metadata
469,479,SELECT SUM(CASE WHEN T1.power LIKE '%*%' OR T1.power IS NULL THEN 1 ELSE 0 END) FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap' AND T1.convertedManaCost > 5,"
SELECT COUNT(*)
FROM cards
WHERE convertedManaCost > 5
AND setCode = 'Coldsnap'
AND power IS NULL;",0,card_games,best_pred_metadata
470,480,SELECT T2.flavorText FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Ancestor''s Chosen' AND T2.language = 'Italian',"
SELECT flavorText
FROM foreign_data
JOIN cards ON foreign_data.uuid = cards.uuid
WHERE cards.name = ""Ancestor's Chosen"" AND foreign_data.language = ""Italian"";",0,card_games,best_pred_metadata
471,481,SELECT T2.language FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Ancestor''s Chosen' AND T2.flavorText IS NOT NULL,"
SELECT language
FROM foreign_data
WHERE name = 'Ancestor\'s Chosen' AND flavorText IS NOT NULL;",0,card_games,best_pred_metadata
472,482,SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Ancestor''s Chosen' AND T2.language = 'German',"
SELECT type
FROM foreign_data
WHERE name = 'Ancestor\'s Chosen' AND language = 'German';",0,card_games,best_pred_metadata
473,483,SELECT DISTINCT T1.text FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Italian',"
SELECT f.text AS Italian_Text_Ruling
FROM rulings r
JOIN cards c ON r.uuid = c.uuid
JOIN foreign_data f ON c.uuid = f.uuid
WHERE c.setCode = 'Coldsnap' AND f.language = 'Italian';",0,card_games,best_pred_metadata
474,484,SELECT T2.name FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Italian' ORDER BY T2.convertedManaCost DESC LIMIT 1,"
SELECT f.name
FROM foreign_data f
JOIN cards c ON f.uuid = c.uuid
JOIN sets s ON c.setCode = s.code
WHERE f.language = 'Italian'
AND s.name = 'Coldsnap'
AND c.convertedManaCost = (
    SELECT MAX(convertedManaCost)
    FROM cards
    WHERE setCode = 'Coldsnap'
)",0,card_games,best_pred_metadata
475,485,SELECT T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Reminisce',"
SELECT date FROM rulings WHERE uuid = (SELECT uuid FROM cards WHERE name = 'Reminisce');",0,card_games,best_pred_metadata
476,486,SELECT CAST(SUM(CASE WHEN T1.convertedManaCost = 7 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap',"
SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM cards WHERE setCode = 'Coldsnap')) AS percentage
FROM cards
WHERE setCode = 'Coldsnap' AND convertedManaCost = 7;",0,card_games,best_pred_metadata
477,487,SELECT CAST(SUM(CASE WHEN T1.cardKingdomFoilId IS NOT NULL AND T1.cardKingdomId IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap',"
SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM cards WHERE setCode = 'Coldsnap') AS percentage_of_powerful_cards
FROM cards
WHERE setCode = 'Coldsnap' AND edhrecRank IS NOT NULL AND edhrecRank <= 100;",0,card_games,best_pred_metadata
478,488,"SELECT code FROM sets WHERE releaseDate = '2017-07-14' GROUP BY releaseDate, code","
SELECT code FROM sets WHERE releaseDate = '2017-07-14';",1,card_games,best_pred_metadata
479,489,SELECT keyruneCode FROM sets WHERE code = 'PKHC',"
SELECT keyruneCode FROM sets WHERE code = 'PKHC';",1,card_games,best_pred_metadata
480,490,SELECT mcmId FROM sets WHERE code = 'SS2',"
SELECT mcmId FROM sets WHERE code = 'SS2';",1,card_games,best_pred_metadata
481,491,SELECT mcmName FROM sets WHERE releaseDate = '2017-06-09',"
SELECT mcmName
FROM sets
WHERE releaseDate = '2017-06-09';",1,card_games,best_pred_metadata
482,492,SELECT type FROM sets WHERE name LIKE '%FROM the Vault: Lore%',"
SELECT type FROM sets WHERE name = ""From the Vault: Lore"";",1,card_games,best_pred_metadata
483,493,SELECT parentCode FROM sets WHERE name = 'Commander 2014 Oversized',"
SELECT parentCode FROM sets WHERE name = ""Commander 2014 Oversized"";",1,card_games,best_pred_metadata
484,494,"SELECT T2.text , CASE WHEN T1.hasContentWarning = 1 THEN 'YES' ELSE 'NO' END FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.artist = 'Jim Pavelec'","
SELECT c.name, r.text,
       CASE
           WHEN c.artist IS NULL OR c.artist = '' THEN 'Missing'
           ELSE 'Not Missing'
       END AS artist_status,
       CASE
           WHEN c.text IS NULL OR c.text = '' THEN 'Missing'
           ELSE 'Not Missing'
       END AS text_status
FROM cards c
LEFT JOIN rulings r ON c.uuid = r.uuid
WHERE c.artist = 'Jim Pavelec.'",0,card_games,best_pred_metadata
485,495,SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Evacuation',"
SELECT releaseDate
FROM sets
WHERE code = (
    SELECT setCode
    FROM cards
    WHERE name = 'Evacuation'
);",0,card_games,best_pred_metadata
486,496,SELECT T1.baseSetSize FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation = 'Rinascita di Alara',"
SELECT COUNT(*)
FROM cards
WHERE setCode = (SELECT code FROM sets WHERE name = 'Rinascita di Alara');",0,card_games,best_pred_metadata
487,497,SELECT type FROM sets WHERE code IN ( SELECT setCode FROM set_translations WHERE translation = 'Huitième édition' ),"
SELECT type FROM sets WHERE name = 'Huitième édition';",0,card_games,best_pred_metadata
488,498,SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Tendo Ice Bridge' AND T2.language = 'French' AND T2.translation IS NOT NULL,"
SELECT s.name
FROM sets s
JOIN set_translations st ON s.code = st.setCode
WHERE st.language = 'French'
AND s.code IN (
    SELECT DISTINCT setCode
    FROM cards
    WHERE name = 'Tendo Ice Bridge'
);",0,card_games,best_pred_metadata
489,499,SELECT COUNT(DISTINCT T2.translation) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.name = 'Salvat 2011' AND T2.translation IS NOT NULL,"
SELECT COUNT(*)
FROM set_translations
WHERE setCode = (SELECT code FROM sets WHERE name = 'Salvat 2011');",1,card_games,best_pred_metadata
490,500,SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Fellwar Stone' AND T2.language = 'Japanese' AND T2.translation IS NOT NULL,"
SELECT st.translation
FROM sets s
JOIN cards c ON c.setCode = s.code
JOIN set_translations st ON st.setCode = s.code
WHERE c.name = 'Fellwar Stone' AND st.language = 'Japanese';",0,card_games,best_pred_metadata
491,501,SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Journey into Nyx Hero''s Path' ORDER BY T1.convertedManaCost DESC LIMIT 1,"
SELECT name, convertedManaCost
FROM cards
WHERE setCode = 'Journey into Nyx Hero''s Path'
ORDER BY convertedManaCost DESC
LIMIT 1;",0,card_games,best_pred_metadata
492,502,SELECT T1.releaseDate FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation = 'Ola de frío',"
SELECT releaseDate FROM sets WHERE name = 'Ola de frío';",0,card_games,best_pred_metadata
493,503,SELECT type FROM sets WHERE code IN ( SELECT setCode FROM cards WHERE name = 'Samite Pilgrim' ),"
SELECT sets.type
FROM sets
JOIN cards ON sets.code = cards.setCode
WHERE cards.name = ""Samite Pilgrim"";",1,card_games,best_pred_metadata
494,504,SELECT COUNT(id) FROM cards WHERE setCode IN ( SELECT code FROM sets WHERE name = 'World Championship Decks 2004' ) AND convertedManaCost = 3,"
SELECT COUNT(*)
FROM cards
WHERE setCode = 'World Championship Decks 2004' AND convertedManaCost = 3;",0,card_games,best_pred_metadata
495,505,SELECT translation FROM set_translations WHERE setCode IN ( SELECT code FROM sets WHERE name = 'Mirrodin' ) AND language = 'Chinese Simplified',"
SELECT translation
FROM set_translations
WHERE setCode = (SELECT code FROM sets WHERE name = 'Mirrodin')
AND language = 'Simplified Chinese';",0,card_games,best_pred_metadata
496,506,SELECT CAST(SUM(CASE WHEN isNonFoilOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM sets WHERE code IN ( SELECT setCode FROM set_translations WHERE language = 'Japanese' ),"
SELECT
    (COUNT(DISTINCT c.uuid) * 100.0 / (SELECT COUNT(DISTINCT c.uuid) FROM cards c JOIN set_translations st ON c.setCode = st.setCode WHERE st.language = 'Japanese')) AS percentage_non_foil
FROM
    cards c
JOIN
    set_translations st ON c.setCode = st.setCode
WHERE
    st.language = 'Japanese' AND c.hasNonFoil = 1 AND c.hasFoil = 0;",0,card_games,best_pred_metadata
497,507,SELECT CAST(SUM(CASE WHEN isOnlineOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM sets WHERE code IN ( SELECT setCode FROM set_translations WHERE language = 'Portuguese (Brazil)' ),"
SELECT
    (COUNT(DISTINCT s.code) * 100.0 / (SELECT COUNT(DISTINCT c.setCode) FROM cards c WHERE c.setCode IN (SELECT setCode FROM set_translations WHERE language = 'Brazil Portuguese'))) AS percentage_online_only
FROM
    sets s
WHERE
    s.code IN (SELECT setCode FROM set_translations WHERE language = 'Brazil Portuguese')
    AND s.isOnlineOnly = 1;",0,card_games,best_pred_metadata
498,508,SELECT DISTINCT availability FROM cards WHERE artist = 'Aleksi Briclot' AND isTextless = 1,"
SELECT printings
FROM cards
WHERE artist != 'Aleksi Briclot' AND text IS NOT NULL;",0,card_games,best_pred_metadata
499,509,SELECT id FROM sets ORDER BY baseSetSize DESC LIMIT 1,"
SELECT id FROM sets ORDER BY totalSetSize DESC LIMIT 1;",1,card_games,best_pred_metadata
500,510,SELECT artist FROM cards WHERE side IS NULL ORDER BY convertedManaCost DESC LIMIT 1,"
SELECT artist
FROM cards
WHERE layout != 'double-faced' AND convertedManaCost = (
    SELECT MAX(convertedManaCost)
    FROM cards
    WHERE layout != 'double-faced'
)",0,card_games,best_pred_metadata
501,511,SELECT frameEffects FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL GROUP BY frameEffects ORDER BY COUNT(frameEffects) DESC LIMIT 1,"
SELECT frameEffects, COUNT(*) as frequency
FROM cards
WHERE hasFoil = 1 AND convertedManaCost > 5
GROUP BY frameEffects
ORDER BY frequency DESC
LIMIT 1;",0,card_games,best_pred_metadata
502,512,SELECT SUM(CASE WHEN power LIKE '%*%' OR power IS NULL THEN 1 ELSE 0 END) FROM cards WHERE hasFoil = 0 AND duelDeck = 'a',"
SELECT COUNT(*)
FROM cards
WHERE power IS NULL
AND hasFoil = 0
AND duelDeck = 'A';",0,card_games,best_pred_metadata
503,513,SELECT id FROM sets WHERE type = 'commander' ORDER BY totalSetSize DESC LIMIT 1,"
SELECT id
FROM sets
WHERE type = 'Commander'
ORDER BY totalSetSize DESC
LIMIT 1;",0,card_games,best_pred_metadata
504,514,"SELECT DISTINCT name FROM cards WHERE uuid IN ( SELECT uuid FROM legalities WHERE format = 'duel' ) ORDER BY manaCost DESC LIMIT 0, 10","
SELECT name, convertedManaCost
FROM cards
ORDER BY convertedManaCost DESC
LIMIT 10;",0,card_games,best_pred_metadata
505,515,"SELECT T1.originalReleaseDate, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'mythic' AND T1.originalReleaseDate IS NOT NULL AND T2.status = 'Legal' ORDER BY T1.originalReleaseDate LIMIT 1","
SELECT c.originalReleaseDate, l.format
FROM cards c
JOIN legalities l ON c.uuid = l.uuid
WHERE c.rarity = 'mythic'
ORDER BY c.originalReleaseDate ASC
LIMIT 1;",0,card_games,best_pred_metadata
506,516,SELECT COUNT(T3.id) FROM ( SELECT T1.id FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.artist = 'Volkan Baǵa' AND T2.language = 'French' GROUP BY T1.id ) AS T3,"
SELECT COUNT(*)
FROM cards
JOIN foreign_data ON cards.uuid = foreign_data.uuid
WHERE cards.artist = 'Volkan BaÇµa' AND foreign_data.language = 'French';",0,card_games,best_pred_metadata
507,517,SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid WHERE T1.rarity = 'rare' AND T1.types = 'Enchantment' AND T1.name = 'Abundance' AND T2.status = 'Legal',"
SELECT COUNT(*)
FROM cards
WHERE rarity = 'rare' AND type = 'Enchantment' AND name = 'Abundance'
AND id IN (
    SELECT uuid
    FROM legalities
    GROUP BY uuid
    HAVING COUNT(DISTINCT format) = (SELECT COUNT(*) FROM legalities WHERE status = 'legal')
)",0,card_games,best_pred_metadata
508,518,"SELECT T2.format, T1.name FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid WHERE T2.status = 'Banned' GROUP BY T2.format ORDER BY COUNT(T2.status) DESC LIMIT 1","
SELECT l.format, c.name
FROM legalities l
JOIN cards c ON l.uuid = c.uuid
WHERE l.status = 'banned'
GROUP BY l.format
ORDER BY COUNT(*) DESC
LIMIT 1;",0,card_games,best_pred_metadata
509,519,SELECT language FROM set_translations WHERE id IN ( SELECT id FROM sets WHERE name = 'Battlebond' ),"
SELECT language
FROM set_translations
WHERE setCode = (SELECT code FROM sets WHERE name = 'Battlebond');",0,card_games,best_pred_metadata
510,520,"SELECT T1.artist, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid GROUP BY T1.artist ORDER BY COUNT(T1.id) ASC LIMIT 1","
SELECT artist, format
FROM cards
JOIN legalities ON cards.uuid = legalities.uuid
WHERE artist = (
    SELECT artist
    FROM cards
    GROUP BY artist
    ORDER BY COUNT(*) ASC
    LIMIT 1
)",0,card_games,best_pred_metadata
511,521,SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid WHERE T1.frameVersion = 1997 AND T1.hasContentWarning = 1 AND T1.artist = 'D. Alexander Gregory' AND T2.format = 'legacy',"
SELECT l.status
FROM cards c
JOIN legalities l ON c.uuid = l.uuid
WHERE c.frameVersion = '1997'
AND (c.artist = 'D. Alexander Gregory' OR c.artist = 'Wizards of the Coast')
AND c.hasContentWarning = 1
AND l.format = 'legacy';",0,card_games,best_pred_metadata
512,522,"SELECT T1.name, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid WHERE T1.edhrecRank = 1 AND T2.status = 'Banned' GROUP BY T1.name, T2.format","
SELECT c.name, l.format
FROM cards c
JOIN legalities l ON c.uuid = l.uuid
WHERE c.edhrecRank = 1 AND l.status = 'Banned'",0,card_games,best_pred_metadata
513,523,"SELECT (CAST(SUM(T1.id) AS REAL) / COUNT(T1.id)) / 4, T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.id = T2.id WHERE T1.releaseDate BETWEEN '2012-01-01' AND '2015-12-31' GROUP BY T1.releaseDate ORDER BY COUNT(T2.language) DESC LIMIT 1","
SELECT AVG(COUNT(s.code)) AS annual_average_sets, f.language
FROM sets s
JOIN cards c ON s.code = c.setCode
JOIN foreign_data f ON c.uuid = f.uuid
WHERE s.releaseDate BETWEEN '2012-01-01' AND '2015-12-31'
GROUP BY f.language;",0,card_games,best_pred_metadata
514,524,SELECT DISTINCT artist FROM cards WHERE availability = 'arena' AND BorderColor = 'black',"
SELECT artist
FROM cards
WHERE borderColor = 'black' AND isOnlineOnly = 1 AND availability LIKE '%mtgArena%';",0,card_games,best_pred_metadata
515,525,SELECT uuid FROM legalities WHERE format = 'oldschool' AND (status = 'Banned' OR status = 'Restricted'),"
SELECT uuid
FROM legalities
WHERE format = 'old school' AND status IN ('restricted', 'banned');",0,card_games,best_pred_metadata
516,526,SELECT COUNT(id) FROM cards WHERE artist = 'Matthew D. Wilson' AND availability = 'paper',"
SELECT COUNT(*)
FROM cards
WHERE artist = 'Matthew D. Wilson'
AND availability = 'paper';",1,card_games,best_pred_metadata
517,527,SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.artist = 'Kev Walker' ORDER BY T2.date DESC,"
SELECT r.text, r.date
FROM rulings r
JOIN cards c ON r.uuid = c.uuid
WHERE c.name = 'Kev Walker' AND c.artist = 'Kev Walker'
ORDER BY r.date DESC;",0,card_games,best_pred_metadata
518,528,"SELECT DISTINCT T2.name , CASE WHEN T1.status = 'Legal' THEN T1.format ELSE NULL END FROM legalities AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid WHERE T2.setCode IN ( SELECT code FROM sets WHERE name = 'Hour of Devastation' )","
SELECT c.name, l.format, l.status
FROM cards c
JOIN legalities l ON c.uuid = l.uuid
WHERE c.setCode = 'HOU';",0,card_games,best_pred_metadata
519,529,SELECT name FROM sets WHERE code IN ( SELECT setCode FROM set_translations WHERE language = 'Korean' AND language NOT LIKE '%Japanese%' ),"
SELECT s.name
FROM sets s
LEFT JOIN set_translations st_japanese ON s.code = st_japanese.setCode AND st_japanese.language = 'Japanese'
LEFT JOIN set_translations st_korean ON s.code = st_korean.setCode AND st_korean.language = 'Korean'
WHERE st_japanese.setCode IS NULL AND st_korean.setCode IS NOT NULL;",0,card_games,best_pred_metadata
520,530,"SELECT DISTINCT T1.frameVersion, T1.name , IIF(T2.status = 'Banned', T1.name, 'NO') FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Allen Williams'","
SELECT s.frameVersion, c.name
FROM cards c
JOIN foreign_data fd ON c.uuid = fd.uuid
JOIN legalities l ON c.uuid = l.uuid
WHERE c.artist = 'Allen Williams' AND l.status = 'Banned'
GROUP BY s.frameVersion, c.name;",0,card_games,best_pred_metadata
521,531,"SELECT DisplayName FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') AND Reputation = ( SELECT MAX(Reputation) FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') )","
SELECT u.DisplayName, u.Reputation
FROM users u
WHERE u.DisplayName IN ('Harlan', 'Jarrod Dixon')
ORDER BY u.Reputation DESC
LIMIT 1;",0,codebase_community,best_pred_metadata
522,532,"SELECT DisplayName FROM users WHERE STRFTIME('%Y', CreationDate) = '2014'","
SELECT DisplayName
FROM users
WHERE strftime('%Y', CreationDate) = '2014';",1,codebase_community,best_pred_metadata
523,533,SELECT COUNT(Id) FROM users WHERE date(LastAccessDate) > '2014-09-01',"
SELECT COUNT(*)
FROM users
WHERE LastAccessDate > '2014-09-01';",0,codebase_community,best_pred_metadata
524,534,SELECT DisplayName FROM users WHERE Views = ( SELECT MAX(Views) FROM users ),"
SELECT DisplayName
FROM users
ORDER BY Views DESC
LIMIT 1;",1,codebase_community,best_pred_metadata
525,535,SELECT COUNT(Id) FROM users WHERE Upvotes > 100 AND Downvotes > 1,"
SELECT COUNT(*)
FROM users
WHERE UpVotes > 100 AND DownVotes > 1;",1,codebase_community,best_pred_metadata
526,536,"SELECT COUNT(id) FROM users WHERE STRFTIME('%Y', CreationDate) > '2013' AND Views > 10","
SELECT COUNT(*)
FROM users
WHERE Views > 10 AND CreationDate > '2013-12-31';",0,codebase_community,best_pred_metadata
527,537,SELECT COUNT(T1.id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie',"
SELECT COUNT(*)
FROM posts
WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie');",1,codebase_community,best_pred_metadata
528,538,SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie',"
SELECT Title
FROM posts
WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie');",1,codebase_community,best_pred_metadata
529,539,SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts',"
SELECT users.DisplayName
FROM posts
JOIN users ON posts.OwnerUserId = users.Id
WHERE posts.Title = 'Eliciting priors from experts';",1,codebase_community,best_pred_metadata
530,540,SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie' ORDER BY T1.ViewCount DESC LIMIT 1,"
SELECT Title
FROM posts
WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie')
ORDER BY Score DESC
LIMIT 1;",0,codebase_community,best_pred_metadata
531,541,SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id ORDER BY T1.FavoriteCount DESC LIMIT 1,"
SELECT u.DisplayName
FROM users u
JOIN posts p ON u.Id = p.OwnerUserId
ORDER BY p.Score DESC
LIMIT 1;",1,codebase_community,best_pred_metadata
532,542,SELECT SUM(T1.CommentCount) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie',"
SELECT COUNT(*)
FROM comments
WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie');",0,codebase_community,best_pred_metadata
533,543,SELECT MAX(T1.AnswerCount) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie',"
SELECT COUNT(*) AS AnswerCount
FROM posts
WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie')
ORDER BY AnswerCount DESC
LIMIT 1;",0,codebase_community,best_pred_metadata
534,544,SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T1.Title = 'Examples for teaching: Correlation does not mean causation',"
SELECT u.DisplayName
FROM users u
JOIN posts p ON u.Id = p.LastEditorUserId
WHERE p.Title = 'Examples for teaching: Correlation does not mean causation';",1,codebase_community,best_pred_metadata
535,545,SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie' AND T1.ParentId IS NULL,"
SELECT COUNT(*)
FROM posts
WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie')
AND ParentId IS NULL;",1,codebase_community,best_pred_metadata
536,546,SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.ClosedDate IS NOT NULL,"
SELECT u.DisplayName
FROM users u
JOIN posts p ON u.Id = p.OwnerUserId
WHERE p.AcceptedAnswerId IS NOT NULL;",0,codebase_community,best_pred_metadata
537,547,SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Score >= 20 AND T2.Age > 65,"
SELECT COUNT(*)
FROM posts
WHERE OwnerUserId IN (SELECT Id FROM users WHERE Age > 60)
AND Score > 19;",0,codebase_community,best_pred_metadata
538,548,SELECT T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts',"
SELECT u.Location
FROM users u
JOIN posts p ON u.Id = p.OwnerUserId
WHERE p.Title = 'Eliciting priors from experts';",1,codebase_community,best_pred_metadata
539,549,SELECT T2.Body FROM tags AS T1 INNER JOIN posts AS T2 ON T2.Id = T1.ExcerptPostId WHERE T1.TagName = 'bayesian',"
SELECT p.Body
FROM posts p
JOIN tags t ON p.Id = t.ExcerptPostId
WHERE t.TagName = 'bayesian';",1,codebase_community,best_pred_metadata
540,550,SELECT Body FROM posts WHERE id = ( SELECT ExcerptPostId FROM tags ORDER BY Count DESC LIMIT 1 ),"
SELECT p.Body
FROM posts p
JOIN tags t ON p.Id = t.ExcerptPostId
ORDER BY t.Count DESC
LIMIT 1;",1,codebase_community,best_pred_metadata
541,551,SELECT COUNT(T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'csgillespie',"
SELECT COUNT(*)
FROM badges
WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie');",1,codebase_community,best_pred_metadata
542,552,SELECT T1.`Name` FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'csgillespie',"
SELECT b.Name
FROM badges b
JOIN users u ON b.UserId = u.Id
WHERE u.DisplayName = 'csgillespie';",1,codebase_community,best_pred_metadata
543,553,"SELECT COUNT(T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE STRFTIME('%Y', T1.Date) = '2011' AND T2.DisplayName = 'csgillespie'","
SELECT COUNT(*)
FROM badges
WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie')
AND strftime('%Y', Date) = '2011';",1,codebase_community,best_pred_metadata
544,554,SELECT T2.DisplayName FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id GROUP BY T2.DisplayName ORDER BY COUNT(T1.Id) DESC LIMIT 1,"
SELECT u.DisplayName
FROM users u
JOIN badges b ON u.Id = b.UserId
GROUP BY u.Id
ORDER BY COUNT(b.Id) DESC
LIMIT 1;",1,codebase_community,best_pred_metadata
545,555,SELECT AVG(T1.Score) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie',"
SELECT AVG(p.Score)
FROM posts p
JOIN users u ON p.OwnerUserId = u.Id
WHERE u.DisplayName = 'csgillespie';",1,codebase_community,best_pred_metadata
546,556,SELECT CAST(COUNT(T1.Id) AS REAL) / COUNT(DISTINCT T2.DisplayName) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.Views > 200,"
SELECT AVG(badge_count) AS average_badges
FROM (
    SELECT u.Id, COUNT(b.Id) AS badge_count
    FROM users u
    JOIN badges b ON u.Id = b.UserId
    WHERE u.Views > 200
    GROUP BY u.Id
) AS subquery;",1,codebase_community,best_pred_metadata
547,557,"SELECT CAST(SUM(IIF(T2.Age > 65, 1, 0)) AS REAL) * 100 / COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Score > 20","
SELECT
    (COUNT(*) * 100.0) / (SELECT COUNT(*) FROM posts WHERE Score > 20) AS percentage_elder_owned
FROM
    posts
WHERE
    Score > 20
    AND OwnerUserId IN (SELECT Id FROM users WHERE Age > 60);",0,codebase_community,best_pred_metadata
548,558,SELECT COUNT(Id) FROM votes WHERE UserId = 58 AND CreationDate = '2010-07-19',"
SELECT COUNT(*)
FROM votes
WHERE UserId = 58 AND CreationDate = '2010-07-19';",1,codebase_community,best_pred_metadata
549,559,SELECT CreationDate FROM votes GROUP BY CreationDate ORDER BY COUNT(Id) DESC LIMIT 1,"
SELECT CreationDate
FROM votes
GROUP BY CreationDate
ORDER BY COUNT(*) DESC
LIMIT 1;",1,codebase_community,best_pred_metadata
550,560,SELECT COUNT(Id) FROM badges WHERE Name = 'Revival',"
SELECT COUNT(*) FROM badges WHERE Name = 'Revival';",1,codebase_community,best_pred_metadata
551,561,SELECT Title FROM posts WHERE Id = ( SELECT PostId FROM comments ORDER BY Score DESC LIMIT 1 ),"
SELECT p.Title
FROM posts p
JOIN comments c ON p.Id = c.PostId
WHERE c.Score = (SELECT MAX(Score) FROM comments)
LIMIT 1;",1,codebase_community,best_pred_metadata
552,562,SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T1.ViewCount = 1910,"
SELECT COUNT(*)
FROM comments
WHERE PostId = (SELECT Id FROM posts WHERE ViewCount = 1910);",1,codebase_community,best_pred_metadata
553,563,SELECT T1.FavoriteCount FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T2.CreationDate = '2014-04-23 20:29:39.0' AND T2.UserId = 3025,"
SELECT p.FavoriteCount
FROM comments c
JOIN posts p ON c.PostId = p.Id
WHERE c.UserId = 3025 AND c.CreationDate = '2014-04-23 20:29:39';",0,codebase_community,best_pred_metadata
554,564,SELECT T2.Text FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T1.ParentId = 107829 AND T1.CommentCount = 1,"
SELECT Text
FROM comments
WHERE PostId = (SELECT Id FROM posts WHERE ParentId = 107829)
LIMIT 1;",1,codebase_community,best_pred_metadata
555,565,"SELECT IIF(T2.ClosedDate IS NULL, 'NOT well-finished', 'well-finished') AS resylt FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.UserId = 23853 AND T1.CreationDate = '2013-07-12 09:08:18.0'","
SELECT p.Title, p.Body
FROM comments c
JOIN posts p ON c.PostId = p.Id
WHERE c.UserId = 23853 AND c.CreationDate = '2013-07-12 09:08:18' AND p.ClosedDate IS NULL;",0,codebase_community,best_pred_metadata
556,566,SELECT T1.Reputation FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.Id = 65041,"
SELECT u.Reputation
FROM users u
JOIN posts p ON u.Id = p.OwnerUserId
WHERE p.Id = 65041;",1,codebase_community,best_pred_metadata
557,567,SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Tiago Pasqualini',"
SELECT COUNT(*)
FROM posts
WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Tiago Pasqualini');",1,codebase_community,best_pred_metadata
558,568,SELECT T1.DisplayName FROM users AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.UserId WHERE T2.Id = 6347,"
SELECT u.DisplayName
FROM users u
JOIN votes v ON u.Id = v.UserId
WHERE v.Id = 6347;",1,codebase_community,best_pred_metadata
559,569,SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId WHERE T1.Title LIKE '%data visualization%',"
SELECT COUNT(*)
FROM votes
WHERE PostId IN (
    SELECT Id
    FROM posts
    WHERE Body LIKE '%data visualization%'
)",0,codebase_community,best_pred_metadata
560,570,SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'DatEpicCoderGuyWhoPrograms',"
SELECT b.Name
FROM badges b
JOIN users u ON b.UserId = u.Id
WHERE u.DisplayName = 'DatEpicCoderGuyWhoPrograms';",1,codebase_community,best_pred_metadata
561,571,SELECT CAST(COUNT(T2.Id) AS REAL) / COUNT(DISTINCT T1.Id) FROM votes AS T1 INNER JOIN posts AS T2 ON T1.UserId = T2.OwnerUserId WHERE T1.UserId = 24,"
SELECT COUNT(posts.Id) / COUNT(votes.Id) AS PostsToVotesRatio
FROM posts
JOIN votes ON posts.Id = votes.PostId
WHERE posts.OwnerUserId = 24;",0,codebase_community,best_pred_metadata
562,572,SELECT ViewCount FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer',"
SELECT p.ViewCount
FROM posts p
WHERE p.Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer';",1,codebase_community,best_pred_metadata
563,573,SELECT Text FROM comments WHERE Score = 17,"
SELECT * FROM comments WHERE Score = 17;",0,codebase_community,best_pred_metadata
564,574,SELECT DisplayName FROM users WHERE WebsiteUrl = 'http://stackoverflow.com',"
SELECT Id, DisplayName
FROM users
WHERE WebsiteUrl = 'http://stackoverflow.com';",0,codebase_community,best_pred_metadata
565,575,SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'SilentGhost',"
SELECT b.Name
FROM badges b
JOIN users u ON b.UserId = u.Id
WHERE u.DisplayName = 'SilentGhost';",1,codebase_community,best_pred_metadata
566,576,SELECT T1.DisplayName FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T2.Text = 'thank you user93!',"
SELECT u.DisplayName
FROM users u
JOIN comments c ON u.Id = c.UserId
WHERE c.Text = 'thank you user93!'",1,codebase_community,best_pred_metadata
567,577,SELECT T2.Text FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'A Lion',"
SELECT *
FROM comments
WHERE UserDisplayName = 'A Lion';",0,codebase_community,best_pred_metadata
568,578,"SELECT T1.DisplayName, T1.Reputation FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.Title = 'Understanding what Dassault iSight is doing?'","
SELECT u.Id, u.DisplayName, u.Reputation
FROM users u
JOIN posts p ON u.Id = p.OwnerUserId
WHERE p.Title = 'Understanding what Dassault iSight is doing?';",0,codebase_community,best_pred_metadata
569,579,SELECT T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'How does gentle boosting differ from AdaBoost?',"
SELECT *
FROM comments
WHERE PostId IN (
    SELECT Id
    FROM posts
    WHERE Title = 'How does gentle boosting differ from AdaBoost?'
)",0,codebase_community,best_pred_metadata
570,580,SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Necromancer' LIMIT 10,"
SELECT u.DisplayName
FROM users u
JOIN badges b ON u.Id = b.UserId
WHERE b.Name = 'Necromancer'
LIMIT 10;",1,codebase_community,best_pred_metadata
571,581,SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Open source tools for visualizing multi-dimensional data?',"
SELECT u.DisplayName
FROM posts p
JOIN users u ON p.LastEditorUserId = u.Id
WHERE p.Title = 'Open source tools for visualizing multi-dimensional data?'",0,codebase_community,best_pred_metadata
572,582,SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Vebjorn Ljosa',"
SELECT p.Title
FROM posts p
JOIN users u ON p.LastEditorUserId = u.Id
WHERE u.DisplayName = 'Vebjorn Ljosa';",0,codebase_community,best_pred_metadata
573,583,"SELECT SUM(T1.Score), T2.WebsiteUrl FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Yevgeny' GROUP BY T2.WebsiteUrl","
SELECT SUM(p.Score) AS TotalScore, u.WebsiteUrl
FROM posts p
JOIN users u ON p.LastEditorUserId = u.Id
WHERE u.DisplayName = 'Yevgeny';",0,codebase_community,best_pred_metadata
574,584,SELECT T2.Comment FROM posts AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.PostId WHERE T1.Title = 'Why square the difference instead of taking the absolute value in standard deviation?',"
SELECT comments.Text
FROM comments
JOIN postHistory ON comments.UserId = postHistory.UserId
JOIN posts ON postHistory.PostId = posts.Id
WHERE posts.Title = 'Why square the difference instead of taking the absolute value in standard deviation?'",0,codebase_community,best_pred_metadata
575,585,SELECT SUM(T2.BountyAmount) FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId WHERE T1.Title LIKE '%data%',"
SELECT SUM(BountyAmount)
FROM votes
JOIN posts ON votes.PostId = posts.Id
WHERE posts.Title LIKE '%data%';",1,codebase_community,best_pred_metadata
576,586,"SELECT T3.DisplayName, T1.Title FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId INNER JOIN users AS T3 ON T3.Id = T2.UserId WHERE T2.BountyAmount = 50 AND T1.Title LIKE '%variance%'","
SELECT u.DisplayName
FROM users u
JOIN votes v ON u.Id = v.UserId
JOIN posts p ON v.PostId = p.Id
WHERE v.BountyAmount = 50 AND p.Title LIKE '%variance%';",0,codebase_community,best_pred_metadata
577,587,"SELECT AVG(T2.ViewCount), T2.Title, T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.Id = T1.PostId WHERE T2.Tags = '<humor>'","
SELECT p.Title, c.Text AS Comment, p.Score
FROM posts p
JOIN comments c ON p.Id = c.PostId
WHERE p.Tags LIKE '%humor%'
GROUP BY p.Id
HAVING AVG(p.ViewCount) > (SELECT AVG(ViewCount) FROM posts WHERE Tags LIKE '%humor%');",0,codebase_community,best_pred_metadata
578,588,SELECT COUNT(Id) FROM comments WHERE UserId = 13,"
SELECT COUNT(*) AS TotalComments
FROM comments
WHERE UserId = 13;",1,codebase_community,best_pred_metadata
579,589,SELECT Id FROM users WHERE Reputation = ( SELECT MAX(Reputation) FROM users ),"
SELECT UserId FROM users ORDER BY Reputation DESC LIMIT 1;",0,codebase_community,best_pred_metadata
580,590,SELECT Id FROM users WHERE Views = ( SELECT MIN(Views) FROM users ),"
SELECT Id FROM users ORDER BY Views ASC LIMIT 1;",0,codebase_community,best_pred_metadata
581,591,"SELECT COUNT(Id) FROM badges WHERE STRFTIME('%Y', Date) = '2011' AND Name = 'Supporter'","
SELECT COUNT(*)
FROM badges
WHERE Name = 'supporter' AND strftime('%Y', Date) = '2011';",0,codebase_community,best_pred_metadata
582,592,"SELECT UserId FROM ( SELECT UserId, COUNT(Name) AS num FROM badges GROUP BY UserId ) T WHERE T.num > 5","
SELECT COUNT(UserId)
FROM badges
GROUP BY UserId
HAVING COUNT(Id) > 5;",0,codebase_community,best_pred_metadata
583,593,"SELECT COUNT(DISTINCT T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Name IN ('Supporter', 'Teacher') AND T2.Location = 'New York'","
SELECT COUNT(*)
FROM users
WHERE Location = 'New York'
AND Id IN (
    SELECT UserId
    FROM badges
    WHERE Name IN ('teacher', 'supporter')
    GROUP BY UserId
    HAVING COUNT(DISTINCT Name) = 2
);",0,codebase_community,best_pred_metadata
584,594,"SELECT T2.Id, T2.Reputation FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.PostId = 1","
SELECT u.Id, u.DisplayName, u.Reputation
FROM users u
JOIN posts p ON u.Id = p.OwnerUserId
WHERE p.Id = 1;",0,codebase_community,best_pred_metadata
585,595,SELECT T2.UserId FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T3.ViewCount >= 1000 GROUP BY T2.UserId HAVING COUNT(DISTINCT T2.PostHistoryTypeId) = 1,"
SELECT u.Id, u.DisplayName
FROM users u
JOIN posts p ON u.Id = p.OwnerUserId
JOIN postHistory ph ON p.Id = ph.PostId
GROUP BY u.Id, u.DisplayName
HAVING COUNT(DISTINCT ph.PostId) = 1 AND p.ViewCount >= 1000;",0,codebase_community,best_pred_metadata
586,596,SELECT Name FROM badges AS T1 INNER JOIN comments AS T2 ON T1.UserId = t2.UserId GROUP BY T2.UserId ORDER BY COUNT(T2.UserId) DESC LIMIT 1,"
SELECT u.Id, u.DisplayName, COUNT(c.Id) AS CommentCount, b.Name AS BadgeName
FROM users u
LEFT JOIN comments c ON u.Id = c.UserId
LEFT JOIN badges b ON u.Id = b.UserId
GROUP BY u.Id, u.DisplayName, b.Name
ORDER BY CommentCount DESC;",0,codebase_community,best_pred_metadata
587,597,SELECT COUNT(T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.Location = 'India' AND T1.Name = 'Teacher',"
SELECT COUNT(*)
FROM users
WHERE Location = 'India'
AND Id IN (
    SELECT UserId
    FROM badges
    WHERE Name = 'teacher'
);",0,codebase_community,best_pred_metadata
588,598,"SELECT CAST(SUM(IIF(STRFTIME('%Y', Date) = '2010', 1, 0)) AS REAL) * 100 / COUNT(Id) - CAST(SUM(IIF(STRFTIME('%Y', Date) = '2011', 1, 0)) AS REAL) * 100 / COUNT(Id) FROM badges WHERE Name = 'Student'","
SELECT
    (COUNT(CASE WHEN strftime('%Y', Date) = '2011' THEN 1 END) - COUNT(CASE WHEN strftime('%Y', Date) = '2010' THEN 1 END)) * 100.0 / COUNT(CASE WHEN strftime('%Y', Date) = '2010' THEN 1 END) AS percentage_difference
FROM
    badges
WHERE
    Name = 'student'

This SQL query calculates the percentage difference of student badges given during 2010 and 2011. It first counts the number of student badges given in each year using conditional counting, then calculates the percentage difference by subtracting the count from 2010 from the count from 2011, and dividing the result by the count from 2010. The result is then multiplied by 100 to get the percentage difference.",0,codebase_community,best_pred_metadata
589,600,SELECT T1.ViewCount FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId WHERE T2.PostId = 61217,"
SELECT p.Id, p.Title, p.Score
FROM posts p
JOIN postLinks pl ON p.Id = pl.PostId OR p.Id = pl.RelatedPostId
WHERE (pl.PostId = 61217 OR pl.RelatedPostId = 61217) AND p.Id != 61217;",0,codebase_community,best_pred_metadata
590,601,"SELECT T1.Score, T2.LinkTypeId FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId WHERE T2.PostId = 395","
SELECT p.Score, pl.LinkTypeId
FROM posts p
JOIN postLinks pl ON p.Id = pl.PostId
WHERE p.Id = 395;",1,codebase_community,best_pred_metadata
591,602,"SELECT PostId, UserId FROM postHistory WHERE PostId IN ( SELECT Id FROM posts WHERE Score > 60 )","
SELECT p.Id AS PostId, p.OwnerUserId AS UserId
FROM posts p
WHERE p.Score > 60;",0,codebase_community,best_pred_metadata
592,603,"SELECT SUM(DISTINCT FavoriteCount) FROM posts WHERE Id IN ( SELECT PostId FROM postHistory WHERE UserId = 686 AND STRFTIME('%Y', CreationDate) = '2011' )","
SELECT SUM(FavoriteCount)
FROM posts
WHERE OwnerUserId = 686 AND strftime('%Y', CreaionDate) = '2011';",0,codebase_community,best_pred_metadata
593,604,"SELECT AVG(T1.UpVotes), AVG(T1.Age) FROM users AS T1 INNER JOIN ( SELECT OwnerUserId, COUNT(*) AS post_count FROM posts GROUP BY OwnerUserId HAVING post_count > 10) AS T2 ON T1.Id = T2.OwnerUserId","
SELECT AVG(users.UpVotes) AS AverageUpVotes, AVG(users.Age) AS AverageUserAge
FROM users
JOIN posts ON users.Id = posts.OwnerUserId
GROUP BY users.Id
HAVING COUNT(posts.Id) > 10;",0,codebase_community,best_pred_metadata
594,605,SELECT COUNT(id) FROM badges WHERE Name = 'Announcer',"
SELECT COUNT(*)
FROM users
WHERE Id IN (
    SELECT UserId
    FROM badges
    WHERE Name = 'Announcer'
);",0,codebase_community,best_pred_metadata
595,606,SELECT Name FROM badges WHERE Date = '2010-07-19 19:39:08.0',"
SELECT Name
FROM badges
WHERE Date = '2010-07-19 19:39:08';",0,codebase_community,best_pred_metadata
596,607,SELECT COUNT(id) FROM comments WHERE score > 60,"
SELECT COUNT(*)
FROM comments
WHERE Score > 0;",0,codebase_community,best_pred_metadata
597,608,SELECT Text FROM comments WHERE CreationDate = '2010-07-19 19:16:14.0',"
SELECT Text
FROM comments
WHERE CreationDate = '2010-07-19 19:25:47';",0,codebase_community,best_pred_metadata
598,609,SELECT COUNT(id) FROM posts WHERE Score = 10,"
SELECT COUNT(*) FROM posts WHERE Score = 10;",1,codebase_community,best_pred_metadata
599,610,SELECT T2.name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId ORDER BY T1.Reputation DESC LIMIT 1,"
SELECT b.Name
FROM badges b
JOIN users u ON b.UserId = u.Id
WHERE u.Reputation = (SELECT MAX(Reputation) FROM users);",0,codebase_community,best_pred_metadata
600,611,SELECT T1.Reputation FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Date = '2010-07-19 19:39:08.0',"
SELECT u.Reputation
FROM users u
JOIN badges b ON u.Id = b.UserId
WHERE b.Date = '2010-07-19 19:39:08';",0,codebase_community,best_pred_metadata
601,612,SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Pierre',"
SELECT Name
FROM badges
WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'Pierre');",0,codebase_community,best_pred_metadata
602,613,"SELECT T2.Date FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Rochester, NY'","
SELECT b.Date
FROM badges b
JOIN users u ON b.UserId = u.Id
WHERE u.Location = 'Rochester, NY';",1,codebase_community,best_pred_metadata
603,614,SELECT CAST(COUNT(T1.Id) AS REAL) * 100 / (SELECT COUNT(Id) FROM users) FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Teacher',"
SELECT
    (COUNT(DISTINCT u.Id) * 100.0) / (SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Teacher') AS Teacher_Badge_Users_Percentage
FROM
    users u
JOIN
    badges b ON u.Id = b.UserId
WHERE
    b.Name = 'Teacher';",0,codebase_community,best_pred_metadata
604,615,"SELECT CAST(SUM(IIF(T2.Age BETWEEN 13 AND 18, 1, 0)) AS REAL) * 100 / COUNT(T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.`Name` = 'Organizer'","
SELECT
    (COUNT(DISTINCT u.Id) * 100.0 / (SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Organizer')) AS PercentageOfTeenagers
FROM
    users u
JOIN
    badges b ON u.Id = b.UserId
WHERE
    b.Name = 'Organizer' AND u.Age BETWEEN 13 AND 19;",1,codebase_community,best_pred_metadata
605,616,SELECT T1.Score FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.CreationDate = '2010-07-19 19:19:56.0',"
SELECT c.Score
FROM comments c
JOIN posts p ON c.PostId = p.Id
WHERE p.CreaionDate = '2010-07-19 19:19:56'",0,codebase_community,best_pred_metadata
606,617,SELECT T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.CreationDate = '2010-07-19 19:37:33.0',"
SELECT Text
FROM comments
WHERE PostId = (SELECT Id FROM posts WHERE CreationDate = '2010-07-19 19:37:33')",0,codebase_community,best_pred_metadata
607,618,"SELECT T1.Age FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Vienna, Austria'","
SELECT u.Age
FROM users u
JOIN badges b ON u.Id = b.UserId
WHERE u.Location = 'Vienna, Austria';",1,codebase_community,best_pred_metadata
608,619,SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Supporter' AND T1.Age BETWEEN 19 AND 65,"
SELECT COUNT(*)
FROM badges
JOIN users ON badges.UserId = users.Id
WHERE badges.Name = 'Supporter' AND users.Age >= 18;",0,codebase_community,best_pred_metadata
609,620,SELECT T1.Views FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Date = '2010-07-19 19:39:08.0',"
SELECT u.Views
FROM users u
JOIN badges b ON u.Id = b.UserId
WHERE b.Date = '2010-07-19 19:39:08';",0,codebase_community,best_pred_metadata
610,621,SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Reputation = (SELECT MIN(Reputation) FROM users),"
SELECT b.Name
FROM badges b
JOIN users u ON b.UserId = u.Id
WHERE u.Reputation = (SELECT MIN(Reputation) FROM users);",1,codebase_community,best_pred_metadata
611,622,SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Sharpie',"
SELECT Name
FROM badges
WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'Sharpie');",1,codebase_community,best_pred_metadata
612,623,SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Age > 65 AND T2.Name = 'Supporter',"
SELECT COUNT(*)
FROM badges
JOIN users ON badges.UserId = users.Id
WHERE badges.Name = 'Supporter' AND users.Age >= 65;",0,codebase_community,best_pred_metadata
613,624,SELECT DisplayName FROM users WHERE Id = 30,"
SELECT DisplayName FROM users WHERE Id = 30;",1,codebase_community,best_pred_metadata
614,625,SELECT COUNT(Id) FROM users WHERE Location = 'New York',"
SELECT COUNT(*)
FROM users
WHERE Location = 'New York';",1,codebase_community,best_pred_metadata
615,626,"SELECT COUNT(id) FROM votes WHERE STRFTIME('%Y', CreationDate) = '2010'","
SELECT COUNT(*)
FROM votes
WHERE YEAR(CreationDate) = 2010;",0,codebase_community,best_pred_metadata
616,627,SELECT COUNT(id) FROM users WHERE Age BETWEEN 19 AND 65,"
SELECT COUNT(*)
FROM users
WHERE Age >= 18;",0,codebase_community,best_pred_metadata
617,628,"SELECT Id, DisplayName FROM users WHERE Views = ( SELECT MAX(Views) FROM users )","
SELECT Id, DisplayName, Views
FROM users
ORDER BY Views DESC
LIMIT 1;",0,codebase_community,best_pred_metadata
618,629,"SELECT CAST(SUM(IIF(STRFTIME('%Y', CreationDate) = '2010', 1, 0)) AS REAL) / SUM(IIF(STRFTIME('%Y', CreationDate) = '2011', 1, 0)) FROM votes","
SELECT
    (SELECT COUNT(*) FROM votes WHERE CreationDate BETWEEN '2010-01-01' AND '2010-12-31') AS votes_2010,
    (SELECT COUNT(*) FROM votes WHERE CreationDate BETWEEN '2011-01-01' AND '2011-12-31') AS votes_2011,
    (SELECT COUNT(*) FROM votes WHERE CreationDate BETWEEN '2010-01-01' AND '2010-12-31') / (SELECT COUNT(*) FROM votes WHERE CreationDate BETWEEN '2011-01-01' AND '2011-12-31') AS ratio_2010_2011;",0,codebase_community,best_pred_metadata
619,630,SELECT T3.Tags FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'John Salvatier',"
SELECT t.TagName
FROM tags t
JOIN posts p ON t.ExcerptPostId = p.Id OR t.WikiPostId = p.Id
JOIN users u ON p.OwnerUserId = u.Id
WHERE u.DisplayName = 'John Stauffer';",0,codebase_community,best_pred_metadata
620,631,SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Daniel Vassallo',"
SELECT COUNT(*)
FROM posts
WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Daniel Vassallo');",0,codebase_community,best_pred_metadata
621,632,SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN votes AS T3 ON T3.PostId = T2.PostId WHERE T1.DisplayName = 'Harlan',"
SELECT COUNT(*)
FROM votes
WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'Harlan');",0,codebase_community,best_pred_metadata
622,633,SELECT T2.PostId FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'slashnick' ORDER BY T3.AnswerCount DESC LIMIT 1,"
SELECT Id
FROM posts
WHERE OwnerDisplayName = 'slashnick'
ORDER BY AnswerCount DESC
LIMIT 1;",0,codebase_community,best_pred_metadata
623,634,SELECT T1.DisplayName FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'Harvey Motulsky' OR T1.DisplayName = 'Noah Snyder' GROUP BY T1.DisplayName ORDER BY SUM(T3.ViewCount) DESC LIMIT 1,"
SELECT p.Title, p.Score
FROM posts p
WHERE p.OwnerUserId IN (
    SELECT u.Id
    FROM users u
    WHERE u.DisplayName IN ('Harvey Motulsky', 'Noah Snyder')
)
ORDER BY p.Score DESC
LIMIT 1;",0,codebase_community,best_pred_metadata
624,635,"SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id INNER JOIN votes AS T4 ON T4.PostId = T3.Id WHERE T1.DisplayName = 'Matt Parker' GROUP BY T2.PostId, T4.Id HAVING COUNT(T4.Id) > 4","
SELECT COUNT(*)
FROM posts
WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Matt Parker')
AND Id IN (SELECT PostId FROM votes GROUP BY PostId HAVING COUNT(*) > 4);",0,codebase_community,best_pred_metadata
625,636,SELECT COUNT(T3.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T2.Id = T3.PostId WHERE T1.DisplayName = 'Neil McGuigan' AND T3.Score < 60,"
SELECT COUNT(*)
FROM comments
WHERE UserDisplayName = 'Neil McGuigan' AND Score < 0;",0,codebase_community,best_pred_metadata
626,637,SELECT T3.Tags FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T3.Id = T2.PostId WHERE T1.DisplayName = 'Mark Meckes' AND T3.CommentCount = 0,"
SELECT t.TagName
FROM tags t
JOIN posts p ON t.Id = p.Id
LEFT JOIN comments c ON p.Id = c.PostId
WHERE p.OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Mark Meckes')
AND c.Id IS NULL;",0,codebase_community,best_pred_metadata
627,638,SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Organizer',"
SELECT users.DisplayName
FROM users
JOIN badges ON users.Id = badges.UserId
WHERE badges.Name = 'Organizer Badge';",0,codebase_community,best_pred_metadata
628,639,"SELECT CAST(SUM(IIF(T3.TagName = 'r', 1, 0)) AS REAL) * 100 / COUNT(T1.Id) FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN tags AS T3 ON T3.ExcerptPostId = T2.PostId WHERE T1.DisplayName = 'Community'","
SELECT
    (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM posts WHERE OwnerUserId IS NULL)) AS percentage_of_posts_using_R_language
FROM
    posts
WHERE
    OwnerUserId IS NULL AND Body LIKE '%R%'",0,codebase_community,best_pred_metadata
629,640,"SELECT SUM(IIF(T1.DisplayName = 'Mornington', T3.ViewCount, 0)) - SUM(IIF(T1.DisplayName = 'Amos', T3.ViewCount, 0)) AS diff FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T3.Id = T2.PostId","
SELECT
    SUM(CASE WHEN u.DisplayName = 'mornington' THEN p.ViewCount ELSE 0 END) -
    SUM(CASE WHEN u.DisplayName = 'Amos' THEN p.ViewCount ELSE 0 END) AS view_count_difference
FROM
    posts p
JOIN
    users u ON p.OwnerUserId = u.Id
WHERE
    u.DisplayName IN ('mornington', 'Amos');",0,codebase_community,best_pred_metadata
630,641,"SELECT COUNT(Id) FROM badges WHERE Name = 'Commentator' AND STRFTIME('%Y', Date) = '2014'","
SELECT COUNT(DISTINCT u.Id)
FROM users u
JOIN badges b ON u.Id = b.UserId
WHERE b.Name = 'commentator' AND strftime('%Y', b.Date) = '2014';",0,codebase_community,best_pred_metadata
631,642,SELECT COUNT(id) FROM postHistory WHERE date(CreationDate) = '2010-07-21',"
SELECT COUNT(*)
FROM posts
WHERE CreaionDate BETWEEN '2010-07-21 00:00:00' AND '2010-07-21 23:59:59';",0,codebase_community,best_pred_metadata
632,643,"SELECT DisplayName, Age FROM users WHERE Views = ( SELECT MAX(Views) FROM users )","
SELECT DisplayName, Age
FROM users
WHERE Views = (SELECT MAX(Views) FROM users);",1,codebase_community,best_pred_metadata
633,644,"SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Detecting a given face in a database of facial images'","
SELECT LastEditDate, LastEditorUserId
FROM posts
WHERE Title = 'Detecting a given face in a database of facial images';",1,codebase_community,best_pred_metadata
634,645,SELECT COUNT(Id) FROM comments WHERE UserId = 13 AND Score < 60,"
SELECT COUNT(*)
FROM comments
WHERE UserId = 13 AND Score < 0;",0,codebase_community,best_pred_metadata
635,646,"SELECT T1.Title, T2.UserDisplayName FROM posts AS T1 INNER JOIN comments AS T2 ON T2.PostId = T2.Id WHERE T1.Score > 60","
SELECT p.Title, c.UserDisplayName
FROM posts p
JOIN comments c ON p.Id = c.PostId
WHERE c.Score > 0;",0,codebase_community,best_pred_metadata
636,647,"SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE STRFTIME('%Y', T2.Date) = '2011' AND T1.Location = 'North Pole'","
SELECT b.Name
FROM badges b
JOIN users u ON b.UserId = u.Id
WHERE u.Location = 'North Pole' AND EXTRACT(YEAR FROM b.Date) = 2011;",0,codebase_community,best_pred_metadata
637,648,"SELECT T1.DisplayName, T1.WebsiteUrl FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.FavoriteCount > 150","
SELECT u.DisplayName, u.WebsiteUrl
FROM users u
JOIN posts p ON u.Id = p.OwnerUserId
WHERE p.FavoriteCount > 150;",1,codebase_community,best_pred_metadata
638,649,"SELECT T1.Id, T2.LastEditDate FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'What is the best introductory Bayesian statistics textbook?'","
SELECT COUNT(*) AS PostHistoryCount, MAX(CreationDate) AS LastEditDate
FROM postHistory
WHERE PostId IN (
    SELECT Id
    FROM posts
    WHERE Title = 'What is the best introductory Bayesian statistics textbook?'
)",0,codebase_community,best_pred_metadata
639,650,"SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'outliers'","
SELECT u.LastAccessDate, u.Location
FROM users u
JOIN badges b ON u.Id = b.UserId
WHERE b.Name = 'outliers';",1,codebase_community,best_pred_metadata
640,651,SELECT T3.Title FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id INNER JOIN posts AS T3 ON T1.RelatedPostId = T3.Id WHERE T2.Title = 'How to tell if something happened in a data set which monitors a value over time',"
SELECT p.Title
FROM posts p
JOIN postLinks pl ON p.Id = pl.RelatedPostId
WHERE pl.PostId = (SELECT Id FROM posts WHERE Title = 'How to tell if something happened in a data set which monitors a value over time');",1,codebase_community,best_pred_metadata
641,652,"SELECT T1.PostId, T2.Name FROM postHistory AS T1 INNER JOIN badges AS T2 ON T1.UserId = T2.UserId WHERE T1.UserDisplayName = 'Samuel' AND STRFTIME('%Y', T1.CreationDate) = '2013' AND STRFTIME('%Y', T2.Date) = '2013'","
SELECT p.Id AS PostId, b.Name AS BadgeName
FROM posts p
JOIN users u ON p.OwnerUserId = u.Id
JOIN badges b ON u.Id = b.UserId
WHERE u.DisplayName = 'Samuel' AND YEAR(b.Date) = 2013;",0,codebase_community,best_pred_metadata
642,653,SELECT DisplayName FROM users WHERE Id = ( SELECT OwnerUserId FROM posts ORDER BY ViewCount DESC LIMIT 1 ),"
SELECT u.DisplayName
FROM posts p
JOIN users u ON p.OwnerUserId = u.Id
ORDER BY p.Score DESC
LIMIT 1;",0,codebase_community,best_pred_metadata
643,654,"SELECT T3.DisplayName, T3.Location FROM tags AS T1 INNER JOIN posts AS T2 ON T1.ExcerptPostId = T2.Id INNER JOIN users AS T3 ON T3.Id = T2.OwnerUserId WHERE T1.TagName = 'hypothesis-testing'","
SELECT u.DisplayName, u.Location
FROM users u
JOIN posts p ON u.Id = p.OwnerUserId
JOIN tags t ON p.Id = t.ExcerptPostId
WHERE t.TagName = 'hypothesis-testing';",1,codebase_community,best_pred_metadata
644,655,"SELECT T3.Title, T2.LinkTypeId FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId INNER JOIN posts AS T3 ON T2.RelatedPostId = T3.Id WHERE T1.Title = 'What are principal component scores?'","
SELECT p2.Title, pl.LinkTypeId
FROM posts p1
JOIN postLinks pl ON p1.Id = pl.PostId
JOIN posts p2 ON pl.RelatedPostId = p2.Id
WHERE p1.Title = 'What are principal component scores?'",1,codebase_community,best_pred_metadata
645,656,SELECT DisplayName FROM users WHERE Id = ( SELECT OwnerUserId FROM posts WHERE ParentId IS NOT NULL ORDER BY Score DESC LIMIT 1 ),"
SELECT u.DisplayName
FROM posts p
JOIN users u ON p.OwnerUserId = u.Id
WHERE p.Id = (
    SELECT ParentId
    FROM posts
    WHERE Score = (SELECT MAX(Score) FROM posts WHERE ParentId IS NOT NULL)
)",0,codebase_community,best_pred_metadata
646,657,"SELECT DisplayName, WebsiteUrl FROM users WHERE Id = ( SELECT UserId FROM votes WHERE VoteTypeId = 8 ORDER BY BountyAmount DESC LIMIT 1 )","
SELECT u.DisplayName, u.WebsiteUrl
FROM users u
JOIN votes v ON u.Id = v.UserId
WHERE v.VoteTypeId = 8
ORDER BY v.BountyAmount DESC
LIMIT 1;",1,codebase_community,best_pred_metadata
647,658,SELECT Title FROM posts ORDER BY ViewCount DESC LIMIT 5,"
SELECT Title
FROM posts
ORDER BY Score DESC
LIMIT 5;",0,codebase_community,best_pred_metadata
648,659,SELECT COUNT(Id) FROM tags WHERE Count BETWEEN 5000 AND 7000,"
SELECT COUNT(*)
FROM tags
WHERE Count BETWEEN 5000 AND 7000;",1,codebase_community,best_pred_metadata
649,660,SELECT OwnerUserId FROM posts WHERE FavoriteCount = ( SELECT MAX(FavoriteCount) FROM posts ),"
SELECT OwnerUserId
FROM posts
ORDER BY Score DESC
LIMIT 1;",1,codebase_community,best_pred_metadata
650,661,SELECT Age FROM users WHERE Reputation = ( SELECT MAX(Reputation) FROM users ),"
SELECT u.Age
FROM users u
JOIN votes v ON u.Id = v.UserId
GROUP BY u.Id
ORDER BY COUNT(v.Id) DESC
LIMIT 1;",0,codebase_community,best_pred_metadata
651,662,"SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId WHERE T2.BountyAmount = 50 AND STRFTIME('%Y', T2.CreationDate) = '2011'","
SELECT COUNT(*)
FROM posts
WHERE EXISTS (
    SELECT 1
    FROM votes
    WHERE votes.PostId = posts.Id
        AND votes.BountyAmount = 50
)
AND EXTRACT(YEAR FROM posts.CreaionDate) = 2011;",0,codebase_community,best_pred_metadata
652,663,SELECT Id FROM users WHERE Age = ( SELECT MIN(Age) FROM users ),"
SELECT Id
FROM users
ORDER BY Age ASC
LIMIT 1;",0,codebase_community,best_pred_metadata
653,664,SELECT Score FROM posts WHERE Id = ( SELECT ExcerptPostId FROM tags ORDER BY Count DESC LIMIT 1 ),"
SELECT p.Score
FROM posts p
JOIN tags t ON p.Id = t.ExcerptPostId
ORDER BY t.Count DESC
LIMIT 1;",1,codebase_community,best_pred_metadata
654,665,"SELECT CAST(COUNT(T1.Id) AS REAL) / 12 FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.AnswerCount <= 2 AND STRFTIME('%Y', T1.CreationDate) = '2010'","
SELECT AVG(links_per_month) AS average_monthly_links
FROM (
  SELECT COUNT(*) / 12 AS links_per_month
  FROM postLinks
  WHERE EXTRACT(YEAR FROM CreationDate) = 2010
    AND PostId IN (
      SELECT Id
      FROM posts
      WHERE AnswerCount <= 2
    )
  GROUP BY EXTRACT(MONTH FROM CreationDate)
) AS subquery;",0,codebase_community,best_pred_metadata
655,666,SELECT T2.Id FROM votes AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.UserId = 1465 ORDER BY T2.FavoriteCount DESC LIMIT 1,"
SELECT PostId
FROM votes
WHERE UserId = 1465
GROUP BY PostId
ORDER BY SUM(BountyAmount) DESC
LIMIT 1;",0,codebase_community,best_pred_metadata
656,667,SELECT T1.Title FROM posts AS T1 INNER JOIN postLinks AS T2 ON T2.PostId = T1.Id ORDER BY T1.CreaionDate LIMIT 1,"
SELECT p.Title
FROM posts p
JOIN postLinks pl ON p.Id = pl.PostId
ORDER BY pl.CreationDate ASC
LIMIT 1;",0,codebase_community,best_pred_metadata
657,668,SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId GROUP BY T1.DisplayName ORDER BY COUNT(T1.Id) DESC LIMIT 1,"
SELECT u.DisplayName
FROM users u
JOIN badges b ON u.Id = b.UserId
GROUP BY u.Id
ORDER BY COUNT(b.Id) DESC
LIMIT 1;",1,codebase_community,best_pred_metadata
658,669,SELECT T2.CreationDate FROM users AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'chl' ORDER BY T2.CreationDate LIMIT 1,"
SELECT CreationDate
FROM votes
WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'chl')
ORDER BY CreationDate ASC
LIMIT 1;",1,codebase_community,best_pred_metadata
659,670,"SELECT T2.CreaionDate FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.Age IS NOT NULL ORDER BY T1.Age, T2.CreaionDate LIMIT 1","
SELECT CreationDate
FROM posts
WHERE OwnerUserId = (
    SELECT Id
    FROM users
    ORDER BY Age ASC
    LIMIT 1
)
ORDER BY CreationDate ASC
LIMIT 1;",0,codebase_community,best_pred_metadata
660,671,SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Autobiographer' ORDER BY T2.Date LIMIT 1,"
SELECT u.DisplayName
FROM users u
JOIN badges b ON u.Id = b.UserId
WHERE b.Name = 'Autobiographer'
ORDER BY b.Date
LIMIT 1;",1,codebase_community,best_pred_metadata
661,672,SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.Location = 'United Kingdom' AND T2.FavoriteCount >= 4,"
SELECT COUNT(DISTINCT u.Id)
FROM users u
JOIN posts p ON u.Id = p.OwnerUserId
JOIN votes v ON p.Id = v.PostId
WHERE u.Location = 'United Kingdom'
AND v.VoteTypeId = 2
GROUP BY u.Id
HAVING SUM(v.BountyAmount) >= 4;",0,codebase_community,best_pred_metadata
662,673,SELECT AVG(PostId) FROM votes WHERE UserId IN ( SELECT Id FROM users WHERE Age = ( SELECT MAX(Age) FROM users ) ),"
SELECT AVG(post_count) AS average_posts_voted_by_oldest_users
FROM (
    SELECT COUNT(v.PostId) AS post_count
    FROM votes v
    JOIN users u ON v.UserId = u.Id
    WHERE u.Age = (SELECT MAX(Age) FROM users)
    GROUP BY v.UserId
) AS subquery;",0,codebase_community,best_pred_metadata
663,674,SELECT DisplayName FROM users WHERE Reputation = ( SELECT MAX(Reputation) FROM users ),"
SELECT DisplayName FROM users ORDER BY Reputation DESC LIMIT 1;",1,codebase_community,best_pred_metadata
664,675,SELECT COUNT(id) FROM users WHERE Reputation > 2000 AND Views > 1000,"
SELECT COUNT(*)
FROM users
WHERE Reputation > 2000 AND Views > 1000;",1,codebase_community,best_pred_metadata
665,676,SELECT DisplayName FROM users WHERE Age BETWEEN 19 AND 65,"
SELECT DisplayName
FROM users
WHERE Age >= 18;",0,codebase_community,best_pred_metadata
666,677,"SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE STRFTIME('%Y', T2.CreaionDate) = '2010' AND T1.DisplayName = 'Jay Stevens'","
SELECT COUNT(*)
FROM posts
WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Jay Stevens')
AND CreaionDate BETWEEN '2010-01-01' AND '2010-12-31';",1,codebase_community,best_pred_metadata
667,678,"SELECT T2.Id, T2.Title FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Harvey Motulsky' ORDER BY T2.ViewCount DESC LIMIT 1","
SELECT Id, Title
FROM posts
WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Harvey Motulsky')
ORDER BY ViewCount DESC
LIMIT 1;",1,codebase_community,best_pred_metadata
668,679,"SELECT T1.Id, T2.Title FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId ORDER BY T2.Score DESC LIMIT 1","
SELECT Id, Title FROM posts ORDER BY Score DESC LIMIT 1;",0,codebase_community,best_pred_metadata
669,680,SELECT AVG(T2.Score) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Stephen Turner',"
SELECT AVG(p.Score)
FROM posts p
JOIN users u ON p.OwnerUserId = u.Id
WHERE u.DisplayName = 'Stephen Turner';",1,codebase_community,best_pred_metadata
670,681,"SELECT T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE STRFTIME('%Y', T2.CreaionDate) = '2011' AND T2.ViewCount > 20000","
SELECT u.DisplayName
FROM users u
JOIN posts p ON u.Id = p.OwnerUserId
WHERE p.ViewCount > 20000 AND strftime('%Y', p.CreaionDate) = '2011';",1,codebase_community,best_pred_metadata
671,682,"SELECT T2.OwnerUserId, T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE STRFTIME('%Y', T1.CreationDate) = '2010' ORDER BY T2.FavoriteCount DESC LIMIT 1","
SELECT p.Id, u.DisplayName
FROM posts p
JOIN users u ON p.OwnerUserId = u.Id
WHERE p.CreaionDate BETWEEN '2010-01-01' AND '2010-12-31'
ORDER BY p.Score DESC
LIMIT 1;",0,codebase_community,best_pred_metadata
672,683,"SELECT CAST(SUM(IIF(STRFTIME('%Y', T2.CreaionDate) = '2011' AND T1.Reputation > 1000, 1, 0)) AS REAL) * 100 / COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId","
SELECT
    (COUNT(DISTINCT p.Id) * 100.0 / (SELECT COUNT(DISTINCT Id) FROM posts WHERE strftime('%Y', CreaionDate) = '2011')) AS percentage_of_posts
FROM
    posts p
JOIN
    users u ON p.OwnerUserId = u.Id
WHERE
    u.Reputation > 1000 AND strftime('%Y', p.CreaionDate) = '2011';",0,codebase_community,best_pred_metadata
673,684,"SELECT CAST(SUM(IIF(Age BETWEEN 13 AND 18, 1, 0)) AS REAL) * 100 / COUNT(Id) FROM users","
SELECT
    (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM users)) AS percentage_of_teenage_users
FROM
    users
WHERE
    Age BETWEEN 13 AND 19;",0,codebase_community,best_pred_metadata
674,685,"SELECT T2.ViewCount, T3.DisplayName FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id INNER JOIN users AS T3 ON T2.LastEditorUserId = T3.Id WHERE T1.Text = 'Computer Game Datasets'","
SELECT u.DisplayName, SUM(p.ViewCount) as TotalViews
FROM posts p
JOIN users u ON p.LastEditorUserId = u.Id
WHERE p.Title = 'Computer Game Datasets';",0,codebase_community,best_pred_metadata
675,686,SELECT Id FROM posts WHERE ViewCount > ( SELECT AVG(ViewCount) FROM posts ),"
SELECT COUNT(*)
FROM posts
WHERE ViewCount > (SELECT AVG(ViewCount) FROM posts);",0,codebase_community,best_pred_metadata
676,687,SELECT COUNT(T2.Id) FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId GROUP BY T1.Id ORDER BY SUM(T1.Score) DESC LIMIT 1,"
SELECT COUNT(*)
FROM comments
WHERE PostId = (
    SELECT Id
    FROM posts
    ORDER BY Score DESC
    LIMIT 1
)",0,codebase_community,best_pred_metadata
677,688,SELECT COUNT(Id) FROM posts WHERE ViewCount > 35000 AND CommentCount = 0,"
SELECT COUNT(*)
FROM posts
WHERE ViewCount > 35000 AND CommentCount = 0;",1,codebase_community,best_pred_metadata
678,689,"SELECT T2.DisplayName, T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.Id = 183 ORDER BY T1.LastEditDate DESC LIMIT 1","
SELECT u.DisplayName, u.Location
FROM users u
JOIN postHistory ph ON u.Id = ph.UserId
WHERE ph.PostId = 183
ORDER BY ph.CreationDate DESC
LIMIT 1;",0,codebase_community,best_pred_metadata
679,690,SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Emmett' ORDER BY T1.Date DESC LIMIT 1,"
SELECT b.Id, b.Name, b.Date
FROM badges b
JOIN users u ON b.UserId = u.Id
WHERE u.DisplayName = 'Emmett'
ORDER BY b.Date DESC
LIMIT 1;",0,codebase_community,best_pred_metadata
680,691,SELECT COUNT(Id) FROM users WHERE Age BETWEEN 19 AND 65 AND UpVotes > 5000,"
SELECT COUNT(*)
FROM users
WHERE Age > 18 AND UpVotes > 5000;",1,codebase_community,best_pred_metadata
681,692,SELECT T1.Date - T2.CreationDate FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Zolomon',"
SELECT b.Date - u.CreationDate AS TimeToGetBadge
FROM badges b
JOIN users u ON b.UserId = u.Id
WHERE u.DisplayName = 'Zolomon';",1,codebase_community,best_pred_metadata
682,693,SELECT COUNT(T2.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T3.PostId = T2.Id ORDER BY T1.CreationDate DESC LIMIT 1,"
SELECT COUNT(p.Id) AS PostCount, COUNT(c.Id) AS CommentCount
FROM users u
JOIN posts p ON u.Id = p.OwnerUserId
LEFT JOIN comments c ON u.Id = c.UserId
WHERE u.CreationDate = (SELECT MAX(CreationDate) FROM users)",0,codebase_community,best_pred_metadata
683,694,"SELECT T3.Text, T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T2.Id = T3.PostId WHERE T2.Title = 'Analysing wind data with R' ORDER BY T1.CreationDate DESC LIMIT 1","
SELECT Text, UserDisplayName
FROM comments
WHERE PostId = (SELECT Id FROM posts WHERE Title = 'Analysing wind data with R')
ORDER BY CreationDate DESC
LIMIT 1;",0,codebase_community,best_pred_metadata
684,695,SELECT COUNT(id) FROM badges WHERE `Name` = 'Citizen Patrol',"
SELECT COUNT(*)
FROM users
WHERE Id IN (
    SELECT UserId
    FROM badges
    WHERE Name = 'Citizen Patrol'
);",1,codebase_community,best_pred_metadata
685,696,SELECT COUNT(Id) FROM tags WHERE TagName = 'careers',"
SELECT COUNT(*)
FROM posts
WHERE Tags LIKE '%careers%';",0,codebase_community,best_pred_metadata
686,697,"SELECT Reputation, Views FROM users WHERE DisplayName = 'Jarrod Dixon'","
SELECT Reputation, Views
FROM users
WHERE DisplayName = 'Jarrod Dixon';",1,codebase_community,best_pred_metadata
687,698,"SELECT CommentCount, AnswerCount FROM posts WHERE Title = 'Clustering 1D data'","
SELECT COUNT(*) AS TotalCommentsAndAnswers
FROM (
    SELECT Id
    FROM comments
    WHERE PostId IN (SELECT Id FROM posts WHERE Title = 'Clustering 1D data')
    UNION ALL
    SELECT Id
    FROM posts
    WHERE ParentId IN (SELECT Id FROM posts WHERE Title = 'Clustering 1D data')
) AS CombinedResults;",0,codebase_community,best_pred_metadata
688,699,SELECT CreationDate FROM users WHERE DisplayName = 'IrishStat',"
SELECT CreationDate FROM users WHERE DisplayName = 'IrishStat';",1,codebase_community,best_pred_metadata
689,700,SELECT COUNT(id) FROM votes WHERE BountyAmount >= 30,"
SELECT COUNT(*)
FROM posts
WHERE Id IN (
    SELECT PostId
    FROM votes
    WHERE BountyAmount > 30
);",0,codebase_community,best_pred_metadata
690,701,SELECT CAST(SUM(CASE WHEN T2.Score >= 50 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Id) FROM users T1 INNER JOIN posts T2 ON T1.Id = T2.OwnerUserId INNER JOIN ( SELECT MAX(Reputation) AS max_reputation FROM users ) T3 ON T1.Reputation = T3.max_reputation,"
SELECT
    (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM posts WHERE OwnerUserId = (SELECT Id FROM users ORDER BY Reputation DESC LIMIT 1))) AS percentage_with_score_above_50
FROM
    posts
WHERE
    OwnerUserId = (SELECT Id FROM users ORDER BY Reputation DESC LIMIT 1)
    AND Score > 50;",0,codebase_community,best_pred_metadata
691,702,SELECT COUNT(id) FROM posts WHERE Score < 20,"
SELECT COUNT(*) FROM posts WHERE Score < 20;",1,codebase_community,best_pred_metadata
692,703,SELECT COUNT(id) FROM tags WHERE Count <= 20 AND Id < 15,"
SELECT COUNT(*)
FROM tags
WHERE Id < 15 AND Count <= 20;",1,codebase_community,best_pred_metadata
693,704,"SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'sample'","
SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'sample';",1,codebase_community,best_pred_metadata
694,705,"SELECT T2.Reputation, T2.UpVotes FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Text = 'fine, you win :)'","
SELECT u.Reputation, u.UpVotes
FROM users u
JOIN comments c ON u.Id = c.UserId
WHERE c.Text = 'fine, you win :)';",1,codebase_community,best_pred_metadata
695,706,SELECT T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title LIKE '%linear regression%',"
SELECT comments.Text
FROM comments
JOIN posts ON comments.PostId = posts.Id
WHERE posts.Title LIKE '%linear regression%' OR posts.Body LIKE '%linear regression%' OR posts.Tags LIKE '%linear-regression%';",0,codebase_community,best_pred_metadata
696,707,SELECT Text FROM comments WHERE PostId IN ( SELECT Id FROM posts WHERE ViewCount BETWEEN 100 AND 150 ) ORDER BY Score DESC LIMIT 1,"
SELECT Text, Score
FROM comments
WHERE PostId IN (
    SELECT Id
    FROM posts
    WHERE ViewCount BETWEEN 100 AND 150
)
ORDER BY Score DESC
LIMIT 1;",0,codebase_community,best_pred_metadata
697,708,"SELECT T2.CreationDate, T2.Age FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.text LIKE '%http://%'","
SELECT u.CreationDate, u.Age
FROM users u
JOIN comments c ON u.Id = c.UserId
WHERE c.Text LIKE '%website%';",0,codebase_community,best_pred_metadata
698,709,SELECT COUNT(T1.Id) FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.ViewCount < 5 AND T2.Score = 0,"
SELECT COUNT(DISTINCT c.PostId)
FROM comments c
JOIN posts p ON c.PostId = p.Id
WHERE c.Score = 0 AND p.ViewCount < 5;",0,codebase_community,best_pred_metadata
699,710,SELECT COUNT(T1.id) FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.CommentCount = 1 AND T2.Score = 0,"
SELECT COUNT(*)
FROM comments
WHERE PostId IN (
    SELECT Id
    FROM posts
    WHERE CommentCount = 1
) AND Score = 0;",0,codebase_community,best_pred_metadata
700,711,SELECT COUNT(T1.id) FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Score = 0 AND T2.Age = 40,"
SELECT COUNT(DISTINCT u.Id)
FROM comments c
JOIN users u ON c.UserId = u.Id
WHERE c.Score = 0 AND u.Age = 40;",0,codebase_community,best_pred_metadata
701,712,"SELECT T2.Id, T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'Group differences on a five point Likert item'","
SELECT p.Id AS PostId, c.Text AS CommentText
FROM posts p
JOIN comments c ON p.Id = c.PostId
WHERE p.Title = 'Group differences on a five point Likert item';",1,codebase_community,best_pred_metadata
702,713,SELECT T2.UpVotes FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Text = 'R is also lazy evaluated.',"
SELECT u.UpVotes
FROM users u
JOIN comments c ON u.Id = c.UserId
WHERE c.Text = 'R is also lazy evaluated.';",1,codebase_community,best_pred_metadata
703,714,SELECT T1.Text FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Harvey Motulsky',"
SELECT comments.Id, comments.Text, comments.CreationDate
FROM comments
JOIN users ON comments.UserId = users.Id
WHERE users.DisplayName = 'Harvey Motulsky';",0,codebase_community,best_pred_metadata
704,715,SELECT T2.DisplayName FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Score BETWEEN 1 AND 5 AND T2.DownVotes = 0,"
SELECT u.DisplayName
FROM comments c
JOIN users u ON c.UserId = u.Id
WHERE c.Score BETWEEN 1 AND 5
AND u.DownVotes = 0;",1,codebase_community,best_pred_metadata
705,716,"SELECT CAST(SUM(IIF(T1.UpVotes = 0, 1, 0)) AS REAL) / COUNT(T1.Id) AS per FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T2.Score BETWEEN 5 AND 10","
SELECT
    (COUNT(DISTINCT c.UserId) * 100.0 / (SELECT COUNT(DISTINCT UserId) FROM comments WHERE Score BETWEEN 5 AND 10)) AS PercentageOfUsersWithZeroUpVotes
FROM
    comments c
    LEFT JOIN users u ON c.UserId = u.Id
WHERE
    c.Score BETWEEN 5 AND 10
    AND u.UpVotes = 0;",0,codebase_community,best_pred_metadata
706,717,SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = '3-D Man',"
SELECT superpower.power_name
FROM superpower
JOIN hero_power ON superpower.id = hero_power.power_id
JOIN superhero ON hero_power.hero_id = superhero.id
WHERE superhero.superhero_name = '3-D Man';",1,superhero,best_pred_metadata
707,718,SELECT COUNT(T1.hero_id) FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T2.power_name = 'Super Strength',"
SELECT COUNT(*)
FROM superhero
JOIN hero_power ON superhero.id = hero_power.hero_id
JOIN superpower ON hero_power.power_id = superpower.id
WHERE superpower.power_name = 'Super Strength';",1,superhero,best_pred_metadata
708,719,SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.height_cm > 200,"
SELECT COUNT(*)
FROM superhero
JOIN hero_power ON superhero.id = hero_power.hero_id
JOIN superpower ON hero_power.power_id = superpower.id
WHERE superpower.power_name = 'Super Strength' AND superhero.height_cm > 200;",1,superhero,best_pred_metadata
709,720,SELECT DISTINCT T1.full_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id GROUP BY T1.full_name HAVING COUNT(T2.power_id) > 15,"
SELECT s.full_name
FROM superhero s
JOIN hero_power hp ON s.id = hp.hero_id
GROUP BY s.id
HAVING COUNT(hp.power_id) > 15;",0,superhero,best_pred_metadata
710,721,SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Blue',"
SELECT COUNT(*)
FROM superhero
WHERE eye_colour_id = (SELECT id FROM colour WHERE colour = 'blue');",0,superhero,best_pred_metadata
711,722,SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id WHERE T1.superhero_name = 'Apocalypse',"
SELECT c.colour
FROM superhero s
JOIN colour c ON s.skin_colour_id = c.id
WHERE s.superhero_name = 'Apocalypse';",1,superhero,best_pred_metadata
712,723,SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN colour AS T4 ON T1.eye_colour_id = T4.id WHERE T3.power_name = 'Agility' AND T4.colour = 'Blue',"
SELECT COUNT(*)
FROM superhero
JOIN hero_power ON superhero.id = hero_power.hero_id
JOIN superpower ON hero_power.power_id = superpower.id
WHERE superhero.eye_colour_id = (SELECT id FROM colour WHERE colour = 'Blue')
AND superpower.power_name = 'Agility';",1,superhero,best_pred_metadata
713,724,SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Blue' AND T3.colour = 'Blond',"
SELECT superhero_name
FROM superhero
WHERE eye_colour_id = (SELECT id FROM colour WHERE colour = 'blue')
AND hair_colour_id = (SELECT id FROM colour WHERE colour = 'blond');",0,superhero,best_pred_metadata
714,725,SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics',"
SELECT COUNT(*)
FROM superhero
WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics');",1,superhero,best_pred_metadata
715,726,SELECT T1.full_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics' ORDER BY T1.height_cm DESC LIMIT 1,"
SELECT s.full_name
FROM superhero s
JOIN publisher p ON s.publisher_id = p.id
WHERE s.height_cm = (SELECT MAX(height_cm) FROM superhero WHERE publisher_id = p.id)
AND p.publisher_name = 'Marvel Comics';",0,superhero,best_pred_metadata
716,727,SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Sauron',"
SELECT publisher.publisher_name
FROM superhero
JOIN publisher ON superhero.publisher_id = publisher.id
WHERE superhero.superhero_name = 'Sauron';",1,superhero,best_pred_metadata
717,728,SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN colour AS T3 ON T1.eye_colour_id = T3.id WHERE T2.publisher_name = 'Marvel Comics' AND T3.colour = 'Blue',"
SELECT COUNT(*)
FROM superhero
JOIN colour AS eye_colour ON superhero.eye_colour_id = eye_colour.id
JOIN publisher ON superhero.publisher_id = publisher.id
WHERE publisher.publisher_name = 'Marvel Comics' AND eye_colour.colour = 'blue';",0,superhero,best_pred_metadata
718,729,SELECT AVG(T1.height_cm) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics',"
SELECT AVG(height_cm)
FROM superhero
WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics')",1,superhero,best_pred_metadata
719,730,SELECT CAST(COUNT(CASE WHEN T3.power_name = 'Super Strength' THEN T1.id ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN publisher AS T4 ON T1.publisher_id = T4.id WHERE T4.publisher_name = 'Marvel Comics',"
SELECT
    (COUNT(DISTINCT s.id) * 100.0 / (SELECT COUNT(DISTINCT id) FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics'))) AS percentage_super_strength
FROM
    superhero s
JOIN
    hero_power hp ON s.id = hp.hero_id
JOIN
    superpower sp ON hp.power_id = sp.id
WHERE
    s.publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics')
    AND sp.power_name = 'Super Strength';",0,superhero,best_pred_metadata
720,731,SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'DC Comics',"
SELECT COUNT(*)
FROM superhero
WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'DC Comics');",1,superhero,best_pred_metadata
721,732,SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN hero_attribute AS T3 ON T1.id = T3.hero_id INNER JOIN attribute AS T4 ON T3.attribute_id = T4.id WHERE T4.attribute_name = 'Speed' ORDER BY T3.attribute_value LIMIT 1,"
SELECT publisher.publisher_name
FROM publisher
JOIN superhero ON publisher.id = superhero.publisher_id
JOIN hero_attribute ON superhero.id = hero_attribute.hero_id
JOIN attribute ON hero_attribute.attribute_id = attribute.id
WHERE attribute.attribute_name = 'Speed'
ORDER BY hero_attribute.attribute_value ASC
LIMIT 1;",1,superhero,best_pred_metadata
722,733,SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN colour AS T3 ON T1.eye_colour_id = T3.id WHERE T2.publisher_name = 'Marvel Comics' AND T3.colour = 'Gold',"
SELECT COUNT(*)
FROM superhero
JOIN colour AS eye_colour ON superhero.eye_colour_id = eye_colour.id
JOIN publisher ON superhero.publisher_id = publisher.id
WHERE eye_colour.colour = 'gold' AND publisher.publisher_name = 'Marvel Comics';",0,superhero,best_pred_metadata
723,734,SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Blue Beetle II',"
SELECT publisher.publisher_name
FROM superhero
JOIN publisher ON superhero.publisher_id = publisher.id
WHERE superhero.superhero_name = 'Blue Beetle II';",1,superhero,best_pred_metadata
724,735,SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.hair_colour_id = T2.id WHERE T2.colour = 'Blond',"
SELECT COUNT(*)
FROM superhero
WHERE hair_colour_id = (SELECT id FROM colour WHERE colour = 'blonde');",0,superhero,best_pred_metadata
725,736,SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Intelligence' ORDER BY T2.attribute_value LIMIT 1,"
SELECT s.superhero_name
FROM superhero s
JOIN hero_attribute ha ON s.id = ha.hero_id
JOIN attribute a ON ha.attribute_id = a.id
WHERE a.attribute_name = 'Intelligence'
ORDER BY ha.attribute_value ASC
LIMIT 1;",1,superhero,best_pred_metadata
726,737,SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'Copycat',"
SELECT race.race
FROM superhero
JOIN race ON superhero.race_id = race.id
WHERE superhero.superhero_name = 'Copycat';",1,superhero,best_pred_metadata
727,738,SELECT COUNT(T1.hero_id) FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.attribute_id = T2.id WHERE T2.attribute_name = 'Durability' AND T1.attribute_value < 50,"
SELECT COUNT(*)
FROM superhero
JOIN hero_attribute ON superhero.id = hero_attribute.hero_id
JOIN attribute ON hero_attribute.attribute_id = attribute.id
WHERE attribute.attribute_name = 'Durability' AND hero_attribute.attribute_value < 50;",1,superhero,best_pred_metadata
728,739,SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Death Touch',"
SELECT superhero.superhero_name
FROM superhero
JOIN hero_power ON superhero.id = hero_power.hero_id
JOIN superpower ON hero_power.power_id = superpower.id
WHERE superpower.power_name = 'death touch';",0,superhero,best_pred_metadata
729,740,SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.attribute_name = 'Strength' AND T2.attribute_value = 100 AND T4.gender = 'Female',"
SELECT COUNT(*)
FROM superhero s
JOIN hero_attribute ha ON s.id = ha.hero_id
JOIN attribute a ON ha.attribute_id = a.id
JOIN gender g ON s.gender_id = g.id
WHERE g.gender = 'Female' AND a.attribute_name = 'Strength' AND ha.attribute_value = 100;",1,superhero,best_pred_metadata
730,741,SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id GROUP BY T1.superhero_name ORDER BY COUNT(T2.hero_id) DESC LIMIT 1,"
SELECT superhero_name
FROM superhero
WHERE id = (
    SELECT hero_id
    FROM hero_power
    GROUP BY hero_id
    ORDER BY COUNT(power_id) DESC
    LIMIT 1
)",0,superhero,best_pred_metadata
731,742,SELECT COUNT(T1.superhero_name) FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Vampire',"
SELECT COUNT(*)
FROM superhero
WHERE race_id = (SELECT id FROM race WHERE race = 'Vampire');",1,superhero,best_pred_metadata
732,743,"SELECT (CAST(COUNT(*) AS REAL) * 100 / (SELECT COUNT(*) FROM superhero)), CAST(SUM(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) AS REAL) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN alignment AS T3 ON T3.id = T1.alignment_id WHERE T3.alignment = 'Bad'","
SELECT
    (COUNT(s.id) * 100.0 / (SELECT COUNT(*) FROM superhero)) AS percentage_self_interest,
    COUNT(p.publisher_name = 'Marvel Comics') AS marvel_comics_count
FROM
    superhero s
JOIN
    alignment a ON s.alignment_id = a.id
JOIN
    publisher p ON s.publisher_id = p.id
WHERE
    a.alignment = 'good'

This query calculates the percentage of superheroes who are aligned as 'good' (self-interest or moral code) and counts the number of those superheroes published by Marvel Comics.",0,superhero,best_pred_metadata
733,744,SELECT SUM(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id,"
SELECT p.publisher_name, COUNT(s.id) AS superhero_count
FROM publisher p
JOIN superhero s ON p.id = s.publisher_id
GROUP BY p.publisher_name
ORDER BY superhero_count DESC
LIMIT 2;

-- To find the difference in the number of superheroes published by the two publishers, we can subtract the superhero_count of the second publisher from the superhero_count of the first publisher.",0,superhero,best_pred_metadata
734,745,SELECT id FROM publisher WHERE publisher_name = 'Star Trek',"
SELECT publisher_id FROM publisher WHERE publisher_name = 'Star Trek';",0,superhero,best_pred_metadata
735,746,SELECT AVG(attribute_value) FROM hero_attribute,"
SELECT AVG(attribute_value) AS average_attribute_value
FROM hero_attribute;",1,superhero,best_pred_metadata
736,747,SELECT COUNT(id) FROM superhero WHERE full_name IS NULL,"
SELECT COUNT(*)
FROM superhero
WHERE full_name IS NULL;",1,superhero,best_pred_metadata
737,748,SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.id = 75,"
SELECT colour.colour
FROM superhero
JOIN colour ON superhero.eye_colour_id = colour.id
WHERE superhero.id = 75;",1,superhero,best_pred_metadata
738,749,SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Deathlok',"
SELECT power_name
FROM superpower
JOIN hero_power ON superpower.id = hero_power.power_id
JOIN superhero ON hero_power.hero_id = superhero.id
WHERE superhero.superhero_name = 'Deathlok';",1,superhero,best_pred_metadata
739,750,SELECT AVG(T1.weight_kg) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T2.gender = 'Female',"
SELECT AVG(weight_kg)
FROM superhero
WHERE gender_id = (SELECT id FROM gender WHERE gender = 'Female');",1,superhero,best_pred_metadata
740,751,SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id INNER JOIN gender AS T4 ON T4.id = T1.gender_id WHERE T4.gender = 'Male' LIMIT 5,"
SELECT sp.power_name
FROM superpower sp
JOIN hero_power hp ON sp.id = hp.power_id
JOIN superhero sh ON hp.hero_id = sh.id
JOIN gender g ON sh.gender_id = g.id
WHERE g.gender = 'Male'
LIMIT 5;",1,superhero,best_pred_metadata
741,752,SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Alien',"
SELECT s.superhero_name
FROM superhero s
JOIN race r ON s.race_id = r.id
WHERE r.race <> 'Human';",0,superhero,best_pred_metadata
742,753,SELECT DISTINCT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.height_cm BETWEEN 170 AND 190 AND T2.colour LIKE 'No Colour',"
SELECT superhero_name
FROM superhero
WHERE height_cm BETWEEN 170 AND 190
AND eye_colour_id IS NULL;",0,superhero,best_pred_metadata
743,754,SELECT T2.power_name FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T1.hero_id = 56,"
SELECT power_name
FROM superpower
JOIN hero_power ON superpower.id = hero_power.power_id
WHERE hero_power.hero_id = 56;",1,superhero,best_pred_metadata
744,755,SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Demi-God',"
SELECT s.full_name
FROM superhero s
JOIN race r ON s.race_id = r.id
WHERE r.race = 'Demi-God'
LIMIT 5;",1,superhero,best_pred_metadata
745,756,SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Bad',"
SELECT COUNT(*)
FROM superhero
WHERE alignment_id = (SELECT id FROM alignment WHERE alignment = 'bad');",0,superhero,best_pred_metadata
746,757,SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.weight_kg = 169,"
SELECT race.race
FROM superhero
JOIN race ON superhero.race_id = race.id
WHERE superhero.weight_kg = 169;",1,superhero,best_pred_metadata
747,758,SELECT DISTINCT T3.colour FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T1.height_cm = 185 AND T2.race = 'Human',"
SELECT c.colour
FROM superhero s
JOIN colour c ON s.hair_colour_id = c.id
WHERE s.race_id = (SELECT id FROM race WHERE race = 'Human')
AND s.height_cm = 185;",0,superhero,best_pred_metadata
748,759,SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id ORDER BY T1.weight_kg DESC LIMIT 1,"
SELECT c.colour AS eye_colour
FROM superhero s
JOIN colour c ON s.eye_colour_id = c.id
WHERE s.weight_kg = (SELECT MAX(weight_kg) FROM superhero);",1,superhero,best_pred_metadata
749,760,SELECT CAST(COUNT(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.height_cm BETWEEN 150 AND 180,"
SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM superhero WHERE height_cm BETWEEN 150 AND 180) AS percentage_marvel_heroes
FROM superhero
JOIN publisher ON superhero.publisher_id = publisher.id
WHERE publisher.publisher_name = 'Marvel Comics' AND height_cm BETWEEN 150 AND 180;",1,superhero,best_pred_metadata
750,761,SELECT T1.full_name FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T2.gender = 'Male' AND T1.weight_kg * 100 > ( SELECT AVG(weight_kg) FROM superhero ) * 79,"
SELECT s.full_name
FROM superhero s
JOIN gender g ON s.gender_id = g.id
WHERE g.gender = 'Male'
AND s.weight_kg > (SELECT 0.79 * AVG(weight_kg) FROM superhero)",1,superhero,best_pred_metadata
751,762,SELECT T2.power_name FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id GROUP BY T2.power_name ORDER BY COUNT(T1.hero_id) DESC LIMIT 1,"
SELECT power_name, COUNT(*) as count
FROM superpower
JOIN hero_power ON superpower.id = hero_power.power_id
GROUP BY power_name
ORDER BY count DESC
LIMIT 1;",0,superhero,best_pred_metadata
752,763,SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Abomination',"
SELECT ha.attribute_value
FROM superhero s
JOIN hero_attribute ha ON s.id = ha.hero_id
JOIN attribute a ON ha.attribute_id = a.id
WHERE s.superhero_name = 'Abomination';",1,superhero,best_pred_metadata
753,764,SELECT DISTINCT T2.power_name FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T1.hero_id = 1,"
SELECT power_name
FROM superpower
JOIN hero_power ON superpower.id = hero_power.power_id
WHERE hero_power.hero_id = 1;",1,superhero,best_pred_metadata
754,765,SELECT COUNT(T1.hero_id) FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T2.power_name = 'Stealth',"
SELECT COUNT(*)
FROM superhero sh
JOIN hero_power hp ON sh.id = hp.hero_id
JOIN superpower sp ON hp.power_id = sp.id
WHERE sp.power_name = 'stealth';",0,superhero,best_pred_metadata
755,766,SELECT T1.full_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Strength' ORDER BY T2.attribute_value DESC LIMIT 1,"
SELECT s.full_name
FROM superhero s
JOIN hero_attribute ha ON s.id = ha.hero_id
JOIN attribute a ON ha.attribute_id = a.id
WHERE a.attribute_name = 'Strength'
ORDER BY ha.attribute_value DESC
LIMIT 1;",1,superhero,best_pred_metadata
756,767,SELECT CAST(COUNT(*) AS REAL) / SUM(CASE WHEN T2.id = 1 THEN 1 ELSE 0 END) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id,"
SELECT AVG(height_cm) AS average_height
FROM superhero
WHERE skin_colour_id IS NULL;",0,superhero,best_pred_metadata
757,768,SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Dark Horse Comics',"
SELECT COUNT(*)
FROM superhero
WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Dark Horse Comics');",1,superhero,best_pred_metadata
758,769,SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T3.id = T2.attribute_id INNER JOIN publisher AS T4 ON T4.id = T1.publisher_id WHERE T4.publisher_name = 'Dark Horse Comics' AND T3.attribute_name = 'Durability' ORDER BY T2.attribute_value DESC LIMIT 1,"
SELECT s.superhero_name
FROM superhero s
JOIN hero_attribute ha ON s.id = ha.hero_id
JOIN attribute a ON ha.attribute_id = a.id
JOIN publisher p ON s.publisher_id = p.id
WHERE a.attribute_name = 'Durability'
AND p.publisher_name = 'Dark Horse Comics'
ORDER BY ha.attribute_value DESC
LIMIT 1;",1,superhero,best_pred_metadata
759,770,SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Abraham Sapien',"
SELECT c.colour
FROM superhero s
JOIN colour c ON s.eye_colour_id = c.id
WHERE s.superhero_name = 'Abraham Sapien';",0,superhero,best_pred_metadata
760,771,SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Flight',"
SELECT superhero.superhero_name
FROM superhero
JOIN hero_power ON superhero.id = hero_power.hero_id
JOIN superpower ON hero_power.power_id = superpower.id
WHERE superpower.power_name = 'flight';",0,superhero,best_pred_metadata
761,772,"SELECT T1.eye_colour_id, T1.hair_colour_id, T1.skin_colour_id FROM superhero AS T1 INNER JOIN publisher AS T2 ON T2.id = T1.publisher_id INNER JOIN gender AS T3 ON T3.id = T1.gender_id WHERE T2.publisher_name = 'Dark Horse Comics' AND T3.gender = 'Female'","
SELECT s.superhero_name, c1.colour AS eye_colour, c2.colour AS hair_colour, c3.colour AS skin_colour
FROM superhero s
JOIN colour c1 ON s.eye_colour_id = c1.id
JOIN colour c2 ON s.hair_colour_id = c2.id
JOIN colour c3 ON s.skin_colour_id = c3.id
JOIN gender g ON s.gender_id = g.id
JOIN publisher p ON s.publisher_id = p.id
WHERE g.gender = 'Female' AND p.publisher_name = 'Dark Horse Comics';",0,superhero,best_pred_metadata
762,773,"SELECT T1.superhero_name, T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.eye_colour_id = T1.hair_colour_id AND T1.eye_colour_id = T1.skin_colour_id","
SELECT s.superhero_name, p.publisher_name
FROM superhero s
JOIN publisher p ON s.publisher_id = p.id
WHERE s.eye_colour_id = s.hair_colour_id AND s.hair_colour_id = s.skin_colour_id;",1,superhero,best_pred_metadata
763,774,SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'A-Bomb',"
SELECT publisher_name
FROM publisher
JOIN superhero ON publisher.id = superhero.publisher_id
WHERE superhero.superhero_name = 'A-Bomb';",0,superhero,best_pred_metadata
764,775,SELECT CAST(COUNT(CASE WHEN T3.colour = 'Blue' THEN T1.id ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id INNER JOIN colour AS T3 ON T1.skin_colour_id = T3.id WHERE T2.gender = 'Female',"
SELECT
    (COUNT(DISTINCT s.id) * 100.0) / (SELECT COUNT(DISTINCT id) FROM superhero WHERE gender_id = (SELECT id FROM gender WHERE gender = 'Female')) AS percentage_blue_female_superheroes
FROM
    superhero s
JOIN
    gender g ON s.gender_id = g.id
JOIN
    colour c ON s.eye_colour_id = c.id
WHERE
    g.gender = 'Female' AND c.colour = 'Blue';",0,superhero,best_pred_metadata
765,776,"SELECT T1.superhero_name, T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.full_name = 'Charles Chandler'","
SELECT superhero_name, race.race
FROM superhero
JOIN race ON superhero.race_id = race.id
WHERE superhero_name = 'Charles Chandler';",0,superhero,best_pred_metadata
766,777,SELECT T2.gender FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T1.superhero_name = 'Agent 13',"
SELECT g.gender
FROM superhero s
JOIN gender g ON s.gender_id = g.id
WHERE s.superhero_name = 'Agent 13';",1,superhero,best_pred_metadata
767,778,SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Adaptation',"
SELECT superhero.superhero_name
FROM superhero
JOIN hero_power ON superhero.id = hero_power.hero_id
JOIN superpower ON hero_power.power_id = superpower.id
WHERE superpower.power_name = 'adaptation';",0,superhero,best_pred_metadata
768,779,SELECT COUNT(T1.power_id) FROM hero_power AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id WHERE T2.superhero_name = 'Amazo',"
SELECT COUNT(power_id)
FROM hero_power
WHERE hero_id = (SELECT id FROM superhero WHERE superhero_name = 'Amazo');",1,superhero,best_pred_metadata
769,780,SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Hunter Zolomon',"
SELECT power_name
FROM superpower
JOIN hero_power ON superpower.id = hero_power.power_id
JOIN superhero ON hero_power.hero_id = superhero.id
WHERE superhero.superhero_name = 'Hunter Zolomon';",0,superhero,best_pred_metadata
770,781,SELECT T1.height_cm FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Amber',"
SELECT superhero.height_cm
FROM superhero
JOIN colour ON superhero.eye_colour_id = colour.id
WHERE colour.colour = 'amber';",0,superhero,best_pred_metadata
771,782,SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id AND T1.hair_colour_id = T2.id WHERE T2.colour = 'Black',"
SELECT s.superhero_name
FROM superhero s
JOIN colour ec ON s.eye_colour_id = ec.id
JOIN colour hc ON s.hair_colour_id = hc.id
WHERE ec.colour = 'black' AND hc.colour = 'black';",0,superhero,best_pred_metadata
772,783,SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.skin_colour_id = T3.id WHERE T3.colour = 'Gold',"
SELECT c.colour AS eye_colour
FROM superhero s
JOIN colour c ON s.eye_colour_id = c.id
WHERE s.skin_colour_id = (SELECT id FROM colour WHERE colour = 'gold');",0,superhero,best_pred_metadata
773,784,SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Vampire',"
SELECT s.full_name
FROM superhero s
JOIN race r ON s.race_id = r.id
WHERE r.race = 'Vampire';",1,superhero,best_pred_metadata
774,785,SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Neutral',"
SELECT superhero_name
FROM superhero
JOIN alignment ON superhero.alignment_id = alignment.id
WHERE alignment.alignment = 'neutral';",0,superhero,best_pred_metadata
775,786,SELECT COUNT(T1.hero_id) FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.attribute_id = T2.id WHERE T2.attribute_name = 'Strength' AND T1.attribute_value = ( SELECT MAX(attribute_value) FROM hero_attribute ),"
SELECT COUNT(*)
FROM superhero
WHERE id IN (
    SELECT hero_id
    FROM hero_attribute
    WHERE attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'Strength')
    ORDER BY attribute_value DESC
    LIMIT 1
)",0,superhero,best_pred_metadata
776,787,"SELECT T2.race, T3.alignment FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN alignment AS T3 ON T1.alignment_id = T3.id WHERE T1.superhero_name = 'Cameron Hicks'","
SELECT race.race, alignment.alignment
FROM superhero
JOIN race ON superhero.race_id = race.id
JOIN alignment ON superhero.alignment_id = alignment.id
WHERE superhero.superhero_name = 'Cameron Hicks';",1,superhero,best_pred_metadata
777,788,SELECT CAST(COUNT(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T3.gender = 'Female',"
SELECT
    (COUNT(DISTINCT s.id) * 100.0 /
    (SELECT COUNT(DISTINCT id) FROM superhero WHERE gender_id = (SELECT id FROM gender WHERE gender = 'Female'))) AS percentage_female_heroes_marvel
FROM
    superhero s
JOIN
    gender g ON s.gender_id = g.id
JOIN
    publisher p ON s.publisher_id = p.id
WHERE
    g.gender = 'Female' AND p.publisher_name = 'Marvel Comics';",0,superhero,best_pred_metadata
778,789,SELECT CAST(SUM(T1.weight_kg) AS REAL) / COUNT(T1.id) FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Alien',"
SELECT AVG(weight_kg)
FROM superhero
WHERE race_id <> (SELECT id FROM race WHERE race = 'Human')

This query first selects the id of the 'Human' race from the race table. Then, it selects the superheroes who have a race_id that is not equal to the id of the 'Human' race. Finally, it calculates the average weight of these superheroes.",0,superhero,best_pred_metadata
779,790,SELECT ( SELECT weight_kg FROM superhero WHERE full_name LIKE 'Emil Blonsky' ) - ( SELECT weight_kg FROM superhero WHERE full_name LIKE 'Charles Chandler' ) AS CALCULATE,"
SELECT
    (SELECT weight_kg FROM superhero WHERE superhero_name = 'Emil Blonsky') -
    (SELECT weight_kg FROM superhero WHERE superhero_name = 'Charles Chandler') AS weight_difference;",0,superhero,best_pred_metadata
780,791,SELECT CAST(SUM(height_cm) AS REAL) / COUNT(id) FROM superhero,"
SELECT superhero_name, AVG(height_cm) AS average_height
FROM superhero
GROUP BY superhero_name;",0,superhero,best_pred_metadata
781,792,SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Abomination',"
SELECT superpower.power_name
FROM superhero
JOIN hero_power ON superhero.id = hero_power.hero_id
JOIN superpower ON hero_power.power_id = superpower.id
WHERE superhero.superhero_name = 'Abomination';",1,superhero,best_pred_metadata
782,793,SELECT COUNT(*) FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN gender AS T3 ON T3.id = T1.gender_id WHERE T1.race_id = 21 AND T1.gender_id = 1,"
SELECT COUNT(*)
FROM superhero
WHERE race_id = (SELECT id FROM race WHERE race = 'god/eternal')
AND gender_id = (SELECT id FROM gender WHERE gender = 'male');",0,superhero,best_pred_metadata
783,794,SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Speed' ORDER BY T2.attribute_value DESC LIMIT 1,"
SELECT s.superhero_name
FROM superhero s
JOIN hero_attribute ha ON s.id = ha.hero_id
JOIN attribute a ON ha.attribute_id = a.id
WHERE a.attribute_name = 'Speed'
ORDER BY ha.attribute_value DESC
LIMIT 1;",1,superhero,best_pred_metadata
784,795,SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Neutral',"
SELECT COUNT(*)
FROM superhero
WHERE alignment_id = (SELECT id FROM alignment WHERE alignment = 'neutral');",0,superhero,best_pred_metadata
785,796,"SELECT T3.attribute_name, T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = '3-D Man'","
SELECT a.attribute_name, ha.attribute_value
FROM superhero s
JOIN hero_attribute ha ON s.id = ha.hero_id
JOIN attribute a ON ha.attribute_id = a.id
WHERE s.superhero_name = '3-D Man';",1,superhero,best_pred_metadata
786,797,SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Blue' AND T3.colour = 'Brown',"
SELECT s.superhero_name
FROM superhero s
JOIN colour eye_colour ON s.eye_colour_id = eye_colour.id
JOIN colour hair_colour ON s.hair_colour_id = hair_colour.id
WHERE eye_colour.colour = 'blue' AND hair_colour.colour = 'brown';",0,superhero,best_pred_metadata
787,798,"SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy')","
SELECT publisher.publisher_name
FROM superhero
JOIN publisher ON superhero.publisher_id = publisher.id
WHERE superhero.superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy');",1,superhero,best_pred_metadata
788,799,SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.id = 1,"
SELECT COUNT(*)
FROM superhero
WHERE publisher_id IS NULL;",0,superhero,best_pred_metadata
789,800,SELECT CAST(COUNT(CASE WHEN T2.colour = 'Blue' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id,"
SELECT
    (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM superhero)) AS percentage_blue_eyed_superheroes
FROM
    superhero
WHERE
    eye_colour_id = (SELECT id FROM colour WHERE colour = 'Blue');",1,superhero,best_pred_metadata
790,802,SELECT superhero_name FROM superhero ORDER BY height_cm DESC LIMIT 1,"
SELECT superhero_name, height_cm
FROM superhero
ORDER BY height_cm DESC
LIMIT 1;",0,superhero,best_pred_metadata
791,803,SELECT id FROM superpower WHERE power_name = 'Cryokinesis',"
SELECT id FROM superpower WHERE power_name = 'cryokinesis';",0,superhero,best_pred_metadata
792,804,SELECT superhero_name FROM superhero WHERE id = 294,"
SELECT superhero_name FROM superhero WHERE id = 294;",1,superhero,best_pred_metadata
793,805,SELECT DISTINCT full_name FROM superhero WHERE full_name IS NOT NULL AND (weight_kg IS NULL OR weight_kg = 0),"
SELECT full_name
FROM superhero
WHERE weight_kg IS NULL;",0,superhero,best_pred_metadata
794,806,SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Karen Beecher-Duncan',"
SELECT colour.colour
FROM superhero
JOIN colour ON superhero.eye_colour_id = colour.id
WHERE superhero.full_name = 'Karen Beecher-Duncan';",1,superhero,best_pred_metadata
795,807,SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Helen Parr',"
SELECT power_name
FROM superpower
JOIN hero_power ON superpower.id = hero_power.power_id
JOIN superhero ON hero_power.hero_id = superhero.id
WHERE superhero.full_name = 'Helen Parr';",1,superhero,best_pred_metadata
796,808,SELECT DISTINCT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.weight_kg = 108 AND T1.height_cm = 188,"
SELECT race.race
FROM superhero
JOIN race ON superhero.race_id = race.id
WHERE superhero.weight_kg = 108 AND superhero.height_cm = 188;",0,superhero,best_pred_metadata
797,809,SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.id = 38,"
SELECT publisher.publisher_name
FROM superhero
JOIN publisher ON superhero.publisher_id = publisher.id
WHERE superhero.id = 38;",1,superhero,best_pred_metadata
798,811,SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id WHERE T1.superhero_name = 'Atom IV',"
SELECT a.alignment, sp.power_name
FROM superhero sh
JOIN alignment a ON sh.alignment_id = a.id
JOIN hero_power hp ON sh.id = hp.hero_id
JOIN superpower sp ON hp.power_id = sp.id
WHERE sh.superhero_name = 'Atom IV';",0,superhero,best_pred_metadata
799,812,SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Blue' LIMIT 5,"
SELECT full_name
FROM superhero
WHERE eye_colour_id = (SELECT id FROM colour WHERE colour = 'blue')
LIMIT 5;",0,superhero,best_pred_metadata
800,813,SELECT AVG(T1.attribute_value) FROM hero_attribute AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id INNER JOIN alignment AS T3 ON T2.alignment_id = T3.id WHERE T3.alignment = 'Neutral',"
SELECT AVG(attribute_value)
FROM hero_attribute
JOIN superhero ON hero_attribute.hero_id = superhero.id
JOIN alignment ON superhero.alignment_id = alignment.id
WHERE alignment.alignment = 'neutral';",0,superhero,best_pred_metadata
801,814,SELECT DISTINCT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id INNER JOIN hero_attribute AS T3 ON T1.id = T3.hero_id WHERE T3.attribute_value = 100,"
SELECT c.colour AS skin_colour
FROM superhero s
JOIN colour c ON s.skin_colour_id = c.id
JOIN hero_attribute ha ON s.id = ha.hero_id
WHERE ha.attribute_value = 100;",0,superhero,best_pred_metadata
802,815,SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T2.alignment = 'Good' AND T3.gender = 'Female',"
SELECT COUNT(*)
FROM superhero s
JOIN gender g ON s.gender_id = g.id
JOIN alignment a ON s.alignment_id = a.id
WHERE g.gender = 'Female' AND a.alignment = 'Good';",1,superhero,best_pred_metadata
803,816,SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T2.attribute_value BETWEEN 75 AND 80,"
SELECT s.superhero_name
FROM superhero s
JOIN hero_attribute ha ON s.id = ha.hero_id
WHERE ha.attribute_value BETWEEN 75 AND 80;",1,superhero,best_pred_metadata
804,817,SELECT T3.race FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.hair_colour_id = T2.id INNER JOIN race AS T3 ON T1.race_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T2.colour = 'Blue' AND T4.gender = 'Male',"
SELECT race.race
FROM superhero
JOIN colour ON superhero.hair_colour_id = colour.id
JOIN gender ON superhero.gender_id = gender.id
JOIN race ON superhero.race_id = race.id
WHERE colour.colour = 'blue' AND gender.gender = 'male';",0,superhero,best_pred_metadata
805,818,SELECT CAST(COUNT(CASE WHEN T3.gender = 'Female' THEN T1.id ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T2.alignment = 'Bad',"
SELECT
    (COUNT(DISTINCT s.id) * 100.0 / (SELECT COUNT(DISTINCT s.id) FROM superhero s JOIN alignment a ON s.alignment_id = a.id WHERE a.alignment = 'bad')) AS percentage_female_bad_superheroes
FROM
    superhero s
JOIN
    alignment a ON s.alignment_id = a.id
JOIN
    gender g ON s.gender_id = g.id
WHERE
    a.alignment = 'bad' AND g.gender = 'Female';",0,superhero,best_pred_metadata
806,819,SELECT SUM(CASE WHEN T2.id = 7 THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.id = 1 THEN 1 ELSE 0 END) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.weight_kg = 0 OR T1.weight_kg is NULL,"
SELECT
    (SELECT COUNT(*) FROM superhero WHERE eye_colour_id = (SELECT id FROM colour WHERE colour = 'Blue') AND weight_kg IS NULL)
    -
    (SELECT COUNT(*) FROM superhero WHERE eye_colour_id IS NULL AND weight_kg IS NULL) AS difference;",0,superhero,best_pred_metadata
807,820,SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = 'Hulk' AND T3.attribute_name = 'Strength',"
SELECT ha.attribute_value
FROM superhero s
JOIN hero_attribute ha ON s.id = ha.hero_id
JOIN attribute a ON ha.attribute_id = a.id
WHERE s.superhero_name = 'Hulk' AND a.attribute_name = 'Strength';",1,superhero,best_pred_metadata
808,821,SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Ajax',"
SELECT superpower.power_name
FROM superhero
JOIN hero_power ON superhero.id = hero_power.hero_id
JOIN superpower ON hero_power.power_id = superpower.id
WHERE superhero.superhero_name = 'Ajax';",1,superhero,best_pred_metadata
809,822,SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id INNER JOIN colour AS T3 ON T1.skin_colour_id = T3.id WHERE T2.alignment = 'Bad' AND T3.colour = 'Green',"
SELECT COUNT(*)
FROM superhero
WHERE skin_colour_id = (SELECT id FROM colour WHERE colour = 'Green')
AND alignment_id = (SELECT id FROM alignment WHERE alignment = 'Villain');",0,superhero,best_pred_metadata
810,823,SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T2.publisher_name = 'Marvel Comics' AND T3.gender = 'Female',"
SELECT COUNT(*)
FROM superhero
JOIN publisher ON superhero.publisher_id = publisher.id
JOIN gender ON superhero.gender_id = gender.id
WHERE publisher.publisher_name = 'Marvel Comics' AND gender.gender = 'Female';",1,superhero,best_pred_metadata
811,824,SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Wind Control' ORDER BY T1.superhero_name,"
SELECT superhero_name
FROM superhero
JOIN hero_power ON superhero.id = hero_power.hero_id
JOIN superpower ON hero_power.power_id = superpower.id
WHERE power_name = 'Control Wind'
ORDER BY superhero_name;",0,superhero,best_pred_metadata
812,825,SELECT T4.gender FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.power_name = 'Phoenix Force',"
SELECT g.gender
FROM superhero s
JOIN gender g ON s.gender_id = g.id
JOIN hero_power hp ON s.id = hp.hero_id
JOIN superpower sp ON hp.power_id = sp.id
WHERE sp.power_name = 'Phoenix Force';",1,superhero,best_pred_metadata
813,826,SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'DC Comics' ORDER BY T1.weight_kg DESC LIMIT 1,"
SELECT s.superhero_name, s.weight_kg
FROM superhero s
JOIN publisher p ON s.publisher_id = p.id
WHERE p.publisher_name = 'DC Comics'
ORDER BY s.weight_kg DESC
LIMIT 1;",0,superhero,best_pred_metadata
814,827,SELECT AVG(T1.height_cm) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN race AS T3 ON T1.race_id = T3.id WHERE T2.publisher_name = 'Dark Horse Comics' AND T3.race != 'Human',"
SELECT AVG(height_cm)
FROM superhero
WHERE race_id != (SELECT id FROM race WHERE race = 'Human')
AND publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Dark Horse Comics');",1,superhero,best_pred_metadata
815,828,SELECT COUNT(T3.superhero_name) FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.attribute_id = T2.id INNER JOIN superhero AS T3 ON T1.hero_id = T3.id WHERE T2.attribute_name = 'Speed' ORDER BY T1.attribute_value DESC LIMIT 1,"
SELECT COUNT(*)
FROM superhero
WHERE id IN (
    SELECT hero_id
    FROM hero_attribute
    WHERE attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'Speed')
    ORDER BY attribute_value DESC
    LIMIT 1
);",0,superhero,best_pred_metadata
816,831,SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Abomination',"
SELECT c.colour
FROM superhero s
JOIN colour c ON s.eye_colour_id = c.id
WHERE s.superhero_name = 'Abomination';",1,superhero,best_pred_metadata
817,832,SELECT superhero_name FROM superhero ORDER BY height_cm DESC LIMIT 1,"
SELECT superhero_name, height_cm
FROM superhero
ORDER BY height_cm DESC
LIMIT 1;",0,superhero,best_pred_metadata
818,833,SELECT superhero_name FROM superhero WHERE full_name = 'Charles Chandler',"
SELECT superhero_name
FROM superhero
WHERE full_name = 'Charles Chandler';",1,superhero,best_pred_metadata
819,834,SELECT CAST(COUNT(CASE WHEN T3.gender = 'Female' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T2.publisher_name = 'George Lucas',"
SELECT
    (COUNT(DISTINCT s.id) * 100.0 / (SELECT COUNT(DISTINCT s.id) FROM superhero s JOIN publisher p ON s.publisher_id = p.id WHERE p.publisher_name = 'George Lucas')) AS percentage_female_superheroes
FROM
    superhero s
JOIN
    publisher p ON s.publisher_id = p.id
JOIN
    gender g ON s.gender_id = g.id
WHERE
    p.publisher_name = 'George Lucas' AND g.gender = 'Female';",1,superhero,best_pred_metadata
820,835,SELECT CAST(COUNT(CASE WHEN T3.alignment = 'Good' THEN T1.id ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN alignment AS T3 ON T1.alignment_id = T3.id WHERE T2.publisher_name = 'Marvel Comics',"
SELECT
    (COUNT(DISTINCT s.id) * 100.0 / (SELECT COUNT(DISTINCT id) FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics'))) AS percentage_good_superheroes
FROM
    superhero s
JOIN
    alignment a ON s.alignment_id = a.id
WHERE
    s.publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics')
    AND a.alignment = 'good';",0,superhero,best_pred_metadata
821,836,SELECT COUNT(id) FROM superhero WHERE full_name LIKE 'John%',"
SELECT COUNT(*)
FROM superhero
WHERE full_name LIKE 'John%';",1,superhero,best_pred_metadata
822,837,SELECT hero_id FROM hero_attribute WHERE attribute_value = ( SELECT MIN(attribute_value) FROM hero_attribute ),"
SELECT hero_id
FROM hero_attribute
WHERE attribute_value = (SELECT MIN(attribute_value) FROM hero_attribute);",1,superhero,best_pred_metadata
823,838,SELECT full_name FROM superhero WHERE superhero_name = 'Alien',"
SELECT full_name
FROM superhero
WHERE superhero_name = 'Alien';",1,superhero,best_pred_metadata
824,839,SELECT T1.full_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.weight_kg < 100 AND T2.colour = 'Brown',"
SELECT superhero.full_name
FROM superhero
JOIN colour AS eye_colour ON superhero.eye_colour_id = eye_colour.id
WHERE superhero.weight_kg < 100 AND eye_colour.colour = 'brown';",0,superhero,best_pred_metadata
825,840,SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Aquababy',"
SELECT ha.attribute_value
FROM superhero s
JOIN hero_attribute ha ON s.id = ha.hero_id
JOIN attribute a ON ha.attribute_id = a.id
WHERE s.superhero_name = 'Aquababy';",1,superhero,best_pred_metadata
826,841,"SELECT T1.weight_kg, T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.id = 40","
SELECT weight_kg, race
FROM superhero
JOIN race ON superhero.race_id = race.id
WHERE superhero.id = 40;",1,superhero,best_pred_metadata
827,842,SELECT AVG(T1.height_cm) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Neutral',"
SELECT AVG(height_cm)
FROM superhero
WHERE alignment_id = (SELECT id FROM alignment WHERE alignment = 'neutral');",0,superhero,best_pred_metadata
828,843,SELECT T1.hero_id FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T2.power_name = 'Intelligence',"
SELECT s.id AS hero_id
FROM superhero s
JOIN hero_power hp ON s.id = hp.hero_id
JOIN superpower sp ON hp.power_id = sp.id
WHERE sp.power_name = 'Intelligence';",1,superhero,best_pred_metadata
829,844,SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Blackwulf',"
SELECT c.colour
FROM superhero s
JOIN colour c ON s.eye_colour_id = c.id
WHERE s.superhero_name = 'Blackwulf';",1,superhero,best_pred_metadata
830,845,SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.height_cm * 100 > ( SELECT AVG(height_cm) FROM superhero ) * 80,"
SELECT superpower.power_name
FROM superhero
JOIN hero_power ON superhero.id = hero_power.hero_id
JOIN superpower ON hero_power.power_id = superpower.id
WHERE superhero.height_cm > (SELECT 0.8 * AVG(height_cm) FROM superhero)",1,superhero,best_pred_metadata
831,846,SELECT T2.driverRef FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 18 ORDER BY T1.q1 DESC LIMIT 5,"
SELECT d.driverRef
FROM drivers d
JOIN results r ON d.driverId = r.driverId
WHERE r.raceId = 18 AND r.statusId IN (
    SELECT s.statusId
    FROM status s
    WHERE s.status = 'Eliminated' AND s.statusId < 10
)",0,formula_1,best_pred_metadata
832,847,SELECT T2.surname FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 19 AND T1.q2 IS NOT NULL ORDER BY T1.q2 ASC LIMIT 1,"
SELECT d.surname
FROM drivers d
JOIN lapTimes lt ON d.driverId = lt.driverId
JOIN races r ON lt.raceId = r.raceId
WHERE r.raceId = 19 AND lt.milliseconds = (
    SELECT MIN(milliseconds)
    FROM lapTimes
    WHERE raceId = 19 AND lap > (SELECT COUNT(*) / 2 FROM lapTimes WHERE raceId = 19)
)",0,formula_1,best_pred_metadata
833,848,SELECT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.location = 'Shanghai',"
SELECT year
FROM races
WHERE circuitId IN (
    SELECT circuitId
    FROM circuits
    WHERE location = 'Shanghai'
);",1,formula_1,best_pred_metadata
834,849,SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Circuit de Barcelona-Catalunya',"
SELECT url FROM races WHERE circuitId = (SELECT circuitId FROM circuits WHERE name = 'Circuit de Barcelona-Catalunya');",0,formula_1,best_pred_metadata
835,850,SELECT DISTINCT T2.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.country = 'Germany',"
SELECT name
FROM races
WHERE circuitId IN (
    SELECT circuitId
    FROM circuits
    WHERE country = 'Germany'
);",0,formula_1,best_pred_metadata
836,851,SELECT DISTINCT T1.position FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T2.constructorId = T1.constructorId WHERE T2.name = 'Renault',"
SELECT c.name AS circuit_name, cs.position
FROM circuits c
JOIN races r ON c.circuitId = r.circuitId
JOIN constructorResults cr ON r.raceId = cr.raceId
JOIN constructors co ON cr.constructorId = co.constructorId
JOIN constructorStandings cs ON cr.raceId = cs.raceId AND cr.constructorId = cs.constructorId
WHERE co.name = 'Renault'
ORDER BY cs.position;",0,formula_1,best_pred_metadata
837,852,"SELECT COUNT(T3.raceId) FROM circuits AS T1 INNER JOIN races AS T3 ON T3.circuitID = T1.circuitId WHERE T1.country NOT IN ( 'Bahrain', 'China', 'Singapore', 'Japan', 'Korea', 'Turkey', 'UAE', 'Malaysia', 'Spain', 'Monaco', 'Azerbaijan', 'Austria', 'Belgium', 'France', 'Germany', 'Hungary', 'Italy', 'UK' ) AND T3.year = 2010","
SELECT COUNT(*)
FROM races
WHERE year = 2010
AND circuitId IN (
    SELECT circuitId
    FROM circuits
    WHERE country NOT IN ('Asia', 'Europe')
)
AND name LIKE '%Grand Prix%';",0,formula_1,best_pred_metadata
838,853,SELECT DISTINCT T2.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.country = 'Spain',"
SELECT r.name
FROM races r
JOIN circuits c ON r.circuitId = c.circuitId
WHERE c.country = 'Spain';",0,formula_1,best_pred_metadata
839,854,"SELECT DISTINCT T1.lat, T1.lng FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'Australian Grand Prix'","
SELECT lat, lng FROM circuits WHERE name = 'Australian Grand Prix';",0,formula_1,best_pred_metadata
840,855,SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Sepang International Circuit',"
SELECT *
FROM races
WHERE circuitId = (SELECT circuitId FROM circuits WHERE name = 'Sepang International Circuit');",0,formula_1,best_pred_metadata
841,856,SELECT DISTINCT T2.time FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Sepang International Circuit',"
SELECT r.time
FROM races r
JOIN circuits c ON r.circuitId = c.circuitId
WHERE c.name = 'Sepang International Circuit';",0,formula_1,best_pred_metadata
842,857,"SELECT DISTINCT T1.lat, T1.lng, T1.location FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'Abu Dhabi Grand Prix'","
SELECT lat, lng FROM circuits WHERE name = 'Abu Dhabi Grand Prix';",0,formula_1,best_pred_metadata
843,858,SELECT T2.nationality FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T2.constructorId = T1.constructorId WHERE T1.raceId = 24 AND T1.points = 1,"
SELECT c.country
FROM constructors AS co
JOIN constructorResults AS cr ON co.constructorId = cr.constructorId
JOIN races AS r ON cr.raceId = r.raceId
WHERE cr.points = 1 AND r.round = 24;",0,formula_1,best_pred_metadata
844,859,SELECT T1.q1 FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 354 AND T2.forename = 'Bruno' AND T2.surname = 'Senna',"
SELECT q1
FROM qualifying
JOIN drivers ON qualifying.driverId = drivers.driverId
WHERE drivers.forename = 'Bruno' AND drivers.surname = 'Senna' AND qualifying.raceId = 354;",1,formula_1,best_pred_metadata
845,860,SELECT DISTINCT T2.nationality FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 355 AND T1.q2 LIKE '1:40%',"
SELECT d.nationality
FROM drivers d
JOIN qualifying q ON d.driverId = q.driverId
WHERE q.raceId = 355 AND q.q2 = '0:01:40';",0,formula_1,best_pred_metadata
846,861,SELECT T2.number FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 903 AND T1.q3 LIKE '1:54%',"
SELECT d.number
FROM qualifying q
JOIN drivers d ON q.driverId = d.driverId
WHERE q.q3 = '0:01:54' AND q.raceId = 903;",0,formula_1,best_pred_metadata
847,862,SELECT COUNT(T3.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.year = 2007 AND T1.name = 'Bahrain Grand Prix' AND T2.time IS NULL,"
SELECT COUNT(*)
FROM results
WHERE raceId = (SELECT raceId FROM races WHERE name = 'Bahrain Grand Prix' AND year = 2007)
AND position IS NULL;",0,formula_1,best_pred_metadata
848,863,SELECT T2.url FROM races AS T1 INNER JOIN seasons AS T2 ON T2.year = T1.year WHERE T1.raceId = 901,"
SELECT s.year
FROM seasons s
JOIN races r ON s.year = r.year
WHERE r.raceId = 901;",0,formula_1,best_pred_metadata
849,864,SELECT COUNT(T2.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId WHERE T1.date = '2015-11-29' AND T2.time IS NOT NULL,"
SELECT COUNT(*)
FROM results
WHERE raceId = (SELECT raceId FROM races WHERE date = '2015-11-29')
AND position IS NOT NULL;",0,formula_1,best_pred_metadata
850,865,"SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T2.raceId = 592 AND T2.time IS NOT NULL AND T1.dob IS NOT NULL ORDER BY T1.dob ASC LIMIT 1","
SELECT d.forename, d.surname, d.dob
FROM drivers d
JOIN results r ON d.driverId = r.driverId
WHERE r.raceId = 592 AND r.position IS NOT NULL
ORDER BY d.dob ASC
LIMIT 1;",0,formula_1,best_pred_metadata
851,866,"SELECT DISTINCT T2.forename, T2.surname, T2.url FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 161 AND T1.time LIKE '1:27%'","
SELECT d.url
FROM drivers d
JOIN lapTimes lt ON d.driverId = lt.driverId
JOIN races r ON lt.raceId = r.raceId
WHERE r.raceId = 161 AND lt.time = '0:01:27';",0,formula_1,best_pred_metadata
852,867,SELECT T1.nationality FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T2.raceId = 933 AND T2.fastestLapTime IS NOT NULL ORDER BY T2.fastestLapSpeed DESC LIMIT 1,"
SELECT d.nationality
FROM drivers d
JOIN results r ON d.driverId = r.driverId
WHERE r.raceId = 933
ORDER BY r.fastestLapSpeed DESC
LIMIT 1;",1,formula_1,best_pred_metadata
853,868,"SELECT DISTINCT T1.lat, T1.lng FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'Malaysian Grand Prix'","
SELECT c.location, c.lat, c.lng
FROM circuits c
JOIN races r ON c.circuitId = r.circuitId
WHERE r.name = 'Malaysian Grand Prix';",0,formula_1,best_pred_metadata
854,869,SELECT T2.url FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T2.constructorId = T1.constructorId WHERE T1.raceId = 9 ORDER BY T1.points DESC LIMIT 1,"
SELECT c.url
FROM constructors AS c
JOIN constructorResults AS cr ON c.constructorId = cr.constructorId
WHERE cr.raceId = 9
ORDER BY cr.points DESC
LIMIT 1;",1,formula_1,best_pred_metadata
855,870,SELECT T1.q1 FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 345 AND T2.forename = 'Lucas' AND T2.surname = 'di Grassi',"
SELECT q1
FROM qualifying
JOIN drivers ON qualifying.driverId = drivers.driverId
JOIN races ON qualifying.raceId = races.raceId
WHERE drivers.forename = 'Lucas' AND drivers.surname = 'di Grassi' AND races.raceId = 345;",1,formula_1,best_pred_metadata
856,871,SELECT DISTINCT T2.nationality FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 347 AND T1.q2 LIKE '1:15%',"
SELECT d.nationality
FROM drivers d
JOIN qualifying q ON d.driverId = q.driverId
WHERE q.raceId = 347 AND q.q2 = '0:01:15';",0,formula_1,best_pred_metadata
857,872,SELECT T2.code FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 45 AND T1.q3 LIKE '1:33%',"
SELECT d.code
FROM drivers d
JOIN qualifying q ON d.driverId = q.driverId
JOIN races r ON q.raceId = r.raceId
WHERE r.round = 45 AND q.q3 = '0:01:33';",0,formula_1,best_pred_metadata
858,873,SELECT T2.time FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T2.raceId = 743 AND T1.forename = 'Bruce' AND T1.surname = 'McLaren',"
SELECT time
FROM results
JOIN races ON results.raceId = races.raceId
JOIN drivers ON results.driverId = drivers.driverId
WHERE races.raceId = 743 AND drivers.forename = 'Bruce' AND drivers.surname = 'McLaren';",0,formula_1,best_pred_metadata
859,874,"SELECT T3.forename, T3.surname FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.year = 2006 AND T1.name = 'San Marino Grand Prix' AND T2.position = 2","
SELECT d.forename, d.surname
FROM results r
JOIN drivers d ON r.driverId = d.driverId
JOIN races ra ON r.raceId = ra.raceId
WHERE ra.name = 'San Marino Grand Prix' AND ra.year = 2006 AND r.position = 2;",1,formula_1,best_pred_metadata
860,875,SELECT T2.url FROM races AS T1 INNER JOIN seasons AS T2 ON T2.year = T1.year WHERE T1.raceId = 901,"
SELECT s.year
FROM seasons s
JOIN races r ON s.year = r.year
WHERE r.raceId = 901;",0,formula_1,best_pred_metadata
861,876,SELECT COUNT(T2.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId WHERE T1.date = '2015-11-29' AND T2.time IS NOT NULL,"
SELECT COUNT(DISTINCT driverId)
FROM results
WHERE raceId IN (
    SELECT raceId
    FROM races
    WHERE date = '2015-11-29'
) AND position IS NOT NULL;",0,formula_1,best_pred_metadata
862,877,"SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T2.raceId = 872 AND T2.time IS NOT NULL ORDER BY T1.dob DESC LIMIT 1","
SELECT driverId, forename, surname, dob
FROM results
JOIN drivers ON results.driverId = drivers.driverId
WHERE raceId = 872 AND position IS NOT NULL
ORDER BY dob DESC
LIMIT 1;",0,formula_1,best_pred_metadata
863,878,"SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 348 ORDER BY T1.time ASC LIMIT 1","
SELECT d.forename, d.surname
FROM results r
JOIN drivers d ON r.driverId = d.driverId
JOIN races ra ON r.raceId = ra.raceId
WHERE ra.raceId = 348
ORDER BY r.fastestLapTime ASC
LIMIT 1;",0,formula_1,best_pred_metadata
864,879,SELECT T1.nationality FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T2.fastestLapTime IS NOT NULL ORDER BY T2.fastestLapSpeed DESC LIMIT 1,"
SELECT d.nationality
FROM drivers d
JOIN results r ON d.driverId = r.driverId
WHERE r.fastestLapSpeed = (SELECT MAX(fastestLapSpeed) FROM results);",1,formula_1,best_pred_metadata
865,880,"SELECT (SUM(IIF(T2.raceId = 853, T2.fastestLapSpeed, 0)) - SUM(IIF(T2.raceId = 854, T2.fastestLapSpeed, 0))) * 100 / SUM(IIF(T2.raceId = 853, T2.fastestLapSpeed, 0)) FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T1.forename = 'Paul' AND T1.surname = 'di Resta'","
SELECT
    (results.fastestLapSpeed / LAG(results.fastestLapSpeed) OVER (ORDER BY races.raceId)) * 100 - 100 AS percent_faster
FROM
    results
JOIN
    races ON results.raceId = races.raceId
JOIN
    drivers ON results.driverId = drivers.driverId
WHERE
    drivers.forename = 'Paul' AND drivers.surname = 'di Resta' AND results.number = 853;",0,formula_1,best_pred_metadata
866,881,SELECT CAST(COUNT(CASE WHEN T2.time IS NOT NULL THEN T2.driverId END) AS REAL) * 100 / COUNT(T2.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId WHERE T1.date = '1983-07-16',"
SELECT
    d.driverId,
    d.forename,
    d.surname,
    COUNT(r.raceId) AS total_races,
    SUM(CASE WHEN res.position IS NOT NULL THEN 1 ELSE 0 END) AS completed_races,
    (SUM(CASE WHEN res.position IS NOT NULL THEN 1 ELSE 0 END) * 100.0 / COUNT(r.raceId)) AS completion_rate
FROM
    drivers d
JOIN
    results res ON d.driverId = res.driverId
JOIN
    races r ON res.raceId = r.raceId
WHERE
    r.date = '1983-07-16'
GROUP BY
    d.driverId,
    d.forename,
    d.surname;",0,formula_1,best_pred_metadata
867,882,SELECT year FROM races WHERE name = 'Singapore Grand Prix' ORDER BY year ASC LIMIT 1,"
SELECT year
FROM races
WHERE name = 'Singapore Grand Prix'
ORDER BY year ASC
LIMIT 1;",1,formula_1,best_pred_metadata
868,883,SELECT name FROM races WHERE year = 2005 ORDER BY name DESC,"
SELECT COUNT(*) AS number_of_races, name
FROM races
WHERE year = 2005
ORDER BY name DESC;",0,formula_1,best_pred_metadata
869,884,"SELECT name FROM races WHERE STRFTIME('%Y', date) = ( SELECT STRFTIME('%Y', date) FROM races ORDER BY date ASC LIMIT 1 ) AND STRFTIME('%m', date) = ( SELECT STRFTIME('%m', date) FROM races ORDER BY date ASC LIMIT 1 )","
SELECT name, date
FROM races
WHERE date = (SELECT MIN(date) FROM races)
AND strftime('%Y-%m', date) = strftime('%Y-%m', (SELECT MIN(date) FROM races));",0,formula_1,best_pred_metadata
870,885,"SELECT name, date FROM races WHERE year = 1999 ORDER BY round DESC LIMIT 1","
SELECT name, date
FROM races
WHERE year = 1999
ORDER BY round DESC
LIMIT 1;",1,formula_1,best_pred_metadata
871,886,SELECT year FROM races GROUP BY year ORDER BY COUNT(round) DESC LIMIT 1,"
SELECT year, COUNT(raceId) as num_races
FROM races
GROUP BY year
ORDER BY num_races DESC
LIMIT 1;",0,formula_1,best_pred_metadata
872,887,SELECT name FROM races WHERE year = 2017 AND name NOT IN ( SELECT name FROM races WHERE year = 2000 ),"
SELECT name
FROM races
WHERE year = 2017 AND circuitId NOT IN (
    SELECT circuitId
    FROM circuits
    WHERE year = 2000
);",0,formula_1,best_pred_metadata
873,888,"SELECT T1.country, T1.location FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'European Grand Prix' ORDER BY T2.year ASC LIMIT 1","
SELECT circuits.name, circuits.location, circuits.country
FROM races
JOIN circuits ON races.circuitId = circuits.circuitId
WHERE races.name = 'European Grand Prix'
ORDER BY races.date ASC
LIMIT 1;",0,formula_1,best_pred_metadata
874,889,SELECT T2.date FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Brands Hatch' AND T2.name = 'British Grand Prix' ORDER BY T2.year DESC LIMIT 1,"
SELECT races.year
FROM races
JOIN circuits ON races.circuitId = circuits.circuitId
WHERE circuits.name = 'Brands Hatch' AND races.name = 'British Grand Prix'
ORDER BY races.year DESC
LIMIT 1;",0,formula_1,best_pred_metadata
875,890,SELECT COUNT(T2.circuitid) FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Silverstone Circuit' AND T2.name = 'British Grand Prix',"
SELECT COUNT(*)
FROM races
WHERE circuitId = (SELECT circuitId FROM circuits WHERE name = 'Silverstone Circuit' AND country = 'United Kingdom')
AND name = 'United Kingdom Grand Prix';",0,formula_1,best_pred_metadata
876,891,"SELECT T3.forename, T3.surname FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.name = 'Singapore Grand Prix' AND T1.year = 2010 ORDER BY T2.position ASC","
SELECT d.forename, d.surname
FROM drivers d
JOIN results r ON d.driverId = r.driverId
JOIN races ra ON r.raceId = ra.raceId
WHERE ra.year = 2010 AND ra.name = 'Singapore Grand Prix'
ORDER BY r.position;",0,formula_1,best_pred_metadata
877,892,"SELECT T3.forename, T3.surname, T2.points FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId ORDER BY T2.points DESC LIMIT 1","
SELECT d.forename, d.surname, SUM(r.points) as total_points
FROM drivers d
JOIN results r ON d.driverId = r.driverId
GROUP BY d.driverId
ORDER BY total_points DESC
LIMIT 1;",0,formula_1,best_pred_metadata
878,893,"SELECT T3.forename, T3.surname, T2.points FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.name = 'Chinese Grand Prix' AND T1.year = 2017 ORDER BY T2.points DESC LIMIT 3","
SELECT d.forename, d.surname, dr.points
FROM drivers d
JOIN driverStandings dr ON d.driverId = dr.driverId
JOIN races r ON dr.raceId = r.raceId
WHERE r.year = 2017 AND r.name = 'Chinese Grand Prix'
ORDER BY dr.points DESC
LIMIT 3;",1,formula_1,best_pred_metadata
879,894,"SELECT T2.milliseconds, T1.forename, T1.surname, T3.name FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId ORDER BY T2.milliseconds ASC LIMIT 1","
SELECT r.name AS race_name, d.forename AS driver_forename, d.surname AS driver_surname, MIN(lt.milliseconds) AS best_lap_time
FROM lapTimes lt
JOIN races r ON lt.raceId = r.raceId
JOIN drivers d ON lt.driverId = d.driverId
GROUP BY lt.raceId, lt.driverId
ORDER BY best_lap_time ASC
LIMIT 1;",0,formula_1,best_pred_metadata
880,895,SELECT AVG(T2.milliseconds) FROM races AS T1 INNER JOIN lapTimes AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Sebastian' AND T3.surname = 'Vettel' AND T1.year = 2009 AND T1.name = 'Chinese GrAND Prix',"
SELECT AVG(milliseconds) AS average_lap_time
FROM lapTimes
JOIN drivers ON lapTimes.driverId = drivers.driverId
JOIN races ON lapTimes.raceId = races.raceId
WHERE drivers.forename = 'Sebastian' AND drivers.surname = 'Vettel' AND races.year = 2009 AND races.name = 'Chinese Grand Prix'",0,formula_1,best_pred_metadata
881,896,SELECT CAST(COUNT(CASE WHEN T2.position <> 1 THEN T2.position END) AS REAL) * 100 / COUNT(T2.driverStandingsId) FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.surname = 'Hamilton' AND T1.year >= 2010,"
SELECT
    (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM races WHERE year >= 2010)) AS percentage
FROM
    races
WHERE
    circuitId = (SELECT circuitId FROM circuits ORDER BY circuitId LIMIT 1)
    AND raceId NOT IN (
        SELECT raceId
        FROM results
        WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton')
    );",0,formula_1,best_pred_metadata
882,897,"SELECT T1.forename, T1.surname, T1.nationality, AVG(T2.points) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T2.driverId = T1.driverId WHERE T2.wins = 1 GROUP BY T1.forename, T1.surname, T1.nationality ORDER BY COUNT(T2.wins) DESC LIMIT 1","
SELECT d.forename, d.surname, d.nationality, AVG(ds.points) as average_points
FROM drivers d
JOIN driverStandings ds ON d.driverId = ds.driverId
JOIN results r ON d.driverId = r.driverId
WHERE r.position = 1
GROUP BY d.driverId
ORDER BY COUNT(r.position) DESC
LIMIT 1;",0,formula_1,best_pred_metadata
883,898,"SELECT STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', dob), forename , surname FROM drivers WHERE nationality = 'Japanese' ORDER BY dob DESC LIMIT 1","
SELECT drivers.forename, drivers.surname,
       (strftime('%Y', 'now') - strftime('%Y', drivers.dob)) AS age
FROM drivers
WHERE drivers.nationality = 'Japanese'
ORDER BY age DESC
LIMIT 1;",0,formula_1,best_pred_metadata
884,899,"SELECT DISTINCT T1.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE STRFTIME('%Y', T2.date) BETWEEN '1990' AND '2000' GROUP BY T1.name HAVING COUNT(T2.raceId) = 4","
SELECT circuits.circuitId, circuits.name, circuits.location, circuits.country
FROM circuits
JOIN races ON circuits.circuitId = races.circuitId
WHERE races.year BETWEEN 1990 AND 2000
GROUP BY circuits.circuitId, circuits.name, circuits.location, circuits.country
HAVING COUNT(races.raceId) = 4;",0,formula_1,best_pred_metadata
885,900,"SELECT T1.name, T1.location, T2.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.country = 'USA' AND T2.year = 2006","
SELECT c.name AS circuit_name, c.location AS circuit_location, r.name AS race_name
FROM circuits c
JOIN races r ON c.circuitId = r.circuitId
WHERE c.country = 'USA' AND r.year = 2006;",1,formula_1,best_pred_metadata
886,901,"SELECT DISTINCT T2.name, T1.name, T1.location FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.year = 2005 AND STRFTIME('%m', T2.date) = '09'","
SELECT r.name AS race_name, c.name AS circuit_name, c.location
FROM races r
JOIN circuits c ON r.circuitId = c.circuitId
WHERE r.year = 2005 AND strftime('%m', r.date) = '09';",1,formula_1,best_pred_metadata
887,902,SELECT T1.name FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Alex' AND T3.surname = 'Yoong' AND T2.position < 10,"
SELECT r.raceId, r.name
FROM races r
JOIN results res ON r.raceId = res.raceId
JOIN drivers d ON res.driverId = d.driverId
WHERE d.forename = 'Alex' AND d.surname = 'Yoong' AND res.number < 10;",0,formula_1,best_pred_metadata
888,903,SELECT SUM(T2.wins) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T2.driverId = T1.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId INNER JOIN circuits AS T4 ON T4.circuitId = T3.circuitId WHERE T1.forename = 'Michael' AND T1.surname = 'Schumacher' AND T4.name = 'Sepang International Circuit',"
SELECT COUNT(*)
FROM results
JOIN races ON results.raceId = races.raceId
JOIN drivers ON results.driverId = drivers.driverId
JOIN circuits ON races.circuitId = circuits.circuitId
WHERE drivers.forename = 'Michael' AND drivers.surname = 'Schumacher' AND circuits.name = 'Sepang International Circuit' AND results.position = 1;",0,formula_1,best_pred_metadata
889,904,"SELECT T1.name, T1.year FROM races AS T1 INNER JOIN lapTimes AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Michael' AND T3.surname = 'Schumacher' ORDER BY T2.milliseconds ASC LIMIT 1","
SELECT r.name AS race_name, r.year AS race_year
FROM results AS res
JOIN races AS r ON res.raceId = r.raceId
JOIN drivers AS d ON res.driverId = d.driverId
WHERE d.forename = 'Michael' AND d.surname = 'Schumacher'
ORDER BY res.fastestLapTime ASC
LIMIT 1;",0,formula_1,best_pred_metadata
890,905,SELECT AVG(T2.points) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T2.driverId = T1.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId WHERE T1.forename = 'Eddie' AND T1.surname = 'Irvine' AND T3.year = 2000,"
SELECT AVG(points) AS average_points
FROM results
JOIN drivers ON results.driverId = drivers.driverId
WHERE drivers.forename = 'Eddie' AND drivers.surname = 'Irvine' AND results.raceId IN (
    SELECT raceId
    FROM races
    WHERE year = 2000
)",0,formula_1,best_pred_metadata
891,906,"SELECT T1.name, T2.points FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' ORDER BY T1.year ASC LIMIT 1","
SELECT r.name, res.points
FROM races r
JOIN results res ON r.raceId = res.raceId
JOIN drivers d ON res.driverId = d.driverId
WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton'
ORDER BY r.date
LIMIT 1;",1,formula_1,best_pred_metadata
892,907,"SELECT DISTINCT T2.name, T1.country FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.year = 2017 ORDER BY T2.date ASC","
SELECT races.name, circuits.country, races.date
FROM races
JOIN circuits ON races.circuitId = circuits.circuitId
WHERE races.year = 2017
ORDER BY races.date;",0,formula_1,best_pred_metadata
893,908,"SELECT T3.lap, T2.name, T2.year, T1.location FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId INNER JOIN lapTimes AS T3 ON T3.raceId = T2.raceId ORDER BY T3.lap DESC LIMIT 1","
SELECT r.name AS race_name, r.year, c.location AS circuit_location, MAX(res.laps) AS most_laps
FROM races AS r
JOIN circuits AS c ON r.circuitId = c.circuitId
JOIN results AS res ON r.raceId = res.raceId
GROUP BY r.raceId
ORDER BY most_laps DESC
LIMIT 1;",0,formula_1,best_pred_metadata
894,909,SELECT CAST(COUNT(CASE WHEN T1.country = 'Germany' THEN T2.circuitID END) AS REAL) * 100 / COUNT(T2.circuitId) FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'European Grand Prix',"
SELECT
    (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM races WHERE country = 'Germany')) AS percentage_of_german_races
FROM
    races
WHERE
    country = 'Germany' AND name LIKE '%Grand Prix%' AND country IN (SELECT country FROM circuits WHERE country IN ('Austria', 'Belgium', 'France', 'Italy', 'Monaco', 'Spain', 'United Kingdom'));",0,formula_1,best_pred_metadata
895,910,"SELECT lat, lng FROM circuits WHERE name = 'Silverstone Circuit'","
SELECT lat, lng FROM circuits WHERE name = 'Silverstone Circuit';",1,formula_1,best_pred_metadata
896,911,"SELECT name FROM circuits WHERE name IN ('Silverstone Circuit', 'Hockenheimring', 'Hungaroring') ORDER BY lat DESC LIMIT 1","
SELECT name, lat FROM circuits WHERE name IN ('Silverstone Circuit', 'Hockenheimring', 'Hungaroring') ORDER BY lat DESC LIMIT 1;",0,formula_1,best_pred_metadata
897,912,SELECT circuitRef FROM circuits WHERE name = 'Marina Bay Street Circuit',"
SELECT circuitRef FROM circuits WHERE name = 'Marina Bay Street Circuit';",1,formula_1,best_pred_metadata
898,913,SELECT country FROM circuits ORDER BY alt DESC LIMIT 1,"
SELECT country
FROM circuits
WHERE alt = (SELECT MAX(alt) FROM circuits);",0,formula_1,best_pred_metadata
899,914,SELECT COUNT(driverId) - COUNT(CASE WHEN code IS NOT NULL THEN code END) FROM drivers,"
SELECT COUNT(*) FROM drivers WHERE code IS NULL;",1,formula_1,best_pred_metadata
900,915,SELECT nationality FROM drivers WHERE dob IS NOT NULL ORDER BY dob ASC LIMIT 1,"
SELECT d.nationality
FROM drivers d
ORDER BY d.dob ASC
LIMIT 1;",0,formula_1,best_pred_metadata
901,916,SELECT surname FROM drivers WHERE nationality = 'Italian',"
SELECT surname
FROM drivers
WHERE nationality = 'Italy';",0,formula_1,best_pred_metadata
902,917,SELECT url FROM drivers WHERE forename = 'Anthony' AND surname = 'Davidson',"
SELECT url FROM drivers WHERE forename = 'Anthony' AND surname = 'Davidson';",1,formula_1,best_pred_metadata
903,918,SELECT driverRef FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton',"
SELECT driverRef
FROM drivers
WHERE forename = 'Lewis' AND surname = 'Hamilton';",1,formula_1,best_pred_metadata
904,919,SELECT T1.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.year = 2009 AND T2.name = 'Spanish Grand Prix',"
SELECT circuits.name
FROM races
JOIN circuits ON races.circuitId = circuits.circuitId
WHERE races.year = 2009 AND races.name = 'Spanish Grand Prix';",1,formula_1,best_pred_metadata
905,920,SELECT DISTINCT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Silverstone Circuit',"
SELECT year
FROM races
WHERE circuitId = (SELECT circuitId FROM circuits WHERE name = 'Silverstone Circuit');",1,formula_1,best_pred_metadata
906,921,SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Silverstone Circuit',"
SELECT races.raceId, races.year, races.round, races.name, races.date, races.time, races.url
FROM races
JOIN circuits ON races.circuitId = circuits.circuitId
WHERE circuits.name = 'Silverstone Circuit';",0,formula_1,best_pred_metadata
907,922,"SELECT T2.date, T2.time FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.year = 2010 AND T2.name = 'Abu Dhabi Grand Prix'","
SELECT r.time
FROM races r
JOIN circuits c ON r.circuitId = c.circuitId
WHERE r.year = 2010 AND c.name = 'Abu Dhabi Circuit';",0,formula_1,best_pred_metadata
908,923,SELECT COUNT(T2.circuitId) FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.country = 'Italy',"
SELECT COUNT(*)
FROM races
JOIN circuits ON races.circuitId = circuits.circuitId
WHERE circuits.country = 'Italy';",1,formula_1,best_pred_metadata
909,924,SELECT T2.date FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Circuit de Barcelona-Catalunya',"
SELECT date
FROM races
WHERE circuitId = (SELECT circuitId FROM circuits WHERE name = 'Barcelona-Catalunya');",0,formula_1,best_pred_metadata
910,925,SELECT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.year = 2009 AND T2.name = 'Spanish Grand Prix',"
SELECT circuits.url
FROM races
JOIN circuits ON races.circuitId = circuits.circuitId
WHERE races.name = 'Spanish Grand Prix' AND races.year = 2009;",1,formula_1,best_pred_metadata
911,926,SELECT T2.fastestLapTime FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton' AND T2.fastestLapTime IS NOT NULL ORDER BY T2.fastestLapTime ASC LIMIT 1,"
SELECT MIN(milliseconds) AS fastest_lap_time
FROM lapTimes
JOIN drivers ON lapTimes.driverId = drivers.driverId
WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';",0,formula_1,best_pred_metadata
912,927,"SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T2.fastestLapTime IS NOT NULL ORDER BY T2.fastestLapSpeed DESC LIMIT 1","
SELECT d.forename, d.surname
FROM drivers d
JOIN results r ON d.driverId = r.driverId
ORDER BY r.fastestLapSpeed DESC
LIMIT 1;",1,formula_1,best_pred_metadata
913,928,"SELECT T3.forename, T3.surname, T3.driverRef FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.name = 'Australian Grand Prix' AND T2.rank = 1 AND T1.year = 2008","
SELECT d.driverRef
FROM results r
JOIN drivers d ON r.driverId = d.driverId
JOIN races ra ON r.raceId = ra.raceId
WHERE ra.name = 'Australian Grand Prix' AND ra.year = 2008 AND r.position = 1;",0,formula_1,best_pred_metadata
914,929,SELECT T1.name FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton',"
SELECT r.name, r.date, r.circuitId
FROM races r
JOIN results res ON r.raceId = res.raceId
JOIN drivers d ON res.driverId = d.driverId
WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton';",0,formula_1,best_pred_metadata
915,930,SELECT name FROM races WHERE raceId IN ( SELECT raceId FROM results WHERE rank = 1 AND driverId = ( SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton' ) ),"
SELECT r.name, res.position
FROM races r
JOIN results res ON r.raceId = res.raceId
JOIN drivers d ON res.driverId = d.driverId
WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton'
ORDER BY res.position ASC
LIMIT 1;",0,formula_1,best_pred_metadata
916,931,SELECT T2.fastestLapSpeed FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId WHERE T1.name = 'Spanish Grand Prix' AND T1.year = 2009 AND T2.fastestLapSpeed IS NOT NULL ORDER BY T2.fastestLapSpeed DESC LIMIT 1,"
SELECT MAX(fastestLapSpeed)
FROM results
JOIN races ON results.raceId = races.raceId
WHERE races.year = 2009 AND races.name = 'Spanish Grand Prix';",1,formula_1,best_pred_metadata
917,932,SELECT DISTINCT T1.year FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton',"
SELECT DISTINCT races.year
FROM results
JOIN races ON results.raceId = races.raceId
JOIN drivers ON results.driverId = drivers.driverId
WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';",1,formula_1,best_pred_metadata
918,933,SELECT T2.positionOrder FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' AND T1.name = 'Australian Grand Prix' AND T1.year = 2008,"
SELECT r.position
FROM results AS r
JOIN drivers AS d ON r.driverId = d.driverId
JOIN races AS ra ON r.raceId = ra.raceId
WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton' AND ra.name = 'Australian Grand Prix' AND ra.year = 2008;",1,formula_1,best_pred_metadata
919,934,"SELECT T3.forename, T3.surname FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T2.grid = 4 AND T1.name = 'Australian Grand Prix' AND T1.year = 2008","
SELECT d.forename, d.surname
FROM drivers d
JOIN results r ON d.driverId = r.driverId
JOIN races ra ON r.raceId = ra.raceId
WHERE ra.year = 2008 AND ra.name = 'Australian Grand Prix' AND r.grid = 4;",1,formula_1,best_pred_metadata
920,935,SELECT COUNT(T2.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId WHERE T1.name = 'Australian Grand Prix' AND T1.year = 2008 AND T2.time IS NOT NULL,"
SELECT COUNT(*)
FROM results
WHERE raceId = (SELECT raceId FROM races WHERE year = 2008 AND name = 'Australian Grand Prix')
AND position IS NOT NULL;",0,formula_1,best_pred_metadata
921,936,SELECT T1.fastestLap FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN drivers AS T3 on T1.driverId = T3.driverId WHERE T2.name = 'Australian Grand Prix' AND T2.year = 2008 AND T3.forename = 'Lewis' AND T3.surname = 'Hamilton',"
SELECT fastestLapTime
FROM results
JOIN races ON results.raceId = races.raceId
JOIN drivers ON results.driverId = drivers.driverId
WHERE races.year = 2008
AND races.name = 'Australian Grand Prix'
AND drivers.forename = 'Lewis'
AND drivers.surname = 'Hamilton';",0,formula_1,best_pred_metadata
922,937,SELECT T1.time FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T1.rank = 2 AND T2.name = 'Australian Grand Prix' AND T2.year = 2008,"
SELECT time
FROM results
JOIN races ON results.raceId = races.raceId
WHERE races.year = 2008 AND races.name = 'Australian Grand Prix' AND results.position = 2;",0,formula_1,best_pred_metadata
923,938,"SELECT T1.forename, T1.surname, T1.url FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId WHERE T3.name = 'Australian Grand Prix' AND T2.time LIKE '_:%:__.___' AND T3.year = 2008","
SELECT d.forename, d.surname, d.url
FROM driverStandings ds
JOIN drivers d ON ds.driverId = d.driverId
JOIN races r ON ds.raceId = r.raceId
WHERE r.year = 2008 AND r.name = 'Australian Grand Prix' AND ds.position = 1;",1,formula_1,best_pred_metadata
924,939,SELECT COUNT(*) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId WHERE T3.name = 'Australian GrAND Prix' AND T1.nationality = 'American' AND T3.year = 2008,"
SELECT COUNT(*)
FROM drivers
JOIN results ON drivers.driverId = results.driverId
JOIN races ON results.raceId = races.raceId
WHERE drivers.nationality = 'USA' AND races.year = 2008 AND races.name = 'Australian Grand Prix'",1,formula_1,best_pred_metadata
925,940,SELECT COUNT(*) FROM ( SELECT T1.driverId FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.name = 'Australian Grand Prix' AND T2.year = 2008 AND T1.time IS NOT NULL GROUP BY T1.driverId HAVING COUNT(T2.raceId) > 0 ),"
SELECT COUNT(DISTINCT d.driverId)
FROM drivers d
JOIN results r ON d.driverId = r.driverId
WHERE r.raceId IN (
    SELECT raceId
    FROM races
    WHERE year = 2008 AND name = 'Australian Grand Prix'
)
AND r.position IS NOT NULL;",0,formula_1,best_pred_metadata
926,941,SELECT SUM(T2.points) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton',"
SELECT SUM(results.points)
FROM results
JOIN drivers ON results.driverId = drivers.driverId
WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';",1,formula_1,best_pred_metadata
927,942,"SELECT AVG(CAST(SUBSTR(T2.fastestLapTime, 1, INSTR(T2.fastestLapTime, ':') - 1) AS INTEGER) * 60 + CAST(SUBSTR(T2.fastestLapTime, INSTR(T2.fastestLapTime, ':') + 1) AS REAL)) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T1.surname = 'Hamilton' AND T1.forename = 'Lewis'","
SELECT AVG(CAST(SUBSTR(fastestLapTime, 1, LENGTH(fastestLapTime) - 3) AS REAL))
FROM results
JOIN drivers ON results.driverId = drivers.driverId
WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton'
AND fastestLapTime IS NOT NULL;",0,formula_1,best_pred_metadata
928,943,"SELECT CAST(SUM(IIF(T1.time IS NOT NULL, 1, 0)) AS REAL) * 100 / COUNT(T1.resultId) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Australian GrAND Prix' AND T2.year = 2008","
SELECT
    COUNT(DISTINCT r.driverId) AS total_drivers,
    COUNT(DISTINCT l.driverId) AS drivers_completed_all_laps,
    (COUNT(DISTINCT l.driverId) * 1.0 / COUNT(DISTINCT r.driverId)) AS completion_rate
FROM
    results r
JOIN
    races ra ON r.raceId = ra.raceId
JOIN
    lapTimes l ON r.raceId = l.raceId AND r.driverId = l.driverId
WHERE
    ra.year = 2008 AND ra.name = 'Australian Grand Prix'
GROUP BY
    ra.raceId;",0,formula_1,best_pred_metadata
929,944,"WITH time_in_seconds AS ( SELECT T1.positionOrder, CASE WHEN T1.positionOrder = 1 THEN (CAST(SUBSTR(T1.time, 1, 1) AS REAL) * 3600) + (CAST(SUBSTR(T1.time, 3, 2) AS REAL) * 60) + CAST(SUBSTR(T1.time, 6) AS REAL) ELSE CAST(SUBSTR(T1.time, 2) AS REAL) END AS time_seconds FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Australian Grand Prix' AND T1.time IS NOT NULL AND T2.year = 2008 ), champion_time AS ( SELECT time_seconds FROM time_in_seconds WHERE positionOrder = 1), last_driver_incremental AS ( SELECT time_seconds FROM time_in_seconds WHERE positionOrder = (SELECT MAX(positionOrder) FROM time_in_seconds) ) SELECT (CAST((SELECT time_seconds FROM last_driver_incremental) AS REAL) * 100) / (SELECT time_seconds + (SELECT time_seconds FROM last_driver_incremental) FROM champion_time)","
SELECT
    ((champion_time - last_place_time) / last_place_time) * 100 AS percentage_faster
FROM
    (
        SELECT
            time AS champion_time
        FROM
            results
        WHERE
            raceId = (SELECT raceId FROM races WHERE year = 2008 AND name = 'Australian Grand Prix')
        ORDER BY
            position
        LIMIT 1
    ) AS champion,
    (
        SELECT
            time AS last_place_time
        FROM
            results
        WHERE
            raceId = (SELECT raceId FROM races WHERE year = 2008 AND name = 'Australian Grand Prix')
        ORDER BY
            position DESC
        LIMIT 1
    ) AS last_place;",0,formula_1,best_pred_metadata
930,945,SELECT COUNT(circuitId) FROM circuits WHERE location = 'Melbourne' AND country = 'Australia',"
SELECT COUNT(*)
FROM circuits
WHERE location = 'Melbourne' AND country = 'Australia';",1,formula_1,best_pred_metadata
931,946,"SELECT lat, lng FROM circuits WHERE country = 'USA'","
SELECT location, lat, lng
FROM circuits
WHERE country = 'US';",0,formula_1,best_pred_metadata
932,947,"SELECT COUNT(driverId) FROM drivers WHERE nationality = 'British' AND STRFTIME('%Y', dob) > '1980'","
SELECT COUNT(*)
FROM drivers
WHERE nationality = 'British' AND dob > '1980-01-01';",0,formula_1,best_pred_metadata
933,948,SELECT AVG(T1.points) FROM constructorStandings AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T2.nationality = 'British',"
SELECT AVG(constructorResults.points)
FROM constructorResults
JOIN constructors ON constructorResults.constructorId = constructors.constructorId
WHERE constructors.nationality = 'British';",0,formula_1,best_pred_metadata
934,949,SELECT T2.name FROM constructorStandings AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId ORDER BY T1.points DESC LIMIT 1,"
SELECT constructorId, MAX(points) as highest_point
FROM constructorStandings;",0,formula_1,best_pred_metadata
935,950,SELECT T2.name FROM constructorStandings AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T1.points = 0 AND T1.raceId = 291,"
SELECT c.name
FROM constructors c
JOIN constructorResults cr ON c.constructorId = cr.constructorId
WHERE cr.raceId = 291 AND cr.points = 0;",0,formula_1,best_pred_metadata
936,951,SELECT COUNT(T1.raceId) FROM constructorStandings AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T1.points = 0 AND T2.nationality = 'Japanese' GROUP BY T1.constructorId HAVING COUNT(raceId) = 2,"
SELECT COUNT(*)
FROM constructors
JOIN constructorResults ON constructors.constructorId = constructorResults.constructorId
JOIN races ON constructorResults.raceId = races.raceId
WHERE constructors.nationality = 'Japan' AND constructorResults.points = 0
GROUP BY constructors.constructorId
HAVING COUNT(DISTINCT races.raceId) = 2;",0,formula_1,best_pred_metadata
937,952,SELECT DISTINCT T2.name FROM results AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T1.rank = 1,"
SELECT constructorId FROM constructorStandings WHERE position = 1;",0,formula_1,best_pred_metadata
938,953,SELECT COUNT(DISTINCT T2.constructorId) FROM results AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T1.laps > 50 AND T2.nationality = 'French',"
SELECT COUNT(*)
FROM constructors
WHERE nationality = 'French'
AND constructorId IN (
    SELECT constructorId
    FROM results
    WHERE laps > 50
)",1,formula_1,best_pred_metadata
939,954,"SELECT CAST(SUM(IIF(T1.time IS NOT NULL, 1, 0)) AS REAL) * 100 / COUNT(T1.raceId) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN drivers AS T3 on T1.driverId = T3.driverId WHERE T3.nationality = 'Japanese' AND T2.year BETWEEN 2007 AND 2009","
SELECT
    d.forename,
    d.surname,
    COUNT(r.raceId) AS total_races,
    SUM(CASE WHEN res.position IS NOT NULL THEN 1 ELSE 0 END) AS completed_races,
    (SUM(CASE WHEN res.position IS NOT NULL THEN 1 ELSE 0 END) * 100.0 / COUNT(r.raceId)) AS completion_percentage
FROM
    drivers d
JOIN
    results res ON d.driverId = res.driverId
JOIN
    races r ON res.raceId = r.raceId
WHERE
    d.nationality = 'Japanese' AND
    r.year BETWEEN 2007 AND 2009
GROUP BY
    d.driverId
ORDER BY
    completion_percentage DESC;",0,formula_1,best_pred_metadata
940,955,"WITH time_in_seconds AS ( SELECT T2.year, T2.raceId, T1.positionOrder, CASE WHEN T1.positionOrder = 1 THEN (CAST(SUBSTR(T1.time, 1, 1) AS REAL) * 3600) + (CAST(SUBSTR(T1.time, 3, 2) AS REAL) * 60) + CAST(SUBSTR(T1.time, 6) AS REAL) ELSE CAST(SUBSTR(T1.time, 2) AS REAL) END AS time_seconds FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T1.time IS NOT NULL ), champion_time AS ( SELECT year, raceId, time_seconds FROM time_in_seconds WHERE positionOrder = 1 ) SELECT year, AVG(time_seconds) FROM champion_time GROUP BY year HAVING AVG(time_seconds) IS NOT NULL","
SELECT AVG(lapTimes.milliseconds) / 1000 AS average_time_in_seconds
FROM lapTimes
JOIN results ON lapTimes.raceId = results.raceId AND lapTimes.driverId = results.driverId
WHERE results.position = 1
GROUP BY results.year;",0,formula_1,best_pred_metadata
941,956,"SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE STRFTIME('%Y', T2.dob) > '1975' AND T1.rank = 2","
SELECT forename, surname
FROM drivers
WHERE dob < '1975-01-01'
AND driverId IN (
    SELECT driverId
    FROM results
    WHERE position = 2
)",0,formula_1,best_pred_metadata
942,957,SELECT COUNT(T1.driverId) FROM results AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.nationality = 'Italian' AND T1.time IS NULL,"
SELECT COUNT(*)
FROM results
JOIN drivers ON results.driverId = drivers.driverId
WHERE drivers.nationality = 'Italian' AND results.position IS NULL;",0,formula_1,best_pred_metadata
943,958,"SELECT T2.forename, T2.surname, T1.fastestLapTime FROM results AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T1.fastestLapTime IS NOT NULL ORDER BY T1.fastestLapTime ASC LIMIT 1","
SELECT d.forename, d.surname
FROM drivers d
JOIN results r ON d.driverId = r.driverId
ORDER BY r.fastestLapTime ASC
LIMIT 1;",0,formula_1,best_pred_metadata
944,959,SELECT T1.fastestLap FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.year = 2009 AND T1.time LIKE '_:%:__.___',"
SELECT fastestLap
FROM results
WHERE raceId IN (
    SELECT raceId
    FROM races
    WHERE year = 2009
)
AND driverId = (
    SELECT driverId
    FROM driverStandings
    WHERE raceId IN (
        SELECT raceId
        FROM races
        WHERE year = 2009
    )
    ORDER BY points DESC
    LIMIT 1
)",0,formula_1,best_pred_metadata
945,960,SELECT AVG(T1.fastestLapSpeed) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.year = 2009 AND T2.name = 'Spanish Grand Prix',"
SELECT AVG(fastestLapSpeed)
FROM results
JOIN races ON results.raceId = races.raceId
WHERE races.year = 2009 AND races.name = 'Spanish Grand Prix'

Note: The fastestLapSpeed column in the results table is assumed to be in a numeric format for the calculation of the average. If the column contains non-numeric values, additional data cleaning or conversion steps may be necessary.",0,formula_1,best_pred_metadata
946,961,"SELECT T1.name, T1.year FROM races AS T1 INNER JOIN results AS T2 on T1.raceId = T2.raceId WHERE T2.milliseconds IS NOT NULL ORDER BY T2.milliseconds LIMIT 1","
SELECT r.name, r.year
FROM races r
JOIN results res ON r.raceId = res.raceId
WHERE res.position = 1
ORDER BY res.milliseconds ASC
LIMIT 1;",0,formula_1,best_pred_metadata
947,962,"SELECT CAST(SUM(IIF(STRFTIME('%Y', T3.dob) < '1985' AND T1.laps > 50, 1, 0)) AS REAL) * 100 / COUNT(*) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN drivers AS T3 on T1.driverId = T3.driverId WHERE T2.year BETWEEN 2000 AND 2005","
SELECT COUNT(DISTINCT d.driverId) * 100.0 / (SELECT COUNT(DISTINCT r.driverId)
FROM results r
JOIN drivers d ON r.driverId = d.driverId
WHERE r.year BETWEEN 2000 AND 2005 AND d.dob < '1985-01-01' AND r.laps > 50) AS percentage_drivers
FROM results r
JOIN drivers d ON r.driverId = d.driverId
WHERE r.year BETWEEN 2000 AND 2005 AND d.dob < '1985-01-01' AND r.laps > 50;",0,formula_1,best_pred_metadata
948,963,"SELECT COUNT(T1.driverId) FROM drivers AS T1 INNER JOIN lapTimes AS T2 on T1.driverId = T2.driverId WHERE T1.nationality = 'French' AND (CAST(SUBSTR(T2.time, 1, 2) AS INTEGER) * 60 + CAST(SUBSTR(T2.time, 4, 2) AS INTEGER) + CAST(SUBSTR(T2.time, 7, 2) AS REAL) / 1000) < 120","
SELECT COUNT(*)
FROM drivers
WHERE nationality = 'French'
AND driverId IN (
    SELECT driverId
    FROM lapTimes
    WHERE time < '02:00.00'
)",0,formula_1,best_pred_metadata
949,964,SELECT code FROM drivers WHERE Nationality = 'American',"
SELECT code
FROM drivers
WHERE nationality = 'America';",0,formula_1,best_pred_metadata
950,965,SELECT raceId FROM races WHERE year = 2009,"
SELECT raceId FROM races WHERE year = 2009;",1,formula_1,best_pred_metadata
951,966,SELECT COUNT(driverId) FROM driverStandings WHERE raceId = 18,"
SELECT COUNT(DISTINCT driverId) FROM results WHERE raceId = 18;",0,formula_1,best_pred_metadata
952,968,SELECT driverRef FROM drivers WHERE forename = 'Robert' AND surname = 'Kubica',"
SELECT driverRef
FROM drivers
WHERE forename = 'Robert' AND surname = 'Kubica';",1,formula_1,best_pred_metadata
953,969,"SELECT COUNT(driverId) FROM drivers WHERE nationality = 'Australian' AND STRFTIME('%Y', dob) = '1980'","
SELECT COUNT(*)
FROM drivers
WHERE nationality = 'Australian' AND strftime('%Y', dob) = '1980';",1,formula_1,best_pred_metadata
954,970,"SELECT T2.driverId FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.nationality = 'German' AND STRFTIME('%Y', T2.dob) BETWEEN '1980' AND '1990' ORDER BY T1.time LIMIT 3","
SELECT d.forename, d.surname, MIN(lt.milliseconds) AS earliest_lap_time
FROM drivers d
JOIN lapTimes lt ON d.driverId = lt.driverId
WHERE d.nationality = 'German' AND d.dob BETWEEN '1980-01-01' AND '1990-12-31'
GROUP BY d.driverId
ORDER BY earliest_lap_time
LIMIT 3;",0,formula_1,best_pred_metadata
955,971,SELECT driverRef FROM drivers WHERE nationality = 'German' ORDER BY JULIANDAY(dob) ASC LIMIT 1,"
SELECT driverRef
FROM drivers
WHERE nationality = 'German'
ORDER BY dob ASC
LIMIT 1;",1,formula_1,best_pred_metadata
956,972,"SELECT T2.driverId, T2.code FROM results AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE STRFTIME('%Y', T2.dob) = '1971' AND T1.fastestLapTime IS NOT NULL","
SELECT driverId, code
FROM drivers
WHERE dob BETWEEN '1971-01-01' AND '1971-12-31'
AND driverId IN (
    SELECT driverId
    FROM results
    WHERE fastestLap = 1
    ORDER BY milliseconds ASC
    LIMIT 1
)",0,formula_1,best_pred_metadata
957,973,"SELECT T2.driverId FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.nationality = 'Spanish' AND STRFTIME('%Y', T2.dob) < '1982' ORDER BY T1.time DESC LIMIT 10","
SELECT d.driverId, d.forename, d.surname, d.dob, lt.time
FROM drivers d
JOIN lapTimes lt ON d.driverId = lt.driverId
WHERE d.nationality = 'Spanish' AND d.dob < '1982-01-01'
ORDER BY lt.time DESC
LIMIT 10;",0,formula_1,best_pred_metadata
958,974,SELECT T2.year FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T1.fastestLapTime IS NOT NULL,"
SELECT r.year
FROM races r
JOIN results res ON r.raceId = res.raceId
WHERE res.milliseconds = (
    SELECT MIN(milliseconds)
    FROM results
    WHERE milliseconds > 0
)

This query will join the races and results tables on the raceId column. It will then filter the results to only include rows where the milliseconds value is equal to the minimum milliseconds value from the results table, excluding any rows with a milliseconds value of 0. Finally, it will select the year column from the races table for the resulting row.",0,formula_1,best_pred_metadata
959,975,SELECT T2.year FROM lapTimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId ORDER BY T1.time DESC LIMIT 1,"
SELECT r.year
FROM results AS res
JOIN races AS r ON res.raceId = r.raceId
JOIN lapTimes AS lt ON res.raceId = lt.raceId AND res.driverId = lt.driverId
GROUP BY r.year
ORDER BY MIN(lt.milliseconds) DESC
LIMIT 1;",0,formula_1,best_pred_metadata
960,976,SELECT driverId FROM lapTimes WHERE lap = 1 ORDER BY time LIMIT 5,"
SELECT driverId
FROM lapTimes
WHERE lap = 1
ORDER BY milliseconds ASC
LIMIT 5;",0,formula_1,best_pred_metadata
961,977,"SELECT SUM(IIF(time IS NOT NULL, 1, 0)) FROM results WHERE statusId = 2 AND raceID < 100 AND raceId > 50","
SELECT COUNT(*)
FROM results
JOIN races ON results.raceId = races.raceId
JOIN status ON results.statusId = status.statusId
WHERE races.round BETWEEN 50 AND 100 AND status.status = 'Disqualified'",0,formula_1,best_pred_metadata
962,978,"SELECT DISTINCT location, lat, lng FROM circuits WHERE country = 'Austria'","
SELECT COUNT(*) AS times_held, location, lat, lng
FROM circuits
WHERE country = 'Austria';",0,formula_1,best_pred_metadata
963,979,SELECT raceId FROM results GROUP BY raceId ORDER BY COUNT(time IS NOT NULL) DESC LIMIT 1,"
SELECT raceId, COUNT(DISTINCT driverId) AS finishers
FROM results
GROUP BY raceId
ORDER BY finishers DESC
LIMIT 1;",0,formula_1,best_pred_metadata
964,980,"SELECT T2.driverRef, T2.nationality, T2.dob FROM qualifying AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T1.raceId = 23 AND T1.q2 IS NOT NULL","
SELECT d.driverRef, d.nationality, d.dob
FROM drivers d
JOIN qualifying q ON d.driverId = q.driverId
WHERE q.raceId = 23 AND q.q2 IS NOT NULL;",1,formula_1,best_pred_metadata
965,981,"SELECT T3.year, T3.name, T3.date, T3.time FROM qualifying AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 on T1.raceId = T3.raceId WHERE T1.driverId = ( SELECT driverId FROM drivers ORDER BY dob DESC LIMIT 1 ) ORDER BY T3.date ASC LIMIT 1","
SELECT r.year, d.forename, d.surname, ra.date, ra.time
FROM results res
JOIN races ra ON res.raceId = ra.raceId
JOIN drivers d ON res.driverId = d.driverId
WHERE d.dob = (SELECT MAX(dob) FROM drivers)
ORDER BY r.year ASC
LIMIT 1;",0,formula_1,best_pred_metadata
966,982,SELECT COUNT(T1.driverId) FROM drivers AS T1 INNER JOIN results AS T2 on T1.driverId = T2.driverId INNER JOIN status AS T3 on T2.statusId = T3.statusId WHERE T3.status = 2 AND T1.nationality = 'American',"
SELECT COUNT(*)
FROM results
JOIN drivers ON results.driverId = drivers.driverId
JOIN status ON results.statusId = status.statusId
WHERE drivers.nationality = 'American' AND status.status = 'Disqualified';",0,formula_1,best_pred_metadata
967,983,SELECT T1.url FROM constructors AS T1 INNER JOIN constructorStandings AS T2 on T1.constructorId = T2.constructorId WHERE T1.nationality = 'Italian' ORDER BY T2.points DESC LIMIT 1,"
SELECT c.name, c.url, MAX(cr.points) as highest_points
FROM constructors c
JOIN constructorResults cr ON c.constructorId = cr.constructorId
WHERE c.nationality = 'Italian'
GROUP BY c.constructorId
ORDER BY highest_points DESC
LIMIT 1;",0,formula_1,best_pred_metadata
968,984,SELECT T1.url FROM constructors AS T1 INNER JOIN constructorStandings AS T2 on T1.constructorId = T2.constructorId ORDER BY T2.wins DESC LIMIT 1,"
SELECT url
FROM constructors
WHERE constructorId = (
    SELECT constructorId
    FROM constructorStandings
    GROUP BY constructorId
    ORDER BY SUM(wins) DESC
    LIMIT 1
)",0,formula_1,best_pred_metadata
969,985,SELECT T1.driverId FROM lapTimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.name = 'French Grand Prix' AND T1.lap = 3 ORDER BY T1.time DESC LIMIT 1,"
SELECT d.forename, d.surname, MIN(lt.milliseconds) AS slowest_time
FROM drivers d
JOIN lapTimes lt ON d.driverId = lt.driverId
JOIN races r ON lt.raceId = r.raceId
WHERE r.name = 'French Grand Prix' AND lt.lap = 3
GROUP BY d.driverId
ORDER BY slowest_time DESC
LIMIT 1;",0,formula_1,best_pred_metadata
970,986,SELECT T1.milliseconds FROM lapTimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T1.lap = 1 ORDER BY T1.time LIMIT 1,"
SELECT r.name AS race_name, lt.milliseconds AS fastest_lap_time
FROM races r
JOIN lapTimes lt ON r.raceId = lt.raceId
WHERE lt.lap = 1
ORDER BY lt.milliseconds ASC
LIMIT 1;",0,formula_1,best_pred_metadata
971,987,SELECT AVG(T1.fastestLapTime) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T1.rank < 11 AND T2.year = 2006 AND T2.name = 'United States GrAND Prix',"
SELECT AVG(fastestLapTime)
FROM results
JOIN races ON results.raceId = races.raceId
JOIN drivers ON results.driverId = drivers.driverId
WHERE races.year = 2006 AND races.name = 'United States Grand Prix'
ORDER BY results.position
LIMIT 10;",0,formula_1,best_pred_metadata
972,988,"SELECT T2.forename, T2.surname FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.nationality = 'German' AND STRFTIME('%Y', T2.dob) BETWEEN '1980' AND '1985' GROUP BY T2.forename, T2.surname ORDER BY AVG(T1.duration) LIMIT 5","
SELECT d.forename, d.surname, AVG(p.milliseconds) AS average_pit_stop_duration
FROM drivers d
JOIN pitStops p ON d.driverId = p.driverId
WHERE d.nationality = 'German' AND d.dob BETWEEN '1980-01-01' AND '1985-12-31'
GROUP BY d.driverId
ORDER BY average_pit_stop_duration ASC
LIMIT 5;",0,formula_1,best_pred_metadata
973,989,SELECT T1.time FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Canadian Grand Prix' AND T2.year = 2008 AND T1.time LIKE '_:%:__.___',"
SELECT d.forename, d.surname, r.time
FROM results AS res
JOIN races AS r ON res.raceId = r.raceId
JOIN drivers AS d ON res.driverId = d.driverId
WHERE r.name = 'Canadian Grand Prix' AND r.year = 2008 AND res.position = 1;",0,formula_1,best_pred_metadata
974,990,"SELECT T3.constructorRef, T3.url FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN constructors AS T3 on T1.constructorId = T3.constructorId WHERE T2.name = 'Singapore Grand Prix' AND T2.year = 2009 AND T1.time LIKE '_:%:__.___'","
SELECT constructors.constructorRef, constructors.url
FROM constructors
JOIN constructorResults ON constructors.constructorId = constructorResults.constructorId
JOIN races ON constructorResults.raceId = races.raceId
WHERE races.year = 2009 AND races.name = 'Singapore Grand Prix'
ORDER BY constructorResults.points DESC
LIMIT 1;",1,formula_1,best_pred_metadata
975,991,"SELECT forename, surname, dob FROM drivers WHERE nationality = 'Austrian' AND STRFTIME('%Y', dob) BETWEEN '1981' AND '1991'","
SELECT forename, surname, dob
FROM drivers
WHERE nationality = 'Austrian' AND dob BETWEEN '1981-01-01' AND '1991-12-31';",1,formula_1,best_pred_metadata
976,992,"SELECT forename, surname, url, dob FROM drivers WHERE nationality = 'German' AND STRFTIME('%Y', dob) BETWEEN '1971' AND '1985' ORDER BY dob DESC","
SELECT forename, surname, url, dob
FROM drivers
WHERE nationality = 'German' AND dob BETWEEN '1971-01-01' AND '1985-12-31'
ORDER BY dob DESC;",1,formula_1,best_pred_metadata
977,993,"SELECT country, lat, lng FROM circuits WHERE name = 'Hungaroring'","
SELECT location, country, lat, lng FROM circuits WHERE name = 'Hungaroring';",0,formula_1,best_pred_metadata
978,994,"SELECT SUM(T1.points), T2.name, T2.nationality FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T3.raceid = T1.raceid WHERE T3.name = 'Monaco Grand Prix' AND T3.year BETWEEN 1980 AND 2010 GROUP BY T2.name ORDER BY SUM(T1.points) DESC LIMIT 1","
SELECT c.name, c.nationality, SUM(cr.points) as total_points
FROM constructorResults cr
JOIN constructors c ON cr.constructorId = c.constructorId
JOIN races r ON cr.raceId = r.raceId
WHERE r.name = 'Monaco Grand Prix' AND r.year BETWEEN 1980 AND 2010
GROUP BY cr.constructorId
ORDER BY total_points DESC
LIMIT 1;",0,formula_1,best_pred_metadata
979,995,SELECT AVG(T2.points) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton' AND T3.name = 'Turkish Grand Prix',"
SELECT AVG(results.points)
FROM results
JOIN races ON results.raceId = races.raceId
JOIN drivers ON results.driverId = drivers.driverId
JOIN circuits ON races.circuitId = circuits.circuitId
WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' AND circuits.country = 'Turkey'",0,formula_1,best_pred_metadata
980,996,SELECT CAST(SUM(CASE WHEN year BETWEEN 2000 AND 2010 THEN 1 ELSE 0 END) AS REAL) / 10 FROM races WHERE date BETWEEN '2000-01-01' AND '2010-12-31',"
SELECT AVG(races_count) AS annual_average_races
FROM (
    SELECT COUNT(*) AS races_count
    FROM races
    WHERE year BETWEEN 2000 AND 2009
    GROUP BY year
) AS subquery;",0,formula_1,best_pred_metadata
981,997,SELECT nationality FROM drivers GROUP BY nationality ORDER BY COUNT(driverId) DESC LIMIT 1,"
SELECT nationality, COUNT(*) as driver_count
FROM drivers
GROUP BY nationality
ORDER BY driver_count DESC
LIMIT 1;",0,formula_1,best_pred_metadata
982,998,SELECT SUM(CASE WHEN points = 91 THEN wins ELSE 0 END) FROM driverStandings,"
SELECT COUNT(*) AS victories
FROM results
WHERE driverId = (
    SELECT driverId
    FROM driverStandings
    WHERE position = 91
    ORDER BY points DESC
    LIMIT 1
) AND position = 1;",0,formula_1,best_pred_metadata
983,999,SELECT T1.name FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T2.fastestLapTime IS NOT NULL ORDER BY T2.fastestLapTime ASC LIMIT 1,"
SELECT r.name
FROM races r
JOIN results res ON r.raceId = res.raceId
ORDER BY CAST(res.fastestLapSpeed AS REAL) DESC
LIMIT 1;",0,formula_1,best_pred_metadata
984,1000,SELECT T1.location FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId ORDER BY T2.date DESC LIMIT 1,"
SELECT c.location
FROM races r
JOIN circuits c ON r.circuitId = c.circuitId
ORDER BY r.date DESC
LIMIT 1;",1,formula_1,best_pred_metadata
985,1001,"SELECT T2.forename, T2.surname FROM qualifying AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceid = T3.raceid WHERE q3 IS NOT NULL AND T3.year = 2008 AND T3.circuitId IN ( SELECT circuitId FROM circuits WHERE name = 'Marina Bay Street Circuit' ) ORDER BY CAST(SUBSTR(q3, 1, INSTR(q3, ':') - 1) AS INTEGER) * 60 + CAST(SUBSTR(q3, INSTR(q3, ':') + 1, INSTR(q3, '.') - INSTR(q3, ':') - 1) AS REAL) + CAST(SUBSTR(q3, INSTR(q3, '.') + 1) AS REAL) / 1000 ASC LIMIT 1","
SELECT d.forename, d.surname
FROM results r
JOIN drivers d ON r.driverId = d.driverId
JOIN races ra ON r.raceId = ra.raceId
JOIN circuits c ON ra.circuitId = c.circuitId
WHERE r.position = 1 AND ra.round = 3 AND c.name = 'Marina Bay Street Circuit' AND ra.year = 2008;",0,formula_1,best_pred_metadata
986,1002,"SELECT T1.forename, T1.surname, T1.nationality, T3.name FROM drivers AS T1 INNER JOIN driverStandings AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 on T2.raceId = T3.raceId ORDER BY JULIANDAY(T1.dob) DESC LIMIT 1","
SELECT d.forename, d.surname, d.nationality, r.name AS first_race
FROM drivers d
JOIN results res ON d.driverId = res.driverId
JOIN races r ON res.raceId = r.raceId
WHERE d.dob = (SELECT MAX(dob) FROM drivers)
ORDER BY r.date ASC
LIMIT 1;",1,formula_1,best_pred_metadata
987,1003,SELECT COUNT(T1.driverId) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN status AS T3 on T1.statusId = T3.statusId WHERE T3.statusId = 3 AND T2.name = 'Canadian Grand Prix' GROUP BY T1.driverId ORDER BY COUNT(T1.driverId) DESC LIMIT 1,"
SELECT COUNT(*) AS accidents
FROM results
WHERE driverId = (
    SELECT driverId
    FROM results
    WHERE raceId = (
        SELECT raceId
        FROM races
        WHERE name = 'Canadian Grand Prix'
    )
    GROUP BY driverId
    ORDER BY COUNT(*) DESC
    LIMIT 1
)
AND statusId IN (
    SELECT statusId
    FROM status
    WHERE status NOT LIKE '%Finish%'
)",0,formula_1,best_pred_metadata
988,1004,"SELECT SUM(T1.wins) FROM driverStandings AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId GROUP BY T2.forename, T2.surname ORDER BY T2.dob ASC LIMIT 1","
SELECT d.forename, d.surname, COUNT(r.raceId) as wins
FROM drivers d
JOIN results r ON d.driverId = r.driverId
WHERE d.dob = (SELECT MIN(dob) FROM drivers)
AND r.position = 1;",0,formula_1,best_pred_metadata
989,1005,SELECT duration FROM pitStops ORDER BY duration DESC LIMIT 1,"
SELECT MAX(duration) AS longest_pit_stop_time FROM pitStops;",1,formula_1,best_pred_metadata
990,1006,"SELECT time FROM lapTimes ORDER BY (CASE WHEN INSTR(time, ':') <> INSTR(SUBSTR(time, INSTR(time, ':') + 1), ':') + INSTR(time, ':') THEN CAST(SUBSTR(time, 1, INSTR(time, ':') - 1) AS REAL) * 3600 ELSE 0 END) + (CAST(SUBSTR(time, INSTR(time, ':') - 2 * (INSTR(time, ':') = INSTR(SUBSTR(time, INSTR(time, ':') + 1), ':') + INSTR(time, ':')), INSTR(time, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(time, INSTR(time, ':') + 1, INSTR(time, '.') - INSTR(time, ':') - 1) AS REAL)) + (CAST(SUBSTR(time, INSTR(time, '.') + 1) AS REAL) / 1000) ASC LIMIT 1","
SELECT MIN(milliseconds) AS fastest_lap_time FROM lapTimes;",0,formula_1,best_pred_metadata
991,1007,SELECT T1.duration FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' ORDER BY T1.duration DESC LIMIT 1,"
SELECT MAX(duration) AS longest_pit_stop_time
FROM pitStops
JOIN drivers ON pitStops.driverId = drivers.driverId
WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';",1,formula_1,best_pred_metadata
992,1008,SELECT T1.lap FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 on T1.raceId = T3.raceId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' AND T3.year = 2011 AND T3.name = 'Australian Grand Prix',"
SELECT lap
FROM pitStops
JOIN races ON pitStops.raceId = races.raceId
JOIN drivers ON pitStops.driverId = drivers.driverId
WHERE races.name = 'Australian Grand Prix' AND races.year = 2011 AND drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';",1,formula_1,best_pred_metadata
993,1009,SELECT T1.duration FROM pitStops AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.year = 2011 AND T2.name = 'Australian Grand Prix',"
SELECT pitStops.time
FROM pitStops
JOIN races ON pitStops.raceId = races.raceId
WHERE races.year = 2011 AND races.name = 'Australian Grand Prix';",0,formula_1,best_pred_metadata
994,1010,SELECT T1.time FROM lapTimes AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton',"
SELECT MIN(milliseconds) AS lap_record
FROM lapTimes
JOIN drivers ON lapTimes.driverId = drivers.driverId
WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';",0,formula_1,best_pred_metadata
995,1011,"WITH lap_times_in_seconds AS ( SELECT driverId, (CASE WHEN INSTR(time, ':') <> INSTR(SUBSTR(time, INSTR(time, ':') + 1), ':') + INSTR(time, ':') THEN CAST(SUBSTR(time, 1, INSTR(time, ':') - 1) AS REAL) * 3600 ELSE 0 END) + (CAST(SUBSTR(time, INSTR(time, ':') - 2 * (INSTR(time, ':') = INSTR(SUBSTR(time, INSTR(time, ':') + 1), ':') + INSTR(time, ':')), INSTR(time, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(time, INSTR(time, ':') + 1, INSTR(time, '.') - INSTR(time, ':') - 1) AS REAL)) + (CAST(SUBSTR(time, INSTR(time, '.') + 1) AS REAL) / 1000) as time_in_seconds FROM lapTimes) SELECT T2.forename, T2.surname FROM ( SELECT driverId, MIN(time_in_seconds) as min_time_in_seconds FROM lap_times_in_seconds GROUP BY driverId) AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId ORDER BY T1.min_time_in_seconds ASC LIMIT 1","
SELECT d.forename, d.surname
FROM drivers d
JOIN lapTimes lt ON d.driverId = lt.driverId
ORDER BY lt.milliseconds
LIMIT 1;",0,formula_1,best_pred_metadata
996,1012,SELECT T1.position FROM lapTimes AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' ORDER BY T1.time ASC LIMIT 1,"
SELECT c.name, r.name, lt.lap
FROM circuits c
JOIN races r ON c.circuitId = r.circuitId
JOIN lapTimes lt ON r.raceId = lt.raceId
JOIN drivers d ON lt.driverId = d.driverId
WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton'
ORDER BY lt.milliseconds ASC
LIMIT 1;",0,formula_1,best_pred_metadata
997,1013,"WITH fastest_lap_times AS ( SELECT T1.raceId, T1.fastestLapTime FROM results AS T1 WHERE T1.FastestLapTime IS NOT NULL) SELECT MIN(fastest_lap_times.fastestLapTime) as lap_record FROM fastest_lap_times INNER JOIN races AS T2 on fastest_lap_times.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T2.name = 'Austrian Grand Prix'","
SELECT MIN(milliseconds) AS lap_record
FROM lapTimes
JOIN races ON lapTimes.raceId = races.raceId
JOIN circuits ON races.circuitId = circuits.circuitId
WHERE circuits.name = 'Austrian Grand Prix Circuit';",0,formula_1,best_pred_metadata
998,1014,"WITH fastest_lap_times AS (SELECT T1.raceId, T1.FastestLapTime, (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) as time_in_seconds FROM results AS T1 WHERE T1.FastestLapTime IS NOT NULL ) SELECT T1.FastestLapTime as lap_record FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId INNER JOIN (SELECT MIN(fastest_lap_times.time_in_seconds) as min_time_in_seconds FROM fastest_lap_times INNER JOIN races AS T2 on fastest_lap_times.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T3.country = 'Italy' ) AS T4 ON (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) = T4.min_time_in_seconds LIMIT 1","
SELECT lt.raceId, lt.driverId, lt.lap, lt.time, lt.milliseconds
FROM lapTimes lt
JOIN races r ON lt.raceId = r.raceId
JOIN circuits c ON r.circuitId = c.circuitId
WHERE c.country = 'Italy'
ORDER BY lt.milliseconds ASC
LIMIT 1;",0,formula_1,best_pred_metadata
999,1015,"WITH fastest_lap_times AS ( SELECT T1.raceId, T1.FastestLapTime, (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) as time_in_seconds FROM results AS T1 WHERE T1.FastestLapTime IS NOT NULL ) SELECT T2.name FROM races AS T2 INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId INNER JOIN results AS T1 on T2.raceId = T1.raceId INNER JOIN ( SELECT MIN(fastest_lap_times.time_in_seconds) as min_time_in_seconds FROM fastest_lap_times INNER JOIN races AS T2 on fastest_lap_times.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T2.name = 'Austrian Grand Prix') AS T4 ON (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) = T4.min_time_in_seconds WHERE T2.name = 'Austrian Grand Prix'","
SELECT r.name AS race_name
FROM races AS r
JOIN circuits AS c ON r.circuitId = c.circuitId
JOIN lapTimes AS lt ON r.raceId = lt.raceId
WHERE c.name = 'Austrian Grand Prix Circuit'
ORDER BY lt.milliseconds ASC
LIMIT 1;",0,formula_1,best_pred_metadata
1000,1016,"WITH fastest_lap_times AS ( SELECT T1.raceId, T1.driverId, T1.FastestLapTime, (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) as time_in_seconds FROM results AS T1 WHERE T1.FastestLapTime IS NOT NULL), lap_record_race AS ( SELECT T1.raceId, T1.driverId FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId INNER JOIN ( SELECT MIN(fastest_lap_times.time_in_seconds) as min_time_in_seconds FROM fastest_lap_times INNER JOIN races AS T2 on fastest_lap_times.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T2.name = 'Austrian Grand Prix') AS T4 ON (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) = T4.min_time_in_seconds WHERE T2.name = 'Austrian Grand Prix') SELECT T4.duration FROM lap_record_race INNER JOIN pitStops AS T4 on lap_record_race.raceId = T4.raceId AND lap_record_race.driverId = T4.driverId","
SELECT pitStops.duration
FROM pitStops
JOIN races ON pitStops.raceId = races.raceId
JOIN circuits ON races.circuitId = circuits.circuitId
JOIN results ON pitStops.raceId = results.raceId
WHERE circuits.name = 'Austrian Grand Prix Circuit'
AND results.fastestLap = 1;",0,formula_1,best_pred_metadata
1001,1017,"SELECT T3.lat, T3.lng FROM lapTimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T1.time = '1:29.488'","
SELECT circuits.lat, circuits.lng
FROM circuits
JOIN races ON circuits.circuitId = races.circuitId
JOIN results ON races.raceId = results.raceId
WHERE results.fastestLapTime = '1:29.488'",0,formula_1,best_pred_metadata
1002,1018,SELECT AVG(milliseconds) FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton',"
SELECT AVG(milliseconds)
FROM pitStops
JOIN drivers ON pitStops.driverId = drivers.driverId
WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';",1,formula_1,best_pred_metadata
1003,1019,SELECT CAST(SUM(T1.milliseconds) AS REAL) / COUNT(T1.lap) FROM lapTimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T3.country = 'Italy',"
SELECT AVG(milliseconds) AS average_lap_time
FROM lapTimes
JOIN races ON lapTimes.raceId = races.raceId
JOIN circuits ON races.circuitId = circuits.circuitId
WHERE circuits.country = 'Italy';",1,formula_1,best_pred_metadata
1004,1020,SELECT player_api_id FROM Player_Attributes ORDER BY overall_rating DESC LIMIT 1,"
SELECT player_api_id FROM Player_Attributes ORDER BY overall_rating DESC LIMIT 1;",1,european_football_2,best_pred_metadata
1005,1021,SELECT player_name FROM Player ORDER BY height DESC LIMIT 1,"
SELECT player_name, height
FROM Player
ORDER BY height DESC
LIMIT 1;",0,european_football_2,best_pred_metadata
1006,1022,SELECT preferred_foot FROM Player_Attributes WHERE potential IS NOT NULL ORDER BY potential ASC LIMIT 1,"
SELECT preferred_foot
FROM Player_Attributes
WHERE potential = (SELECT MIN(potential) FROM Player_Attributes);",0,european_football_2,best_pred_metadata
1007,1023,SELECT COUNT(id) FROM Player_Attributes WHERE overall_rating BETWEEN 60 AND 65 AND defensive_work_rate = 'low',"
SELECT COUNT(*)
FROM Player_Attributes
WHERE overall_rating BETWEEN 60 AND 65
AND attacking_work_rate <> 'Defensive'

This SQL query will count the number of players with an overall rating between 60 and 65 who have an attacking work rate that is not defensive. This means they are more likely to be involved in attacking moves rather than defending.",0,european_football_2,best_pred_metadata
1008,1024,SELECT id FROM Player_Attributes ORDER BY crossing DESC LIMIT 5,"
SELECT player_api_id, crossing
FROM Player_Attributes
ORDER BY crossing DESC
LIMIT 5;",0,european_football_2,best_pred_metadata
1009,1025,SELECT t2.name FROM Match AS t1 INNER JOIN League AS t2 ON t1.league_id = t2.id WHERE t1.season = '2015/2016' GROUP BY t2.name ORDER BY SUM(t1.home_team_goal + t1.away_team_goal) DESC LIMIT 1,"
SELECT League.name, SUM(home_team_goal + away_team_goal) AS total_goals
FROM Match
JOIN League ON Match.league_id = League.id
WHERE Match.season = '2016'
GROUP BY League.name
ORDER BY total_goals DESC
LIMIT 1;",0,european_football_2,best_pred_metadata
1010,1026,SELECT teamDetails.team_long_name FROM Match AS matchData INNER JOIN Team AS teamDetails ON matchData.home_team_api_id = teamDetails.team_api_id WHERE matchData.season = '2015/2016' AND matchData.home_team_goal - matchData.away_team_goal < 0 GROUP BY matchData.home_team_api_id ORDER BY COUNT(*) ASC LIMIT 1,"
SELECT home_team_api_id, COUNT(*) as lost_matches
FROM Match
WHERE season = '2016' AND home_team_goal < away_team_goal
GROUP BY home_team_api_id
ORDER BY lost_matches ASC
LIMIT 1;",0,european_football_2,best_pred_metadata
1011,1027,SELECT t2.player_name FROM Player_Attributes AS t1 INNER JOIN Player AS t2 ON t1.id = t2.id ORDER BY t1.penalties DESC LIMIT 10,"
SELECT p.player_name
FROM Player p
JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id
ORDER BY pa.penalties DESC
LIMIT 10;",0,european_football_2,best_pred_metadata
1012,1028,SELECT teamInfo.team_long_name FROM League AS leagueData INNER JOIN Match AS matchData ON leagueData.id = matchData.league_id INNER JOIN Team AS teamInfo ON matchData.away_team_api_id = teamInfo.team_api_id WHERE leagueData.name = 'Scotland Premier League' AND matchData.season = '2009/2010' AND matchData.away_team_goal - matchData.home_team_goal > 0 GROUP BY matchData.away_team_api_id ORDER BY COUNT(*) DESC LIMIT 1,"
SELECT away_team_api_id, COUNT(*) as win_count
FROM Match
JOIN League ON Match.league_id = League.id
JOIN Country ON League.country_id = Country.id
WHERE Country.name = 'Scotland' AND League.name = 'Premier League' AND season = '2010' AND away_team_goal > home_team_goal
GROUP BY away_team_api_id
ORDER BY win_count DESC
LIMIT 1;",0,european_football_2,best_pred_metadata
1013,1029,SELECT t1.buildUpPlaySpeed FROM Team_Attributes AS t1 INNER JOIN Team AS t2 ON t1.team_api_id = t2.team_api_id ORDER BY t1.buildUpPlayDribbling ASC LIMIT 4,"
SELECT Team_Attributes.buildUpPlaySpeed
FROM Team_Attributes
JOIN Team ON Team_Attributes.team_api_id = Team.team_api_id
ORDER BY Team_Attributes.buildUpPlaySpeed DESC
LIMIT 4;",0,european_football_2,best_pred_metadata
1014,1030,SELECT t2.name FROM Match AS t1 INNER JOIN League AS t2 ON t1.league_id = t2.id WHERE t1.season = '2015/2016' AND t1.home_team_goal = t1.away_team_goal GROUP BY t2.name ORDER BY COUNT(t1.id) DESC LIMIT 1,"
SELECT League.name, COUNT(*) as draw_matches
FROM Match
JOIN League ON Match.league_id = League.id
WHERE Match.season = '2016' AND Match.home_team_goal = Match.away_team_goal
GROUP BY League.name
ORDER BY draw_matches DESC
LIMIT 1;",0,european_football_2,best_pred_metadata
1015,1031,"SELECT DATETIME() - T2.birthday age FROM Player_Attributes AS t1 INNER JOIN Player AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t1.`date`, 1, 10) BETWEEN '2013-01-01' AND '2015-12-31' AND t1.sprint_speed >= 97","
SELECT
    p.player_name,
    (strftime('%Y', 'now') - strftime('%Y', p.birthday)) AS age
FROM
    Player p
JOIN
    Player_Attributes pa ON p.player_api_id = pa.player_api_id
WHERE
    pa.sprint_speed >= 97
    AND pa.date BETWEEN '2013-01-01' AND '2015-12-31';",0,european_football_2,best_pred_metadata
1016,1032,"SELECT t2.name, COUNT(t1.id) FROM Match AS t1 INNER JOIN League AS t2 ON t1.league_id = t2.id GROUP BY t2.name ORDER BY COUNT(t1.id) DESC LIMIT 1","
SELECT League.name, COUNT(Match.id) as total_matches
FROM League
JOIN Match ON League.id = Match.league_id
GROUP BY League.name
ORDER BY total_matches DESC
LIMIT 1;",1,european_football_2,best_pred_metadata
1017,1033,"SELECT SUM(height) / COUNT(id) FROM Player WHERE SUBSTR(birthday, 1, 4) BETWEEN '1990' AND '1995'","
SELECT AVG(height)
FROM Player
WHERE strftime('%Y', birthday) BETWEEN '1990' AND '1995';",1,european_football_2,best_pred_metadata
1018,1034,"SELECT player_api_id FROM Player_Attributes WHERE SUBSTR(`date`, 1, 4) = '2010' ORDER BY overall_rating DESC LIMIT 1","
SELECT player_api_id
FROM Player_Attributes
WHERE overall_rating > (SELECT AVG(overall_rating) FROM Player_Attributes WHERE strftime('%Y', date) = '2010')
AND strftime('%Y', date) = '2010';",0,european_football_2,best_pred_metadata
1019,1035,SELECT DISTINCT team_fifa_api_id FROM Team_Attributes WHERE buildUpPlaySpeed > 50 AND buildUpPlaySpeed < 60,"
SELECT team_fifa_api_id
FROM Team_Attributes
WHERE buildUpPlaySpeed > 50 AND buildUpPlaySpeed < 60;",0,european_football_2,best_pred_metadata
1020,1036,"SELECT DISTINCT t4.team_long_name FROM Team_Attributes AS t3 INNER JOIN Team AS t4 ON t3.team_api_id = t4.team_api_id WHERE SUBSTR(t3.`date`, 1, 4) = '2012' AND t3.buildUpPlayPassing > ( SELECT CAST(SUM(t2.buildUpPlayPassing) AS REAL) / COUNT(t1.id) FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE SUBSTR(t2.`date`, 1, 4) = '2012' )","
SELECT Team.team_long_name
FROM Team
JOIN Team_Attributes ON Team.team_fifa_api_id = Team_Attributes.team_fifa_api_id
WHERE Team_Attributes.date LIKE '2012%' AND Team_Attributes.buildUpPlayPassing > (
    SELECT AVG(buildUpPlayPassing)
    FROM Team_Attributes
    WHERE date LIKE '2012%'
)",0,european_football_2,best_pred_metadata
1021,1037,"SELECT CAST(COUNT(CASE WHEN t2.preferred_foot = 'left' THEN t1.id ELSE NULL END) AS REAL) * 100 / COUNT(t1.id) percent FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t1.birthday, 1, 4) BETWEEN '1987' AND '1992'","
SELECT
    (COUNT(*) * 100.0) / (SELECT COUNT(*) FROM Player WHERE strftime('%Y', birthday) BETWEEN '1987' AND '1992') AS left_foot_percentage
FROM
    Player_Attributes
WHERE
    preferred_foot = 'left'
    AND player_api_id IN (SELECT player_api_id FROM Player WHERE strftime('%Y', birthday) BETWEEN '1987' AND '1992');",0,european_football_2,best_pred_metadata
1022,1038,"SELECT t1.name, SUM(t2.home_team_goal) + SUM(t2.away_team_goal) FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id GROUP BY t1.name ORDER BY SUM(t2.home_team_goal) + SUM(t2.away_team_goal) ASC LIMIT 5","
SELECT League.name, SUM(Match.home_team_goal + Match.away_team_goal) AS total_goals
FROM League
JOIN Match ON League.id = Match.league_id
GROUP BY League.name
ORDER BY total_goals ASC
LIMIT 5;",1,european_football_2,best_pred_metadata
1023,1039,SELECT CAST(SUM(t2.long_shots) AS REAL) / COUNT(t2.`date`) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Ahmed Samir Farag',"
SELECT AVG(long_shots)
FROM Player_Attributes
WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Ahmed Samir Farag');",1,european_football_2,best_pred_metadata
1024,1040,SELECT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.height > 180 GROUP BY t1.id ORDER BY CAST(SUM(t2.heading_accuracy) AS REAL) / COUNT(t2.`player_fifa_api_id`) DESC LIMIT 10,"
SELECT Player.player_name, AVG(Player_Attributes.heading_accuracy) AS avg_heading_accuracy
FROM Player
JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id
WHERE Player.height > 180
GROUP BY Player.player_name
ORDER BY avg_heading_accuracy DESC
LIMIT 10;",0,european_football_2,best_pred_metadata
1025,1041,"SELECT t3.team_long_name FROM Team AS t3 INNER JOIN Team_Attributes AS t4 ON t3.team_api_id = t4.team_api_id WHERE t4.buildUpPlayDribblingClass = 'Normal' AND t4.chanceCreationPassing < ( SELECT CAST(SUM(t2.chanceCreationPassing) AS REAL) / COUNT(t1.id) FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.buildUpPlayDribblingClass = 'Normal' AND SUBSTR(t2.`date`, 1, 4) = '2014') ORDER BY t4.chanceCreationPassing DESC","
SELECT Team.team_long_name
FROM Team
JOIN Team_Attributes ON Team.team_fifa_api_id = Team_Attributes.team_fifa_api_id
WHERE Team_Attributes.buildUpPlayDribblingClass = 'Normal' AND Team_Attributes.date LIKE '2014%'
GROUP BY Team.team_long_name
HAVING AVG(Team_Attributes.chanceCreationPassing) > (SELECT AVG(chanceCreationPassing) FROM Team_Attributes WHERE date LIKE '2014%')
ORDER BY Team_Attributes.chanceCreationPassing DESC;",0,european_football_2,best_pred_metadata
1026,1042,SELECT t1.name FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t2.season = '2009/2010' GROUP BY t1.name HAVING (CAST(SUM(t2.home_team_goal) AS REAL) / COUNT(DISTINCT t2.id)) - (CAST(SUM(t2.away_team_goal) AS REAL) / COUNT(DISTINCT t2.id)) > 0,"
SELECT League.name
FROM League
JOIN Match ON League.id = Match.league_id
WHERE Match.season = '2009/2010'
GROUP BY League.name
HAVING AVG(Match.home_team_goal) > AVG(Match.away_team_goal);",1,european_football_2,best_pred_metadata
1027,1043,SELECT team_short_name FROM Team WHERE team_long_name = 'Queens Park Rangers',"
SELECT team_short_name
FROM Team
WHERE team_long_name = 'Queens Park Rangers';",1,european_football_2,best_pred_metadata
1028,1044,"SELECT player_name FROM Player WHERE SUBSTR(birthday, 1, 7) = '1970-10'","
SELECT player_name, birthday
FROM Player
WHERE strftime('%Y-%m', birthday) = '1970-10';",0,european_football_2,best_pred_metadata
1029,1045,SELECT DISTINCT t2.attacking_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Franco Zennaro',"
SELECT attacking_work_rate
FROM Player_Attributes
WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Franco Zennaro');",0,european_football_2,best_pred_metadata
1030,1047,"SELECT t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Francois Affolter' AND SUBSTR(t2.`date`, 1, 10) = '2014-09-18'","
SELECT pa.finishing
FROM Player_Attributes pa
JOIN Player p ON pa.player_api_id = p.player_api_id
WHERE p.player_name = 'Francois Affolter' AND pa.date = '18/09/2014';",0,european_football_2,best_pred_metadata
1031,1048,"SELECT t2.overall_rating FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Gabriel Tamas' AND SUBSTR(t2.`date`, 1, 4) = '2011'","
SELECT overall_rating
FROM Player_Attributes
WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Gabriel Tamas')
AND date LIKE '2011%';",1,european_football_2,best_pred_metadata
1032,1049,SELECT COUNT(t2.id) FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t2.season = '2015/2016' AND t1.name = 'Scotland Premier League',"
SELECT COUNT(*)
FROM Match
WHERE season = '2015/2016'
AND league_id = (SELECT id FROM League WHERE name = 'Scotland Premier League');",1,european_football_2,best_pred_metadata
1033,1050,SELECT t2.preferred_foot FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id ORDER BY t1.birthday DESC LIMIT 1,"
SELECT preferred_foot
FROM Player_Attributes
WHERE player_api_id = (
    SELECT player_api_id
    FROM Player
    ORDER BY birthday DESC
    LIMIT 1
)
AND attacking_work_rate = 'high';",0,european_football_2,best_pred_metadata
1034,1051,SELECT DISTINCT(t1.player_name) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.potential = (SELECT MAX(potential) FROM Player_Attributes) ,"
SELECT player_name, potential
FROM Player
JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id
WHERE potential = (SELECT MAX(potential) FROM Player_Attributes);",0,european_football_2,best_pred_metadata
1035,1052,SELECT COUNT(DISTINCT t1.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.weight < 130 AND t2.preferred_foot = 'left',"
SELECT COUNT(*)
FROM Player
JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id
WHERE Player.weight < 130 AND Player_Attributes.preferred_foot = 'left';",0,european_football_2,best_pred_metadata
1036,1053,SELECT DISTINCT t1.team_short_name FROM Team AS t1 INNER JOIN Team_attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.chanceCreationPassingClass = 'Risky',"
SELECT team_short_name
FROM Team
WHERE team_fifa_api_id IN (
    SELECT team_fifa_api_id
    FROM Team_Attributes
    WHERE chanceCreationPassingClass = 'Risky'
)

This SQL query will first select the team_fifa_api_id from the Team_Attributes table where the chanceCreationPassingClass is 'Risky'. Then, it will use these team_fifa_api_id values to select the corresponding team_short_name from the Team table.",0,european_football_2,best_pred_metadata
1037,1054,SELECT DISTINCT t2.defensive_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'David Wilson',"
SELECT defensive_work_rate
FROM Player_Attributes
JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id
WHERE Player.player_name = 'David Wilson';",0,european_football_2,best_pred_metadata
1038,1055,SELECT t1.birthday FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id ORDER BY t2.overall_rating DESC LIMIT 1,"
SELECT birthday
FROM Player
WHERE player_api_id = (
    SELECT player_api_id
    FROM Player_Attributes
    ORDER BY overall_rating DESC
    LIMIT 1
)

This SQL query first finds the player_api_id of the player with the highest overall rating in the Player_Attributes table, and then uses that player_api_id to retrieve their birthday from the Player table.",0,european_football_2,best_pred_metadata
1039,1056,SELECT t2.name FROM Country AS t1 INNER JOIN League AS t2 ON t1.id = t2.country_id WHERE t1.name = 'Netherlands',"
SELECT name FROM League
JOIN Country ON League.country_id = Country.id
WHERE Country.name = 'Netherlands';",0,european_football_2,best_pred_metadata
1040,1057,SELECT CAST(SUM(t2.home_team_goal) AS REAL) / COUNT(t2.id) FROM Country AS t1 INNER JOIN Match AS t2 ON t1.id = t2.country_id WHERE t1.name = 'Poland' AND t2.season = '2010/2011',"
SELECT AVG(home_team_goal)
FROM Match
JOIN League ON Match.league_id = League.id
JOIN Country ON League.country_id = Country.id
WHERE Match.season = '2010/2011' AND Country.name = 'Poland';",1,european_football_2,best_pred_metadata
1041,1059,SELECT player_name FROM Player WHERE height > 180,"
SELECT player_name
FROM Player
WHERE height > 180;",1,european_football_2,best_pred_metadata
1042,1060,"SELECT COUNT(id) FROM Player WHERE STRFTIME('%Y', birthday) > '1990'","
SELECT COUNT(*)
FROM Player
WHERE birthday > '1990-01-01';",0,european_football_2,best_pred_metadata
1043,1061,SELECT COUNT(id) FROM Player WHERE weight > 170 AND player_name LIKE 'Adam%',"
SELECT COUNT(*)
FROM Player
WHERE player_name LIKE 'Adam%' AND weight > 170;",1,european_football_2,best_pred_metadata
1044,1062,"SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.overall_rating > 80 AND SUBSTR(t2.`date`, 1, 4) BETWEEN '2008' AND '2010'","
SELECT p.player_name
FROM Player p
JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id
WHERE pa.overall_rating > 80 AND pa.date BETWEEN '2008' AND '2010';",0,european_football_2,best_pred_metadata
1045,1063,SELECT t2.potential FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Doran',"
SELECT potential
FROM Player_Attributes
WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Doran');",1,european_football_2,best_pred_metadata
1046,1064,"SELECT DISTINCT t1.id, t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.preferred_foot = 'left'","
SELECT player_name
FROM Player
JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id
WHERE preferred_foot = 'left';",0,european_football_2,best_pred_metadata
1047,1065,SELECT DISTINCT t1.team_long_name FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.buildUpPlaySpeedClass = 'Fast',"
SELECT Team.team_long_name
FROM Team
JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id
WHERE Team_Attributes.buildUpPlaySpeedClass = 'Fast';",0,european_football_2,best_pred_metadata
1048,1066,SELECT DISTINCT t2.buildUpPlayPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_short_name = 'CLB',"
SELECT ta.buildUpPlayPassingClass
FROM Team_Attributes ta
JOIN Team t ON ta.team_api_id = t.team_api_id
WHERE t.team_short_name = 'CLB';",0,european_football_2,best_pred_metadata
1049,1067,SELECT DISTINCT t1.team_short_name FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.buildUpPlayPassing > 70,"
SELECT team_short_name
FROM Team
WHERE team_fifa_api_id IN (
    SELECT team_fifa_api_id
    FROM Team_Attributes
    WHERE buildUpPlayPassing > 70
);",1,european_football_2,best_pred_metadata
1050,1068,"SELECT CAST(SUM(t2.overall_rating) AS REAL) / COUNT(t2.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.height > 170 AND SUBSTR(t2.`date`, 1, 4) BETWEEN '2010' AND '2015'","
SELECT AVG(overall_rating)
FROM Player_Attributes
JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id
WHERE Player.height > 170
AND Player_Attributes.date BETWEEN '2010' AND '2015';",0,european_football_2,best_pred_metadata
1051,1069,SELECT player_name FROM player ORDER BY height ASC LIMIT 1,"
SELECT player_name, height
FROM Player
ORDER BY height ASC
LIMIT 1;",0,european_football_2,best_pred_metadata
1052,1070,SELECT t1.name FROM Country AS t1 INNER JOIN League AS t2 ON t1.id = t2.country_id WHERE t2.name = 'Italy Serie A',"
SELECT Country.name
FROM Country
JOIN League ON Country.id = League.country_id
WHERE League.name = 'Italy Serie A';",1,european_football_2,best_pred_metadata
1053,1071,SELECT DISTINCT t1.team_short_name FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.buildUpPlaySpeed = 31 AND t2.buildUpPlayDribbling = 53 AND t2.buildUpPlayPassing = 32,"
SELECT team_short_name
FROM Team
WHERE team_fifa_api_id IN (
    SELECT team_fifa_api_id
    FROM Team_Attributes
    WHERE buildUpPlaySpeed = 31
        AND buildUpPlayDribbling = 53
        AND buildUpPlayPassing = 32
);",1,european_football_2,best_pred_metadata
1054,1072,SELECT CAST(SUM(t2.overall_rating) AS REAL) / COUNT(t2.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Doran',"
SELECT AVG(overall_rating)
FROM Player
JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id
WHERE Player.player_name = 'Aaron Doran';",1,european_football_2,best_pred_metadata
1055,1073,"SELECT COUNT(t2.id) FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t1.name = 'Germany 1. Bundesliga' AND SUBSTR(t2.`date`, 1, 7) BETWEEN '2008-08' AND '2008-10'","
SELECT COUNT(*)
FROM Match
WHERE league_id = (SELECT id FROM League WHERE name = 'Germany 1. Bundesliga')
AND date BETWEEN '2008-08-01' AND '2008-10-31';",0,european_football_2,best_pred_metadata
1056,1074,SELECT t1.team_short_name FROM Team AS t1 INNER JOIN Match AS t2 ON t1.team_api_id = t2.home_team_api_id WHERE t2.home_team_goal = 10,"
SELECT team_short_name
FROM Team
WHERE team_api_id IN (
    SELECT home_team_api_id
    FROM Match
    WHERE home_team_goal = 10
);",1,european_football_2,best_pred_metadata
1057,1075,SELECT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.potential = '61' ORDER BY t2.balance DESC LIMIT 1,"
SELECT player_name, balance, potential
FROM Player_Attributes
WHERE balance = (SELECT MAX(balance) FROM Player_Attributes)
AND potential = 61;",0,european_football_2,best_pred_metadata
1058,1076,SELECT CAST(SUM(CASE WHEN t1.player_name = 'Abdou Diallo' THEN t2.ball_control ELSE 0 END) AS REAL) / COUNT(CASE WHEN t1.player_name = 'Abdou Diallo' THEN t2.id ELSE NULL END) - CAST(SUM(CASE WHEN t1.player_name = 'Aaron Appindangoye' THEN t2.ball_control ELSE 0 END) AS REAL) / COUNT(CASE WHEN t1.player_name = 'Aaron Appindangoye' THEN t2.id ELSE NULL END) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id,"
SELECT AVG(pa1.ball_control) - AVG(pa2.ball_control)
FROM Player_Attributes pa1
JOIN Player p1 ON pa1.player_api_id = p1.player_api_id
JOIN Player_Attributes pa2 ON pa2.player_api_id = p2.player_api_id
JOIN Player p2 ON p2.player_api_id = pa2.player_api_id
WHERE p1.player_name = 'Abdou Diallo'
AND p2.player_name = 'Aaron Appindangoye'

The SQL query provided calculates the difference in the average ball control score between Abdou Diallo and Aaron Appindangoye. It does this by joining the Player_Attributes table with the Player table twice, once for each player. It then calculates the average ball control score for each player and subtracts the two values to find the difference. The WHERE clause is used to filter the results for the two specific players.",0,european_football_2,best_pred_metadata
1059,1077,SELECT team_long_name FROM Team WHERE team_short_name = 'GEN',"
SELECT team_long_name
FROM Team
WHERE team_short_name = 'GEN';",1,european_football_2,best_pred_metadata
1060,1079,SELECT player_name FROM Player ORDER BY height DESC LIMIT 1,"
SELECT player_name, height
FROM Player
ORDER BY height DESC
LIMIT 1;",0,european_football_2,best_pred_metadata
1061,1080,SELECT COUNT(player_api_id) FROM Player_Attributes WHERE preferred_foot = 'left' AND attacking_work_rate = 'low',"
SELECT COUNT(*)
FROM Player_Attributes
WHERE preferred_foot = 'left' AND attacking_work_rate = 'high'

This query will count the number of players who have a preferred foot of 'left' and an attacking work rate of 'high', which indicates that they would remain in their position when the team attacks.",0,european_football_2,best_pred_metadata
1062,1081,SELECT t1.name FROM Country AS t1 INNER JOIN League AS t2 ON t1.id = t2.country_id WHERE t2.name = 'Belgium Jupiler League',"
SELECT Country.name
FROM Country
JOIN League ON Country.id = League.country_id
WHERE League.name = 'Belgium Jupiler League';",1,european_football_2,best_pred_metadata
1063,1082,SELECT t2.name FROM Country AS t1 INNER JOIN League AS t2 ON t1.id = t2.country_id WHERE t1.name = 'Germany',"
SELECT name FROM League
WHERE country_id = (SELECT id FROM Country WHERE name = 'Germany');",1,european_football_2,best_pred_metadata
1064,1083,SELECT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id ORDER BY t2.overall_rating DESC LIMIT 1,"
SELECT player_name, strength
FROM Player_Attributes
ORDER BY strength DESC
LIMIT 1;",0,european_football_2,best_pred_metadata
1065,1084,"SELECT COUNT(DISTINCT t1.player_name) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t1.birthday, 1, 4) < '1986' AND t2.defensive_work_rate = 'high'","
SELECT COUNT(*)
FROM Player_Attributes
WHERE player_api_id IN (
    SELECT player_api_id
    FROM Player
    WHERE birthday < '1986-01-01'
)
AND attacking_work_rate = 'low'
AND defensive_work_rate = 'high';",0,european_football_2,best_pred_metadata
1066,1085,"SELECT t1.player_name, t2.crossing FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name IN ('Alexis', 'Ariel Borysiuk', 'Arouna Kone') ORDER BY t2.crossing DESC LIMIT 1","
SELECT player_name, crossing
FROM Player
JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id
WHERE player_name IN ('Alexis', 'Ariel Borysiuk', 'Arouna Kone')
ORDER BY crossing DESC
LIMIT 1;",1,european_football_2,best_pred_metadata
1067,1086,SELECT t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Ariel Borysiuk',"
SELECT heading_accuracy
FROM Player_Attributes
WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Ariel Borysiuk');",1,european_football_2,best_pred_metadata
1068,1087,SELECT COUNT(DISTINCT t1.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.height > 180 AND t2.volleys > 70,"
SELECT COUNT(*)
FROM Player
JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id
WHERE Player.height > 180 AND Player_Attributes.volleys > 70;",0,european_football_2,best_pred_metadata
1069,1088,SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.volleys > 70 AND t2.dribbling > 70,"
SELECT player_name
FROM Player
WHERE player_api_id IN (
    SELECT player_api_id
    FROM Player_Attributes
    WHERE volleys > 70 AND dribbling > 70
)",0,european_football_2,best_pred_metadata
1070,1089,SELECT COUNT(t2.id) FROM Country AS t1 INNER JOIN Match AS t2 ON t1.id = t2.country_id WHERE t1.name = 'Belgium' AND t2.season = '2008/2009',"
SELECT COUNT(*)
FROM Match
WHERE season = '2008/2009' AND country_id = (SELECT id FROM Country WHERE name = 'Belgium');",1,european_football_2,best_pred_metadata
1071,1090,SELECT t2.long_passing FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id ORDER BY t1.birthday ASC LIMIT 1,"
SELECT long_passing
FROM Player_Attributes
WHERE player_api_id = (
    SELECT player_api_id
    FROM Player
    ORDER BY birthday ASC
    LIMIT 1
)
ORDER BY date DESC
LIMIT 1;",1,european_football_2,best_pred_metadata
1072,1091,"SELECT COUNT(t2.id) FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t1.name = 'Belgium Jupiler League' AND SUBSTR(t2.`date`, 1, 4) = '2009'","
SELECT COUNT(*)
FROM Match
WHERE league_id = (SELECT id FROM League WHERE name = 'Belgium Jupiler League')
AND strftime('%m', date) = '04'
AND strftime('%Y', date) = '2009';",0,european_football_2,best_pred_metadata
1073,1092,SELECT t1.name FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t2.season = '2008/2009' GROUP BY t1.name ORDER BY COUNT(t2.id) DESC LIMIT 1,"
SELECT League.name, COUNT(Match.id) as match_count
FROM League
JOIN Match ON League.id = Match.league_id
WHERE Match.season = '2008/2009'
GROUP BY League.name
ORDER BY match_count DESC
LIMIT 1;",0,european_football_2,best_pred_metadata
1074,1093,"SELECT SUM(t2.overall_rating) / COUNT(t1.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t1.birthday, 1, 4) < '1986'","
SELECT AVG(overall_rating)
FROM Player_Attributes
WHERE player_api_id IN (
    SELECT player_api_id
    FROM Player
    WHERE strftime('%Y', birthday) < '1986'
)",0,european_football_2,best_pred_metadata
1075,1094,SELECT (SUM(CASE WHEN t1.player_name = 'Ariel Borysiuk' THEN t2.overall_rating ELSE 0 END) * 1.0 - SUM(CASE WHEN t1.player_name = 'Paulin Puel' THEN t2.overall_rating ELSE 0 END)) * 100 / SUM(CASE WHEN t1.player_name = 'Paulin Puel' THEN t2.overall_rating ELSE 0 END) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id,"
SELECT
    (p1.overall_rating - p2.overall_rating) / CAST(p2.overall_rating AS FLOAT) * 100 AS percentage_difference
FROM
    Player_Attributes p1
JOIN
    Player pl1 ON p1.player_api_id = pl1.player_api_id
JOIN
    Player_Attributes p2 ON p1.date = p2.date
JOIN
    Player pl2 ON p2.player_api_id = pl2.player_api_id
WHERE
    pl1.player_name = 'Ariel Borysiuk'
    AND pl2.player_name = 'Paulin Puel';",0,european_football_2,best_pred_metadata
1076,1095,SELECT CAST(SUM(t2.buildUpPlaySpeed) AS REAL) / COUNT(t2.id) FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Heart of Midlothian',"
SELECT AVG(buildUpPlaySpeed)
FROM Team_Attributes
JOIN Team ON Team_Attributes.team_api_id = Team.team_api_id
WHERE Team.team_long_name = 'Heart of Midlothian'

The SQL query provided will calculate the average build up play speed of the Heart of Midlothian team by joining the Team_Attributes table with the Team table using the team_api_id column as the join condition. The query then filters the results to only include rows where the team_long_name is 'Heart of Midlothian' and finally calculates the average value of the buildUpPlaySpeed column for the filtered rows.",0,european_football_2,best_pred_metadata
1077,1096,SELECT CAST(SUM(t2.overall_rating) AS REAL) / COUNT(t2.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Pietro Marino',"
SELECT AVG(overall_rating)
FROM Player_Attributes
WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Pietro Marino');",1,european_football_2,best_pred_metadata
1078,1097,SELECT SUM(t2.crossing) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Lennox',"
SELECT SUM(crossing)
FROM Player
JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id
WHERE Player.player_name = 'Aaron Lennox';",1,european_football_2,best_pred_metadata
1079,1098,"SELECT t2.chanceCreationPassing, t2.chanceCreationPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Ajax' ORDER BY t2.chanceCreationPassing DESC LIMIT 1","
SELECT MAX(chanceCreationPassing) AS highest_chance_creation_passing_score, chanceCreationPassingClass
FROM Team_Attributes
JOIN Team ON Team_Attributes.team_api_id = Team.team_api_id
WHERE Team.team_long_name = 'Ajax'

This SQL query selects the maximum chance creation passing score and its classification for Ajax from the Team_Attributes table, joining it with the Team table to retrieve the team's long name.",0,european_football_2,best_pred_metadata
1080,1099,SELECT DISTINCT t2.preferred_foot FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Abdou Diallo',"
SELECT preferred_foot
FROM Player
JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id
WHERE Player.player_name = 'Abdou Diallo';",0,european_football_2,best_pred_metadata
1081,1100,SELECT MAX(t2.overall_rating) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Dorlan Pabon',"
SELECT MAX(overall_rating)
FROM Player_Attributes
WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Dorlan Pabon');",1,european_football_2,best_pred_metadata
1082,1101,"SELECT CAST(SUM(T1.away_team_goal) AS REAL) / COUNT(T1.id) FROM ""Match"" AS T1 INNER JOIN TEAM AS T2 ON T1.away_team_api_id = T2.team_api_id INNER JOIN Country AS T3 ON T1.country_id = T3.id WHERE T2.team_long_name = 'Parma' AND T3.name = 'Italy'","
SELECT AVG(away_team_goal)
FROM Match
JOIN Team ON Match.away_team_api_id = Team.team_api_id
JOIN League ON Match.league_id = League.id
JOIN Country ON League.country_id = Country.id
WHERE Team.team_long_name = 'Parma' AND Country.name = 'Italy';",1,european_football_2,best_pred_metadata
1083,1102,"SELECT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2016-06-23' AND t2.overall_rating = 77 ORDER BY t1.birthday ASC LIMIT 1","
SELECT Player.player_name
FROM Player
JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id
WHERE Player_Attributes.overall_rating = 77 AND Player_Attributes.date = '2016/6/23'
ORDER BY Player.birthday ASC
LIMIT 1;",0,european_football_2,best_pred_metadata
1084,1103,"SELECT t2.overall_rating FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2016-02-04' AND t1.player_name = 'Aaron Mooy'","
SELECT overall_rating
FROM Player_Attributes
WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Mooy')
AND date = '2016/2/4';",0,european_football_2,best_pred_metadata
1085,1104,"SELECT t2.potential FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2010-08-30' AND t1.player_name = 'Francesco Parravicini'","
SELECT potential
FROM Player_Attributes
WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Francesco Parravicini')
AND date = '2010/8/30';",0,european_football_2,best_pred_metadata
1086,1105,"SELECT t2.attacking_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2015-05-01' AND t1.player_name = 'Francesco Migliore'","
SELECT attacking_work_rate
FROM Player_Attributes
JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id
WHERE Player.player_name = 'Francesco Migliore' AND Player_Attributes.date = '2015/5/1';",0,european_football_2,best_pred_metadata
1087,1106,"SELECT t2.defensive_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2013-02-22' AND t1.player_name = 'Kevin Berigaud'","
SELECT defensive_work_rate
FROM Player_Attributes
JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id
WHERE Player.player_name = 'Kevin Berigaud' AND Player_Attributes.date = '2013/2/22';",0,european_football_2,best_pred_metadata
1088,1107,"SELECT `date` FROM ( SELECT t2.crossing, t2.`date` FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE t1.player_name = 'Kevin Constant' ORDER BY t2.crossing DESC) ORDER BY date DESC LIMIT 1","
SELECT date
FROM Player_Attributes
WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Kevin Constant')
ORDER BY crossing DESC
LIMIT 1;",0,european_football_2,best_pred_metadata
1089,1108,"SELECT t2.buildUpPlaySpeedClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Willem II' AND SUBSTR(t2.`date`, 1, 10) = '2011-02-22'","
SELECT buildUpPlaySpeedClass
FROM Team_Attributes
JOIN Team ON Team_Attributes.team_api_id = Team.team_api_id
WHERE Team.team_long_name = 'Willem II' AND Team_Attributes.date = '2011/2/22';",0,european_football_2,best_pred_metadata
1090,1109,"SELECT t2.buildUpPlayDribblingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_short_name = 'LEI' AND SUBSTR(t2.`date`, 1, 10) = '2015-09-10'","
SELECT buildUpPlayDribblingClass
FROM Team_Attributes
JOIN Team ON Team_Attributes.team_api_id = Team.team_api_id
WHERE Team.team_short_name = 'LEI' AND Team_Attributes.date = '2015/9/10';",0,european_football_2,best_pred_metadata
1091,1110,"SELECT t2.buildUpPlayPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'FC Lorient' AND SUBSTR(t2.`date`, 1, 10) = '2010-02-22'","
SELECT ta.buildUpPlayPassingClass
FROM Team_Attributes ta
JOIN Team t ON ta.team_api_id = t.team_api_id
WHERE t.team_long_name = 'FC Lorient' AND ta.date = '2010/2/22';",0,european_football_2,best_pred_metadata
1092,1111,"SELECT t2.chanceCreationPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'PEC Zwolle' AND SUBSTR(t2.`date`, 1, 10) = '2013-09-20'","
SELECT t.chanceCreationPassingClass
FROM Team_Attributes ta
JOIN Team t ON ta.team_api_id = t.team_api_id
WHERE t.team_long_name = 'PEC Zwolle' AND ta.date = '2013/9/20';",0,european_football_2,best_pred_metadata
1093,1112,"SELECT t2.chanceCreationCrossingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Hull City' AND SUBSTR(t2.`date`, 1, 10) = '2010-02-22'","
SELECT t.team_long_name, ta.chanceCreationCrossingClass
FROM Team t
JOIN Team_Attributes ta ON t.team_fifa_api_id = ta.team_fifa_api_id
JOIN Match m ON t.team_api_id = m.home_team_api_id OR t.team_api_id = m.away_team_api_id
WHERE t.team_long_name = 'Hull City' AND m.date = '2010/2/22';",0,european_football_2,best_pred_metadata
1094,1113,"SELECT t2.chanceCreationShootingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Hannover 96' AND SUBSTR(t2.`date`, 1, 10) = '2015-09-10'","
SELECT defenceAggressionClass
FROM Team_Attributes
JOIN Team ON Team_Attributes.team_api_id = Team.team_api_id
WHERE Team.team_long_name = 'Hannover 96' AND Team_Attributes.date = '2015/9/10';",0,european_football_2,best_pred_metadata
1095,1114,"SELECT CAST(SUM(t2.overall_rating) AS REAL) / COUNT(t2.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE t1.player_name = 'Marko Arnautovic' AND SUBSTR(t2.`date`, 1, 10) BETWEEN '2007-02-22' AND '2016-04-21'","
SELECT AVG(overall_rating)
FROM Player_Attributes
WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Marko Arnautovic')
AND date BETWEEN '2007/2/22' AND '2016/4/21';",0,european_football_2,best_pred_metadata
1096,1115,"SELECT (SUM(CASE WHEN t1.player_name = 'Landon Donovan' THEN t2.overall_rating ELSE 0 END) * 1.0 - SUM(CASE WHEN t1.player_name = 'Jordan Bowery' THEN t2.overall_rating ELSE 0 END)) * 100 / SUM(CASE WHEN t1.player_name = 'Landon Donovan' THEN t2.overall_rating ELSE 0 END) LvsJ_percent FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2013-07-12'","
SELECT
    (Player_Attributes.overall_rating * 100.0 / (SELECT overall_rating FROM Player_Attributes AS pa2 WHERE pa2.player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Jordan Bowery')) - 100) AS percentage_higher
FROM
    Player_Attributes
JOIN
    Player ON Player_Attributes.player_api_id = Player.player_api_id
WHERE
    Player.player_name = 'Landon Donovan' AND Player_Attributes.date = '2013/7/12';",0,european_football_2,best_pred_metadata
1097,1116,SELECT player_name FROM Player ORDER BY height DESC LIMIT 5,"
SELECT player_name, height
FROM Player
ORDER BY height DESC
LIMIT 5;",0,european_football_2,best_pred_metadata
1098,1117,SELECT player_api_id FROM Player ORDER BY weight DESC LIMIT 10,"
SELECT player_api_id
FROM Player
ORDER BY height DESC
LIMIT 10;",0,european_football_2,best_pred_metadata
1099,1118,SELECT player_name FROM Player WHERE CAST((JULIANDAY('now') - JULIANDAY(birthday)) AS REAL) / 365 >= 35,"
SELECT p.player_name
FROM Player p
WHERE p.birthday <= DATE('now', '-35 years');",0,european_football_2,best_pred_metadata
1100,1119,SELECT SUM(t2.home_team_goal) FROM Player AS t1 INNER JOIN match AS t2 ON t1.player_api_id = t2.away_player_9 WHERE t1.player_name = 'Aaron Lennon',"
SELECT COUNT(home_team_goal)
FROM Match
JOIN Player ON Match.home_player_1 = Player.player_api_id OR Match.home_player_2 = Player.player_api_id OR Match.home_player_3 = Player.player_api_id OR Match.home_player_4 = Player.player_api_id OR Match.home_player_5 = Player.player_api_id OR Match.home_player_6 = Player.player_api_id OR Match.home_player_7 = Player.player_api_id OR Match.home_player_8 = Player.player_api_id OR Match.home_player_9 = Player.player_api_id OR Match.home_player_10 = Player.player_api_id OR Match.home_player_11 = Player.player_api_id
WHERE Player.player_name = 'Aaron Lennon';",0,european_football_2,best_pred_metadata
1101,1122,SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id ORDER BY t2.overall_rating DESC LIMIT 10,"
SELECT player_name
FROM Player
JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id
ORDER BY overall_rating DESC
LIMIT 10;",0,european_football_2,best_pred_metadata
1102,1123,SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id ORDER BY t2.potential DESC LIMIT 1,"
SELECT player_name
FROM Player
WHERE player_api_id = (
    SELECT player_api_id
    FROM Player_Attributes
    ORDER BY potential DESC
    LIMIT 1
)",1,european_football_2,best_pred_metadata
1103,1124,SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.attacking_work_rate = 'high',"
SELECT Player.player_name
FROM Player
JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id
WHERE Player_Attributes.attacking_work_rate = 'high'
OR Player_Attributes.attacking_work_rate = 'medium'

This SQL query joins the Player and Player_Attributes tables using the player_api_id column as the common key. It then filters the results to include only players who have an 'attacking_work_rate' of 'high' or 'medium'. The player's name is then selected and returned in the result set.",0,european_football_2,best_pred_metadata
1104,1125,SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.finishing = 1 ORDER BY t1.birthday ASC LIMIT 1,"
SELECT player_name
FROM Player
WHERE player_api_id IN (
    SELECT player_api_id
    FROM Player_Attributes
    WHERE finishing = 1
)
ORDER BY birthday ASC
LIMIT 1;",1,european_football_2,best_pred_metadata
1105,1127,SELECT DISTINCT t4.name FROM Player_Attributes AS t1 INNER JOIN Player AS t2 ON t1.player_api_id = t2.player_api_id INNER JOIN Match AS t3 ON t2.player_api_id = t3.home_player_8 INNER JOIN Country AS t4 ON t3.country_id = t4.id WHERE t1.vision > 89,"
SELECT Player.player_name, Country.name
FROM Player
JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id
JOIN Team ON Player.player_api_id = Team.team_api_id
JOIN League ON Team.league_id = League.id
JOIN Country ON League.country_id = Country.id
WHERE Player_Attributes.vision >= 90;",0,european_football_2,best_pred_metadata
1106,1128,SELECT t1.name FROM Country AS t1 INNER JOIN Match AS t2 ON t1.id = t2.country_id INNER JOIN Player AS t3 ON t2.home_player_1 = t3.player_api_id GROUP BY t1.name ORDER BY AVG(t3.weight) DESC LIMIT 1,"
SELECT Country.name, AVG(Player.weight) AS average_weight
FROM Player
JOIN Match ON Player.player_api_id = Match.home_player_1 OR Player.player_api_id = Match.home_player_2 OR Player.player_api_id = Match.home_player_3 OR Player.player_api_id = Match.home_player_4 OR Player.player_api_id = Match.home_player_5 OR Player.player_api_id = Match.home_player_6 OR Player.player_api_id = Match.home_player_7 OR Player.player_api_id = Match.home_player_8 OR Player.player_api_id = Match.home_player_9 OR Player.player_api_id = Match.home_player_10 OR Player.player_api_id = Match.home_player_11 OR Player.player_api_id = Match.away_player_1 OR Player.player_api_id = Match.away_player_2 OR Player.player_api_id = Match.away_player_3 OR Player.player_api_id = Match.away_player_4 OR Player.player_api_id = Match.away_player_5 OR Player.player_api_id = Match.away_player_6 OR Player.player_api_id = Match.away_player_7 OR Player.player_api_id = Match.away_player_8 OR Player.player_api_id = Match.away_player_9 OR Player.player_api_id = Match.away_player_10 OR Player.player_api_id = Match.away_player_11
JOIN Country ON Match.country_id = Country.id
GROUP BY Country.name
ORDER BY average_weight DESC
LIMIT 1;",0,european_football_2,best_pred_metadata
1107,1126,SELECT t3.player_name FROM Country AS t1 INNER JOIN Match AS t2 ON t1.id = t2.country_id INNER JOIN Player AS t3 ON t2.home_player_1 = t3.player_api_id WHERE t1.name = 'Belgium',"
SELECT Player.player_name
FROM Player
JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id
JOIN Match ON Player.player_api_id = Match.home_player_1 OR Player.player_api_id = Match.home_player_2 OR Player.player_api_id = Match.home_player_3 OR Player.player_api_id = Match.home_player_4 OR Player.player_api_id = Match.home_player_5 OR Player.player_api_id = Match.home_player_6 OR Player.player_api_id = Match.home_player_7 OR Player.player_api_id = Match.home_player_8 OR Player.player_api_id = Match.home_player_9 OR Player.player_api_id = Match.home_player_10 OR Player.player_api_id = Match.home_player_11 OR Player.player_api_id = Match.away_player_1 OR Player.player_api_id = Match.away_player_2 OR Player.player_api_id = Match.away_player_3 OR Player.player_api_id = Match.away_player_4 OR Player.player_api_id = Match.away_player_5 OR Player.player_api_id = Match.away_player_6 OR Player.player_api_id = Match.away_player_7 OR Player.player_api_id = Match.away_player_8 OR Player.player_api_id = Match.away_player_9 OR Player.player_api_id = Match.away_player_10 OR Player.player_api_id = Match.away_player_11
WHERE Match.country_id = (SELECT id FROM Country WHERE name = 'Belgium');",0,european_football_2,best_pred_metadata
1108,1129,SELECT DISTINCT t1.team_long_name FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.buildUpPlaySpeedClass = 'Slow',"
SELECT team_long_name
FROM Team
WHERE team_api_id IN (
    SELECT team_api_id
    FROM Team_Attributes
    WHERE buildUpPlaySpeedClass = 'Slow'
);",0,european_football_2,best_pred_metadata
1109,1130,SELECT DISTINCT t1.team_short_name FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.chanceCreationPassingClass = 'Safe',"
SELECT team_short_name
FROM Team
WHERE team_fifa_api_id IN (
    SELECT team_fifa_api_id
    FROM Team_Attributes
    WHERE chanceCreationPassingClass = 'Safe'
)",0,european_football_2,best_pred_metadata
1110,1131,SELECT CAST(SUM(T1.height) AS REAL) / COUNT(T1.id) FROM Player AS T1 INNER JOIN Match AS T2 ON T1.id = T2.id INNER JOIN Country AS T3 ON T2.country_id = T3.ID WHERE T3.NAME = 'Italy',"
SELECT AVG(Player.height)
FROM Player
JOIN Match ON Player.player_api_id = Match.home_player_1 OR Player.player_api_id = Match.home_player_2 OR Player.player_api_id = Match.home_player_3 OR Player.player_api_id = Match.home_player_4 OR Player.player_api_id = Match.home_player_5 OR Player.player_api_id = Match.home_player_6 OR Player.player_api_id = Match.home_player_7 OR Player.player_api_id = Match.home_player_8 OR Player.player_api_id = Match.home_player_9 OR Player.player_api_id = Match.home_player_10 OR Player.player_api_id = Match.home_player_11 OR Player.player_api_id = Match.away_player_1 OR Player.player_api_id = Match.away_player_2 OR Player.player_api_id = Match.away_player_3 OR Player.player_api_id = Match.away_player_4 OR Player.player_api_id = Match.away_player_5 OR Player.player_api_id = Match.away_player_6 OR Player.player_api_id = Match.away_player_7 OR Player.player_api_id = Match.away_player_8 OR Player.player_api_id = Match.away_player_9 OR Player.player_api_id = Match.away_player_10 OR Player.player_api_id = Match.away_player_11
JOIN Country ON Match.country_id = Country.id
WHERE Country.name = 'Italy';",0,european_football_2,best_pred_metadata
1111,1132,SELECT player_name FROM Player WHERE height > 180 ORDER BY player_name LIMIT 3,"
SELECT player_name
FROM Player
WHERE height > 180
ORDER BY player_name
LIMIT 3;",1,european_football_2,best_pred_metadata
1112,1133,SELECT COUNT(id) FROM Player WHERE birthday > '1990' AND player_name LIKE 'Aaron%',"
SELECT COUNT(*)
FROM Player
WHERE player_name LIKE 'Aaron%' AND birthday > '1990-01-01';",1,european_football_2,best_pred_metadata
1113,1135,SELECT id FROM Player_Attributes WHERE preferred_foot = 'right' ORDER BY potential DESC LIMIT 3,"
SELECT player_api_id
FROM Player_Attributes
WHERE potential = (SELECT MIN(potential) FROM Player_Attributes)
AND preferred_foot = 'right'
AND attacking_work_rate IS NOT NULL
ORDER BY potential ASC
LIMIT 3;",0,european_football_2,best_pred_metadata
1114,1136,SELECT COUNT(t1.id) FROM Player_Attributes AS t1 WHERE t1.preferred_foot = 'left' AND t1.crossing = ( SELECT MAX(crossing) FROM Player_Attributes),"
SELECT COUNT(*)
FROM Player_Attributes
WHERE potential = (SELECT MAX(potential) FROM Player_Attributes WHERE crossing = (SELECT MAX(crossing) FROM Player_Attributes))
AND preferred_foot = 'left'
AND attacking_work_rate = 'high';",0,european_football_2,best_pred_metadata
1115,1137,SELECT CAST(COUNT(CASE WHEN strength > 80 AND stamina > 80 THEN id ELSE NULL END) AS REAL) * 100 / COUNT(id) FROM Player_Attributes t,"
SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Player_Attributes) AS percentage_of_players
FROM Player_Attributes
WHERE strength > 80 AND stamina > 80;",1,european_football_2,best_pred_metadata
1116,1138,SELECT name FROM Country WHERE id IN ( SELECT country_id FROM League WHERE name = 'Poland Ekstraklasa' ),"
SELECT Country.name
FROM League
JOIN Country ON League.country_id = Country.id
WHERE League.name = 'Poland Ekstraklasa';",1,european_football_2,best_pred_metadata
1117,1139,"SELECT t2.home_team_goal, t2.away_team_goal FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t1.name = 'Belgium Jupiler League' AND SUBSTR(t2.`date`, 1, 10) = '2008-09-24'","
SELECT home_team_goal, away_team_goal
FROM Match
WHERE date = '2008-09-24'
AND league_id = (SELECT id FROM League WHERE name = 'Belgian Jupiler League')
AND home_team_api_id = (SELECT team_api_id FROM Team WHERE team_long_name = 'home team')
AND away_team_api_id = (SELECT team_api_id FROM Team WHERE team_long_name = 'away team');",0,european_football_2,best_pred_metadata
1118,1140,"SELECT sprint_speed, agility, acceleration FROM Player_Attributes WHERE player_api_id IN ( SELECT player_api_id FROM Player WHERE player_name = 'Alexis Blin' )","
SELECT sprint_speed, agility, acceleration
FROM Player_Attributes
WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Alexis Blin');",1,european_football_2,best_pred_metadata
1119,1141,SELECT DISTINCT t1.buildUpPlaySpeedClass FROM Team_Attributes AS t1 INNER JOIN Team AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.team_long_name = 'KSV Cercle Brugge',"
SELECT buildUpPlaySpeedClass
FROM Team_Attributes
JOIN Team ON Team_Attributes.team_api_id = Team.team_api_id
WHERE Team.team_long_name = 'KSV Cercle Brugge';",0,european_football_2,best_pred_metadata
1120,1142,SELECT COUNT(t2.id) FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t1.name = 'Italy Serie A' AND t2.season = '2015/2016',"
SELECT COUNT(*)
FROM Match
WHERE league_id = (SELECT id FROM League WHERE name = 'Italian Serie A')
AND season = '2015/2016';",0,european_football_2,best_pred_metadata
1121,1143,SELECT MAX(t2.home_team_goal) FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t1.name = 'Netherlands Eredivisie',"
SELECT MAX(home_team_goal) AS highest_home_team_score
FROM Match
JOIN League ON Match.league_id = League.id
WHERE League.name = 'Netherlands Eredivisie';",1,european_football_2,best_pred_metadata
1122,1144,"SELECT id, finishing, curve FROM Player_Attributes WHERE player_api_id = ( SELECT player_api_id FROM Player ORDER BY weight DESC LIMIT 1 ) LIMIT 1","
SELECT finishing, curve
FROM Player_Attributes
WHERE player_api_id = (
    SELECT player_api_id
    FROM Player
    ORDER BY weight DESC
    LIMIT 1
);",0,european_football_2,best_pred_metadata
1123,1145,SELECT t1.name FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t2.season = '2015/2016' GROUP BY t1.name ORDER BY COUNT(t2.id) DESC LIMIT 1,"
SELECT League.name, COUNT(Match.id) as game_count
FROM League
JOIN Match ON League.id = Match.league_id
WHERE Match.season = '2015/2016'
GROUP BY League.name
ORDER BY game_count DESC
LIMIT 1;",0,european_football_2,best_pred_metadata
1124,1146,SELECT t2.team_long_name FROM Match AS t1 INNER JOIN Team AS t2 ON t1.away_team_api_id = t2.team_api_id ORDER BY t1.away_team_goal DESC LIMIT 1,"
SELECT Team.team_long_name
FROM Match
JOIN Team ON Match.away_team_api_id = Team.team_api_id
GROUP BY Match.away_team_api_id
ORDER BY SUM(Match.away_team_goal) DESC
LIMIT 1;",0,european_football_2,best_pred_metadata
1125,1147,SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.overall_rating = ( SELECT MAX(overall_rating) FROM Player_Attributes),"
SELECT player_name
FROM Player
JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id
ORDER BY strength DESC
LIMIT 1;",0,european_football_2,best_pred_metadata
1126,1148,SELECT CAST(COUNT(CASE WHEN t2.overall_rating > 70 THEN t1.id ELSE NULL END) AS REAL) * 100 / COUNT(t1.id) percent FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.height < 180,"
SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Player WHERE height < 180) AS percentage_under_180_strong_players
FROM Player
JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id
WHERE height < 180 AND strength > 70;",0,european_football_2,best_pred_metadata
1127,1150,"SELECT CAST(SUM(CASE WHEN STRFTIME('%Y', Birthday) > '1930' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Patient WHERE SEX = 'F'","
SELECT
    (COUNT(*) * 100.0) / (SELECT COUNT(*) FROM Patient) AS percentage_female_born_after_1930
FROM
    Patient
WHERE
    SEX = 'female' AND Birthday > '1930-01-01';",0,thrombosis_prediction,best_pred_metadata
1128,1151,"SELECT CAST(SUM(CASE WHEN Admission = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Patient WHERE STRFTIME('%Y', Birthday) BETWEEN '1930' AND '1940'","
SELECT
    ROUND((COUNT(DISTINCT Patient.ID) * 100.0) / (SELECT COUNT(DISTINCT Patient.ID) FROM Patient WHERE EXTRACT(YEAR FROM Patient.Birthday) BETWEEN 1930 AND 1940), 2) AS Percentage_Inpatient
FROM
    Patient
WHERE
    EXTRACT(YEAR FROM Patient.Birthday) BETWEEN 1930 AND 1940
    AND Patient.Admission = 'Inpatient';",0,thrombosis_prediction,best_pred_metadata
1129,1152,SELECT SUM(CASE WHEN Admission = '+' THEN 1 ELSE 0 END) / SUM(CASE WHEN Admission = '-' THEN 1 ELSE 0 END) FROM Patient WHERE Diagnosis = 'SLE',"
SELECT
    SUM(CASE WHEN p.Admission = 'Outpatient' THEN 1 ELSE 0 END) AS OutpatientCount,
    SUM(CASE WHEN p.Admission = 'Inpatient' THEN 1 ELSE 0 END) AS InpatientCount,
    (SUM(CASE WHEN p.Admission = 'Outpatient' THEN 1 ELSE 0 END) * 1.0 / SUM(CASE WHEN p.Admission = 'Inpatient' THEN 1 ELSE 0 END)) AS Ratio
FROM
    Patient p
WHERE
    p.Diagnosis = 'SLE';",0,thrombosis_prediction,best_pred_metadata
1130,1153,"SELECT T1.Diagnosis, T2.Date FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.ID = 30609","
SELECT Diagnosis, Date
FROM Examination
JOIN Patient ON Examination.ID = Patient.ID
JOIN Laboratory ON Examination.ID = Laboratory.ID
WHERE Patient.ID = 30609;",0,thrombosis_prediction,best_pred_metadata
1131,1154,"SELECT T1.SEX, T1.Birthday, T2.`Examination Date`, T2.Symptoms FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.ID = 163109","
SELECT Patient.SEX, Patient.Birthday, Examination.`Examination Date`, Examination.Symptoms
FROM Patient
JOIN Examination ON Patient.ID = Examination.ID
WHERE Patient.ID = 163109;",1,thrombosis_prediction,best_pred_metadata
1132,1155,"SELECT DISTINCT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.LDH > 500","
SELECT p.ID, p.SEX, p.Birthday
FROM Patient p
JOIN Laboratory l ON p.ID = l.ID
WHERE l.LDH > (SELECT MAX(LDH) FROM Laboratory WHERE LDH IS NOT NULL AND LDH < (SELECT AVG(LDH) + 2 * STDDEV(LDH) FROM Laboratory WHERE LDH IS NOT NULL))",0,thrombosis_prediction,best_pred_metadata
1133,1156,"SELECT DISTINCT T1.ID, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.RVVT = '+'","
SELECT p.ID, TIMESTAMPDIFF(YEAR, p.Birthday, CURDATE()) AS Age
FROM Patient p
JOIN Laboratory l ON p.ID = l.ID
WHERE l.C3 IS NOT NULL AND l.C3 > 0;",0,thrombosis_prediction,best_pred_metadata
1134,1157,"SELECT DISTINCT T1.ID, T1.SEX, T1.Diagnosis FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Thrombosis = 2","
SELECT p.ID, p.SEX, e.Diagnosis
FROM Patient p
JOIN Examination e ON p.ID = e.ID
WHERE e.Thrombosis = 'severe';",0,thrombosis_prediction,best_pred_metadata
1135,1158,"SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T1.Birthday) = '1937' AND T2.`T-CHO` >= 250","
SELECT P.ID, P.SEX, P.Birthday, P.Description, P.`First Date`, P.Admission, P.Diagnosis
FROM Patient P
JOIN Laboratory L ON P.ID = L.ID
WHERE P.Birthday BETWEEN '1937-01-01' AND '1937-12-31'
AND L.`T-CHO` > 200;",0,thrombosis_prediction,best_pred_metadata
1136,1159,"SELECT DISTINCT T1.ID, T1.SEX, T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.ALB < 3.5","
SELECT p.ID, p.SEX, p.Diagnosis
FROM Patient p
JOIN Laboratory l ON p.ID = l.ID
WHERE l.ALB < 3.5;",0,thrombosis_prediction,best_pred_metadata
1137,1160,SELECT CAST(SUM(CASE WHEN T1.SEX = 'F' AND (T2.TP < 6.0 OR T2.TP > 8.5) THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F',"
SELECT
    (COUNT(DISTINCT Patient.ID) * 100.0 / (SELECT COUNT(DISTINCT Patient.ID) FROM Patient WHERE Patient.SEX = 'female')) AS Percentage
FROM
    Patient
JOIN
    Laboratory ON Patient.ID = Laboratory.ID
WHERE
    Patient.SEX = 'female'
    AND (Laboratory.TP < 6.0 OR Laboratory.TP > 8.0);",0,thrombosis_prediction,best_pred_metadata
1138,1161,"SELECT AVG(T2.`aCL IgG`) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) >= 50 AND T1.Admission = '+'","
SELECT AVG(`aCL IgG`)
FROM Examination
JOIN Patient ON Examination.ID = Patient.ID
WHERE Patient.Admission = 'In-patient' AND TIMESTAMPDIFF(YEAR, Patient.Birthday, CURDATE()) >= 50;",0,thrombosis_prediction,best_pred_metadata
1139,1162,"SELECT COUNT(*) FROM Patient WHERE STRFTIME('%Y', Description) = '1997' AND SEX = 'F' AND Admission = '-'","
SELECT COUNT(*)
FROM Patient
WHERE SEX = 'female'
AND EXTRACT(YEAR FROM `First Date`) = 1997
AND Admission = 'outpatient clinic';",0,thrombosis_prediction,best_pred_metadata
1140,1163,"SELECT MIN(STRFTIME('%Y', `First Date`) - STRFTIME('%Y', Birthday)) FROM Patient","
SELECT MIN(DATEDIFF(YEAR, Birthday, `First Date`)) AS Age
FROM Patient;",0,thrombosis_prediction,best_pred_metadata
1141,1164,"SELECT CAST(SUM(CASE WHEN T1.SEX = 'F' THEN 1 ELSE 0 END) AS REAL) / COUNT(*) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T2.`Examination Date`) = '1997' AND T2.Thrombosis = 1","
SELECT COUNT(*)
FROM Patient
WHERE ID IN (
    SELECT ID
    FROM Examination
    WHERE Thrombosis = (SELECT MAX(Thrombosis) FROM Examination)
    AND EXTRACT(YEAR FROM `Examination Date`) = 1997
)
AND SEX = 'Women';",0,thrombosis_prediction,best_pred_metadata
1142,1165,"SELECT STRFTIME('%Y', MAX(T1.Birthday)) - STRFTIME('%Y', MIN(T1.Birthday)) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TG >= 200","
SELECT MIN(YEAR(CURDATE()) - YEAR(Birthday)) AS YoungestAge, MAX(YEAR(CURDATE()) - YEAR(Birthday)) AS OldestAge
FROM Patient
WHERE ID IN (
    SELECT ID
    FROM Laboratory
    WHERE TG = (SELECT MIN(TG) FROM Laboratory)
)",0,thrombosis_prediction,best_pred_metadata
1143,1166,"SELECT T2.Symptoms, T1.Diagnosis FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Symptoms IS NOT NULL ORDER BY T1.Birthday DESC LIMIT 1","
SELECT Symptoms, Diagnosis
FROM Examination
WHERE ID = (
    SELECT ID
    FROM Patient
    ORDER BY Birthday DESC
    LIMIT 1
);",0,thrombosis_prediction,best_pred_metadata
1144,1167,"SELECT CAST(COUNT(T1.ID) AS REAL) / 12 FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T2.Date) = '1998' AND T1.SEX = 'M'","
SELECT AVG(COUNT(DISTINCT p.ID)) AS Average_Male_Patients_Tested
FROM Patient p
JOIN Laboratory l ON p.ID = l.ID
WHERE p.SEX = 'Male' AND l.Date BETWEEN '1998-01-01' AND '1998-12-31'
GROUP BY strftime('%m', l.Date);",0,thrombosis_prediction,best_pred_metadata
1145,1168,"SELECT T1.Date, STRFTIME('%Y', T2.`First Date`) - STRFTIME('%Y', T2.Birthday) FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.Diagnosis = 'SJS' AND T2.Birthday IS NOT NULL ORDER BY T2.Birthday ASC LIMIT 1","
SELECT Laboratory.Date, DATE_PART('year', AGE(Patient.Birthday, Patient.'First Date')) AS Age
FROM Patient
JOIN Examination ON Patient.ID = Examination.ID
JOIN Laboratory ON Patient.ID = Laboratory.ID
WHERE Examination.Diagnosis = 'SJS'
ORDER BY Patient.Birthday ASC
LIMIT 1;",0,thrombosis_prediction,best_pred_metadata
1146,1169,SELECT CAST(SUM(CASE WHEN T2.UA <= 8.0 AND T1.SEX = 'M' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.UA <= 6.5 AND T1.SEX = 'F' THEN 1 ELSE 0 END) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID,"
SELECT
    SUM(CASE WHEN P.SEX = 'Male' THEN 1 ELSE 0 END) AS Male_Count,
    SUM(CASE WHEN P.SEX = 'Female' THEN 1 ELSE 0 END) AS Female_Count
FROM
    Patient P
JOIN
    Laboratory L ON P.ID = L.ID
WHERE
    L.UA IS NOT NULL AND L.UA NOT IN ('Normal', 'Within Normal Range');",0,thrombosis_prediction,best_pred_metadata
1147,1170,"SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.Admission = '+' AND STRFTIME('%Y', T2.`Examination Date`) - STRFTIME('%Y', T1.`First Date`) >= 1","
SELECT COUNT(P.ID)
FROM Patient P
LEFT JOIN Examination E ON P.ID = E.ID
WHERE E.ID IS NULL OR E.Examination_Date > DATE_ADD(P.First_Date, INTERVAL 1 YEAR);",0,thrombosis_prediction,best_pred_metadata
1148,1171,"SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T2.`Examination Date`) BETWEEN '1990' AND '1993' AND STRFTIME('%Y', T2.`Examination Date`) - STRFTIME('%Y', T1.Birthday) < '18'","
SELECT COUNT(*)
FROM Examination
JOIN Patient ON Examination.ID = Patient.ID
WHERE Patient.Birthday > '1993-01-01' AND Examination.`Examination Date` BETWEEN '1990-01-01' AND '1993-12-31';",0,thrombosis_prediction,best_pred_metadata
1149,1172,SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`T-BIL` >= 2.0 AND T1.SEX = 'M',"
SELECT COUNT(*)
FROM Patient
JOIN Laboratory ON Patient.ID = Laboratory.ID
WHERE Patient.SEX = 'Male' AND Laboratory.T-BIL > 1.2;",0,thrombosis_prediction,best_pred_metadata
1150,1173,SELECT T2.Diagnosis FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.`Examination Date` BETWEEN '1985-01-01' AND '1995-12-31' GROUP BY T2.Diagnosis ORDER BY COUNT(T2.Diagnosis) DESC LIMIT 1,"
SELECT Diagnosis, COUNT(*) as frequency
FROM Examination
WHERE ID IN (
    SELECT ID
    FROM Laboratory
    WHERE Date BETWEEN '1985-01-01' AND '1995-12-31'
)
GROUP BY Diagnosis
ORDER BY frequency DESC
LIMIT 1;",0,thrombosis_prediction,best_pred_metadata
1151,1174,"SELECT AVG('1999' - STRFTIME('%Y', T2.Birthday)) FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.Date BETWEEN '1991-10-01' AND '1991-10-30'","
SELECT AVG(TIMESTAMPDIFF(YEAR, Patient.Birthday, Laboratory.Date)) AS AverageAge
FROM Patient
JOIN Laboratory ON Patient.ID = Laboratory.ID
WHERE MONTH(Laboratory.Date) = 10 AND YEAR(Laboratory.Date) = 1991;",0,thrombosis_prediction,best_pred_metadata
1152,1175,"SELECT STRFTIME('%Y', T2.Date) - STRFTIME('%Y', T1.Birthday), T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID ORDER BY T2.HGB DESC LIMIT 1","
SELECT Patient.ID, Patient.Birthday, Examination.Diagnosis
FROM Patient
JOIN Examination ON Patient.ID = Examination.ID
JOIN Laboratory ON Patient.ID = Laboratory.ID AND Examination.Examination_Date = Laboratory.Date
WHERE Laboratory.HGB = (SELECT MAX(HGB) FROM Laboratory)
ORDER BY Laboratory.HGB DESC
LIMIT 1;",0,thrombosis_prediction,best_pred_metadata
1153,1176,SELECT ANA FROM Examination WHERE ID = 3605340 AND `Examination Date` = '1996-12-02',"
SELECT ANA
FROM Examination
WHERE ID = 3605340 AND `Examination Date` = '1996-12-02';",1,thrombosis_prediction,best_pred_metadata
1154,1178,SELECT SEX FROM Patient WHERE Diagnosis = 'AORTITIS' AND `First Date` IS NOT NULL ORDER BY `First Date` ASC LIMIT 1,"
SELECT Patient.SEX
FROM Patient
JOIN Examination ON Patient.ID = Examination.ID
WHERE Examination.Diagnosis = 'AORTITIS'
ORDER BY Patient.First_Date
LIMIT 1;",0,thrombosis_prediction,best_pred_metadata
1155,1179,"SELECT `aCL IgA`, `aCL IgG`, `aCL IgM` FROM Examination WHERE ID IN ( SELECT ID FROM Patient WHERE Diagnosis = 'SLE' AND Description = '1994-02-19' ) AND `Examination Date` = '1993-11-12'","
SELECT `aCL IgG`, `aCL IgM`, `aCL IgA`
FROM Examination
JOIN Patient ON Examination.ID = Patient.ID
WHERE Patient.Diagnosis = 'SLE'
AND Patient.`First Date` = '1994-02-19'
AND Examination.`Examination Date` = '1993-11-12';",0,thrombosis_prediction,best_pred_metadata
1156,1180,SELECT T1.SEX FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GPT = 9.0 AND T2.Date = '1992-06-12',"
SELECT Patient.SEX
FROM Patient
JOIN Laboratory ON Patient.ID = Laboratory.ID
WHERE Laboratory.GPT = 9 AND Laboratory.Date = '1992-6-12';",0,thrombosis_prediction,best_pred_metadata
1157,1181,"SELECT STRFTIME('%Y', T2.Date) - STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.UA = 8.4 AND T2.Date = '1991-10-21'","
SELECT P.Birthday, EXTRACT(YEAR FROM AGE(L.Date, P.Birthday)) AS Age
FROM Patient P
JOIN Laboratory L ON P.ID = L.ID
WHERE L.UA = 8.4 AND L.Date = '1991-10-21';",0,thrombosis_prediction,best_pred_metadata
1158,1182,"SELECT COUNT(*) FROM Laboratory WHERE ID = ( SELECT ID FROM Patient WHERE `First Date` = '1991-06-13' AND Diagnosis = 'SJS' ) AND STRFTIME('%Y', Date) = '1995'","
SELECT COUNT(*)
FROM Laboratory
WHERE ID = (SELECT ID FROM Patient WHERE `First Date` = '1991-06-13' AND Diagnosis = 'SJS')
AND Date BETWEEN '1995-01-01' AND '1995-12-31';",1,thrombosis_prediction,best_pred_metadata
1159,1183,SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.ID = ( SELECT ID FROM Examination WHERE `Examination Date` = '1997-01-27' AND Diagnosis = 'SLE' ) AND T2.`Examination Date` = T1.`First Date`,"
SELECT Patient.Diagnosis
FROM Patient
JOIN Examination ON Patient.ID = Examination.ID
WHERE Examination.Diagnosis = 'SLE' AND Examination.ExaminationDate = '1997-01-27'
AND Examination.ExaminationDate = Patient.FirstDate;",0,thrombosis_prediction,best_pred_metadata
1160,1184,SELECT T2.Symptoms FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.Birthday = '1959-03-01' AND T2.`Examination Date` = '1993-09-27',"
SELECT Symptoms
FROM Examination
WHERE ID IN (SELECT ID FROM Patient WHERE Birthday = '1959-03-01')
AND `Examination Date` = '1993-09-27';",1,thrombosis_prediction,best_pred_metadata
1161,1185,SELECT CAST((SUM(CASE WHEN T2.Date LIKE '1981-11-%' THEN T2.`T-CHO` ELSE 0 END) - SUM(CASE WHEN T2.Date LIKE '1981-12-%' THEN T2.`T-CHO` ELSE 0 END)) AS REAL) / SUM(CASE WHEN T2.Date LIKE '1981-12-%' THEN T2.`T-CHO` ELSE 0 END) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Birthday = '1959-02-18',"
SELECT
    ((June_TCHO - May_TCHO) / May_TCHO) * 100 AS Decrease_Rate
FROM
    (SELECT
        ID,
        AVG(CASE WHEN strftime('%Y-%m', Date) = '1981-11' THEN TCHO END) AS November_TCHO,
        AVG(CASE WHEN strftime('%Y-%m', Date) = '1981-12' THEN TCHO END) AS December_TCHO
    FROM
        Laboratory
    WHERE
        ID IN (SELECT ID FROM Patient WHERE Birthday = '1959-02-18')
    GROUP BY
        ID) AS Subquery;

The SQL query provided calculates the decrease rate for the total cholesterol (TCHO) of the patient who was born on 1959/2/18 from November to December in 1981. The query first filters the Laboratory table to include only the rows for the specified patient and then calculates the average total cholesterol for November and December. The decrease rate is then calculated using the formula ((December_TCHO - November_TCHO) / November_TCHO) * 100.",0,thrombosis_prediction,best_pred_metadata
1162,1186,SELECT ID FROM Examination WHERE `Examination Date` BETWEEN '1997-01-01' AND '1997-12-31' AND Diagnosis = 'Behcet',"
SELECT P.ID
FROM Patient P
JOIN Examination E ON P.ID = E.ID
WHERE E.Diagnosis = 'Behcet\'s'
AND E.Examination_Date BETWEEN '1970-01-01' AND '1997-12-31';",0,thrombosis_prediction,best_pred_metadata
1163,1187,SELECT DISTINCT ID FROM Laboratory WHERE Date BETWEEN '1987-07-06' AND '1996-01-31' AND GPT > 30 AND ALB < 4,"
SELECT P.ID
FROM Patient P
JOIN Examination E ON P.ID = E.ID
JOIN Laboratory L ON P.ID = L.ID
WHERE E.Examination_Date BETWEEN '1987-07-06' AND '1996-01-31'
AND L.GPT > 30
AND L.ALB < 4;",0,thrombosis_prediction,best_pred_metadata
1164,1188,"SELECT ID FROM Patient WHERE STRFTIME('%Y', Birthday) = '1964' AND SEX = 'F' AND Admission = '+'","
SELECT ID
FROM Patient
WHERE SEX = 'female' AND YEAR(Birthday) = 1964 AND Admission = 'admitted'
ORDER BY ID;",0,thrombosis_prediction,best_pred_metadata
1165,1189,SELECT COUNT(*) FROM Examination WHERE Thrombosis = 2 AND `ANA Pattern` = 'S' AND `aCL IgM` > (SELECT AVG(`aCL IgM`) * 1.2 FROM Examination WHERE Thrombosis = 2 AND `ANA Pattern` = 'S'),"
SELECT COUNT(*)
FROM Examination
WHERE Thrombosis = 2 AND `ANA Pattern` = 'S'
AND `aCL IgM` > (SELECT AVG(`aCL IgM`) FROM Examination) * 1.2;",0,thrombosis_prediction,best_pred_metadata
1166,1191,"SELECT CAST(SUM(CASE WHEN Diagnosis = 'BEHCET' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(ID) FROM Patient WHERE STRFTIME('%Y', `First Date`) = '1981' AND SEX = 'M'","
SELECT
    (COUNT(DISTINCT Patient.ID) * 100.0 /
    (SELECT COUNT(DISTINCT Patient.ID)
     FROM Patient
     WHERE Patient.SEX = 'Male' AND EXTRACT(YEAR FROM Patient.`First Date`) = 1981)) AS Percentage
FROM
    Patient
JOIN
    Examination ON Patient.ID = Examination.ID
WHERE
    Patient.SEX = 'Male' AND EXTRACT(YEAR FROM Patient.`First Date`) = 1981 AND Examination.Diagnosis = 'BEHCET';",0,thrombosis_prediction,best_pred_metadata
1167,1192,"SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Admission = '-' AND T2.`T-BIL` < 2.0 AND STRFTIME('%Y', T2.Date) = '1991' AND STRFTIME('%m', T2.Date) = '10'","
SELECT P.ID, P.SEX, P.Birthday, P.Description, P.`First Date`, P.Admission, P.Diagnosis
FROM Patient P
JOIN Laboratory L ON P.ID = L.ID
WHERE L.Date BETWEEN '1991-10-01' AND '1991-10-31'
AND L.`T-BIL` BETWEEN 0.2 AND 1.2
AND P.Admission = 'Outpatient Clinic';",0,thrombosis_prediction,best_pred_metadata
1168,1193,"SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.`ANA Pattern` != 'P' AND STRFTIME('%Y', T1.Birthday) BETWEEN '1980' AND '1989' AND T1.SEX = 'F'","
SELECT COUNT(*)
FROM Patient
WHERE SEX = 'female'
AND Birthday BETWEEN '1980-01-01' AND '1989-12-31'
AND ID NOT IN (
    SELECT ID
    FROM Examination
    WHERE `ANA Pattern` IS NOT NULL
    AND Diagnosis IS NULL
)",0,thrombosis_prediction,best_pred_metadata
1169,1194,SELECT T1.SEX FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 ON T3.ID = T2.ID WHERE T2.Diagnosis = 'PSS' AND T3.CRP = '2+' AND T3.CRE = 1.0 AND T3.LDH = 123,"
SELECT P.SEX
FROM Patient P
JOIN Examination E ON P.ID = E.ID
JOIN Laboratory L ON P.ID = L.ID AND E.Examination_Date = L.Date
WHERE E.Diagnosis = 'PSS' AND L.CRP = '2+' AND L.CRE = 1 AND L.LDH = 123;",0,thrombosis_prediction,best_pred_metadata
1170,1195,SELECT AVG(T2.ALB) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.PLT > 400 AND T1.Diagnosis = 'SLE' AND T1.SEX = 'F',"
SELECT AVG(ALB)
FROM Patient
JOIN Laboratory ON Patient.ID = Laboratory.ID
WHERE Patient.SEX = 'female'
AND Laboratory.PLT > 400
AND Patient.Diagnosis = 'SLE';",0,thrombosis_prediction,best_pred_metadata
1171,1196,SELECT Symptoms FROM Examination WHERE Diagnosis = 'SLE' GROUP BY Symptoms ORDER BY COUNT(Symptoms) DESC LIMIT 1,"
SELECT Symptoms
FROM Examination
WHERE Diagnosis = 'SLE'
GROUP BY Symptoms
ORDER BY COUNT(*) DESC
LIMIT 1;",0,thrombosis_prediction,best_pred_metadata
1172,1197,"SELECT `First Date`, Diagnosis FROM Patient WHERE ID = 48473","
SELECT `First Date`, Diagnosis
FROM Patient
WHERE ID = 48473;",1,thrombosis_prediction,best_pred_metadata
1173,1198,SELECT COUNT(ID) FROM Patient WHERE SEX = 'F' AND Diagnosis = 'APS',"
SELECT COUNT(*)
FROM Patient
WHERE SEX = 'female' AND Diagnosis = 'APS';",0,thrombosis_prediction,best_pred_metadata
1174,1199,"SELECT COUNT(ID) FROM Laboratory WHERE ALB <= 6.0 OR ALB >= 8.5 AND STRFTIME('%Y', Date) = '1997'","
SELECT COUNT(DISTINCT p.ID)
FROM Patient p
JOIN Laboratory l ON p.ID = l.ID
WHERE YEAR(l.Date) = 1997
AND (l.TP < 6.4 OR l.TP > 8.3);",0,thrombosis_prediction,best_pred_metadata
1175,1201,"SELECT CAST(SUM(CASE WHEN SEX = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(ID) FROM Patient WHERE Diagnosis = 'RA' AND STRFTIME('%Y', Birthday) = '1980'","
SELECT
    (COUNT(DISTINCT Patient.ID) * 100.0 /
    (SELECT COUNT(DISTINCT Patient.ID)
     FROM Patient
     WHERE EXTRACT(YEAR FROM Patient.Birthday) = 1980 AND Patient.Diagnosis = 'RA')) AS Percentage_Women
FROM
    Patient
WHERE
    EXTRACT(YEAR FROM Patient.Birthday) = 1980 AND
    Patient.Diagnosis = 'RA' AND
    Patient.SEX = 'Female';",0,thrombosis_prediction,best_pred_metadata
1176,1202,"SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Diagnosis = 'Behcet' AND T1.SEX = 'M' AND STRFTIME('%Y', T2.`Examination Date`) BETWEEN '1995' AND '1997' AND T1.Admission = '-'","
SELECT COUNT(*)
FROM Patient
WHERE SEX = 'Male'
AND `First Date` BETWEEN '1995-01-01' AND '1997-12-31'
AND Diagnosis = 'BEHCET disease'
AND Admission <> 'Yes'

This SQL query selects the count of male patients who underwent testing between 1995 and 1997, were diagnosed with BEHCET disease, and did not stay in the hospital for treatment. The query filters the Patient table based on the specified conditions and returns the count of matching records.",0,thrombosis_prediction,best_pred_metadata
1177,1203,SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.WBC < 3.5 AND T1.SEX = 'F',"
SELECT COUNT(*)
FROM Patient
WHERE SEX = 'female'
AND ID IN (
    SELECT ID
    FROM Laboratory
    WHERE WBC < 3.5
);",0,thrombosis_prediction,best_pred_metadata
1178,1204,"SELECT STRFTIME('%d', T3.`Examination Date`) - STRFTIME('%d', T1.`First Date`) FROM Patient AS T1 INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T1.ID = 821298","
SELECT ""First Date"" - ""Examination Date"" AS ""Days Until Evaluation""
FROM Patient
JOIN Examination ON Patient.ID = Examination.ID
WHERE Patient.ID = 821298;",0,thrombosis_prediction,best_pred_metadata
1179,1206,SELECT Date FROM Laboratory WHERE ID = 48473 AND GOT >= 60,"
SELECT Date
FROM Laboratory
WHERE ID = 48473 AND GOT > (SELECT AVG(GOT) + 2 * STDDEV(GOT) FROM Laboratory)",0,thrombosis_prediction,best_pred_metadata
1180,1207,"SELECT DISTINCT T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GOT < 60 AND STRFTIME('%Y', T2.Date) = '1994'","
SELECT Patient.ID, Patient.SEX, Patient.Birthday
FROM Patient
JOIN Laboratory ON Patient.ID = Laboratory.ID
WHERE Laboratory.Date BETWEEN '1994-01-01' AND '1994-12-31'
AND Laboratory.GOT BETWEEN 10 AND 40;",0,thrombosis_prediction,best_pred_metadata
1181,1208,SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.GPT >= 60,"
SELECT P.ID
FROM Patient P
JOIN Laboratory L ON P.ID = L.ID
WHERE P.SEX = 'Male' AND L.GPT > (SELECT UPPER_LIMIT FROM Normal_Ranges WHERE Test = 'GPT')

Note: In this query, it is assumed that there is a separate table called Normal_Ranges that contains the upper limit for normal range of various laboratory tests. If such a table does not exist, the query may need to be modified to include the normal range value directly in the query.",0,thrombosis_prediction,best_pred_metadata
1182,1209,SELECT DISTINCT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GPT > 60 ORDER BY T1.Birthday ASC,"
SELECT Examination.Diagnosis
FROM Examination
JOIN Laboratory ON Examination.ID = Laboratory.ID
WHERE Laboratory.GPT > (SELECT MAX(GPT) FROM Laboratory WHERE GPT IS NOT NULL)
ORDER BY Patient.Birthday ASC;",0,thrombosis_prediction,best_pred_metadata
1183,1210,SELECT AVG(LDH) FROM Laboratory WHERE LDH < 500,"
SELECT AVG(LDH) AS Average_LDH
FROM Laboratory
WHERE LDH BETWEEN normal_range_min AND normal_range_max;

Note: The normal range for LDH is not provided in the question, so you need to assume a normal range based on common medical knowledge or use a placeholder (normal_range_min and normal_range_max) in the SQL query.",0,thrombosis_prediction,best_pred_metadata
1184,1211,"SELECT DISTINCT T1.ID, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.LDH > 600 AND T2.LDH < 800","
SELECT p.ID, TIMESTAMPDIFF(YEAR, p.Birthday, CURDATE()) AS Age
FROM Patient p
JOIN Laboratory l ON p.ID = l.ID
WHERE l.LDH BETWEEN 100 AND 300;",0,thrombosis_prediction,best_pred_metadata
1185,1212,SELECT T1.Admission FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.ALP < 300,"
SELECT p.Admission
FROM Patient p
JOIN Examination e ON p.ID = e.ID
JOIN Laboratory l ON p.ID = l.ID
WHERE l.ALP BETWEEN normal_range_min AND normal_range_max;",0,thrombosis_prediction,best_pred_metadata
1186,1213,"SELECT T1.ID , CASE WHEN T2.ALP < 300 THEN 'normal' ELSE 'abNormal' END FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Birthday = '1982-04-01'","
SELECT p.ID,
       CASE
           WHEN l.ALP BETWEEN 44 AND 140 THEN 'Within normal range'
           ELSE 'Not within normal range'
       END AS ALP_Range
FROM Patient p
JOIN Laboratory l ON p.ID = l.ID
WHERE p.Birthday = '1982-04-01';",0,thrombosis_prediction,best_pred_metadata
1187,1214,"SELECT DISTINCT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TP < 6.0","
SELECT p.ID, p.SEX, p.Birthday
FROM Patient p
JOIN Laboratory l ON p.ID = l.ID
WHERE l.TP < (SELECT MIN(TP) FROM Laboratory WHERE TP IS NOT NULL);",0,thrombosis_prediction,best_pred_metadata
1188,1215,SELECT T2.TP - 8.5 FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND T2.TP > 8.5,"
SELECT p.ID, p.SEX, l.TP, (l.TP - 6.4) AS TP_Deviation
FROM Patient p
JOIN Laboratory l ON p.ID = l.ID
WHERE p.SEX = 'female' AND l.TP > 6.4;",0,thrombosis_prediction,best_pred_metadata
1189,1216,SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND (T2.ALB <= 3.5 OR T2.ALB >= 5.5) ORDER BY T1.Birthday,"
SELECT Patient.ID, Patient.Birthday
FROM Patient
JOIN Laboratory ON Patient.ID = Laboratory.ID
WHERE Patient.SEX = 'Male' AND (Laboratory.ALB < lower_range OR Laboratory.ALB > upper_range)
ORDER BY Patient.Birthday DESC;",0,thrombosis_prediction,best_pred_metadata
1190,1217,"SELECT CASE WHEN T2.ALB >= 3.5 AND T2.ALB <= 5.5 THEN 'normal' ELSE 'abnormal' END FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T1.Birthday) = '1982'","
SELECT p.ID, p.Birthday, l.ALB
FROM Patient p
JOIN Laboratory l ON p.ID = l.ID
WHERE YEAR(p.Birthday) = 1982
AND l.ALB BETWEEN 3.5 AND 5.0;",0,thrombosis_prediction,best_pred_metadata
1191,1218,SELECT CAST(SUM(CASE WHEN T2.UA > 6.5 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F',"
SELECT
    (COUNT(DISTINCT Patient.ID) * 100.0 / (SELECT COUNT(DISTINCT Patient.ID) FROM Patient WHERE Patient.SEX = 'Female')) AS Percentage
FROM
    Patient
JOIN
    Laboratory ON Patient.ID = Laboratory.ID
WHERE
    Patient.SEX = 'Female' AND Laboratory.UA > [normal range]

Please replace [normal range] with the actual normal range for uric acid.",0,thrombosis_prediction,best_pred_metadata
1192,1219,SELECT AVG(T2.UA) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE (T2.UA > 6.5 AND T1.SEX = 'F') OR (T2.UA > 8.0 AND T1.SEX = 'M') AND T2.Date = ( SELECT MAX(Date) FROM Laboratory ),"
SELECT AVG(UA) AS Average_UA_Index
FROM Laboratory
WHERE ID IN (
    SELECT ID
    FROM Patient
    WHERE ID IN (
        SELECT ID
        FROM Laboratory
        WHERE UA IS NULL OR UA = 0
    )
)
AND Date = (
    SELECT MAX(Date)
    FROM Laboratory
    WHERE ID = Laboratory.ID
);",0,thrombosis_prediction,best_pred_metadata
1193,1220,"SELECT DISTINCT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.UN = 29","
SELECT p.ID, p.SEX, p.Birthday
FROM Patient p
JOIN Laboratory l ON p.ID = l.ID
WHERE l.UN = (SELECT MAX(UN) FROM Laboratory WHERE UN < 20)

This SQL query joins the Patient and Laboratory tables on the ID column, then filters the results to only include patients whose UN value is equal to the maximum UN value that is less than 20. This assumes that 20 is the borderline for passing the urea nitrogen test. The query then selects the ID, SEX, and Birthday columns from the filtered results.",0,thrombosis_prediction,best_pred_metadata
1194,1221,"SELECT DISTINCT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.UN < 30 AND T1.Diagnosis = 'RA'","
SELECT p.ID, p.SEX, p.Birthday
FROM Patient p
JOIN Examination e ON p.ID = e.ID
JOIN Laboratory l ON p.ID = l.ID
WHERE e.Diagnosis = 'RA' AND l.UN BETWEEN <normal_index_lower_limit> AND <normal_index_upper_limit>;",0,thrombosis_prediction,best_pred_metadata
1195,1222,SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CRE >= 1.5 AND T1.SEX = 'M',"
SELECT COUNT(*)
FROM Patient
JOIN Laboratory ON Patient.ID = Laboratory.ID
WHERE Patient.SEX = 'Male' AND Laboratory.CRE > 1.2;",0,thrombosis_prediction,best_pred_metadata
1196,1223,SELECT CASE WHEN SUM(CASE WHEN T1.SEX = 'M' THEN 1 ELSE 0 END) > SUM(CASE WHEN T1.SEX = 'F' THEN 1 ELSE 0 END) THEN 'True' ELSE 'False' END FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CRE >= 1.5,"
SELECT COUNT(*) AS male_count
FROM Patient
JOIN Laboratory ON Patient.ID = Laboratory.ID
WHERE Patient.SEX = 'Male' AND (Laboratory.CRE < 0.7 OR Laboratory.CRE > 1.3)

SELECT COUNT(*) AS female_count
FROM Patient
JOIN Laboratory ON Patient.ID = Laboratory.ID
WHERE Patient.SEX = 'Female' AND (Laboratory.CRE < 0.7 OR Laboratory.CRE > 1.3)

SELECT CASE
    WHEN male_count > female_count THEN 'True'
    ELSE 'False'
END AS result
FROM (
    SELECT COUNT(*) AS male_count
    FROM Patient
    JOIN Laboratory ON Patient.ID = Laboratory.ID
    WHERE Patient.SEX = 'Male' AND (Laboratory.CRE < 0.7 OR Laboratory.CRE > 1.3)
) AS male_subquery,
(
    SELECT COUNT(*) AS female_count
    FROM Patient
    JOIN Laboratory ON Patient.ID = Laboratory.ID
    WHERE Patient.SEX = 'Female' AND (Laboratory.CRE < 0.7 OR Laboratory.CRE > 1.3)
) AS female_subquery;",0,thrombosis_prediction,best_pred_metadata
1197,1224,"SELECT T2.`T-BIL`, T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID ORDER BY T2.`T-BIL` DESC LIMIT 1","
SELECT P.ID, P.SEX, P.Birthday, L.T_BIL
FROM Patient P
JOIN Laboratory L ON P.ID = L.ID
ORDER BY L.T_BIL DESC
LIMIT 1;",0,thrombosis_prediction,best_pred_metadata
1198,1225,"SELECT DISTINCT CASE WHEN T1.SEX = 'F' THEN T1.ID END , CASE WHEN T1.SEX = 'M' THEN T1.ID END FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`T-BIL` >= 2.0","
SELECT p.SEX, AVG(l.T_BIL) as Average_T_BIL
FROM Patient p
JOIN Laboratory l ON p.ID = l.ID
WHERE l.T_BIL NOT BETWEEN 0.2 AND 1.2
GROUP BY p.SEX;",0,thrombosis_prediction,best_pred_metadata
1199,1226,"SELECT T1.ID, T2.`T-CHO` FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID ORDER BY T2.`T-CHO` DESC, T1.Birthday ASC LIMIT 1","
SELECT p.ID, l.T-CHO
FROM Patient p
JOIN Laboratory l ON p.ID = l.ID
WHERE p.Birthday = (SELECT MIN(Birthday) FROM Patient)
AND l.T-CHO = (SELECT MAX(T-CHO) FROM Laboratory);",0,thrombosis_prediction,best_pred_metadata
1200,1227,"SELECT AVG(STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday)) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`T-CHO` >= 250 AND T1.SEX = 'M'","
SELECT AVG(DATEDIFF(YEAR, Birthday, CURDATE())) AS AverageAge
FROM Patient
JOIN Examination ON Patient.ID = Examination.ID
JOIN Laboratory ON Patient.ID = Laboratory.ID
WHERE Patient.SEX = 'Male' AND Laboratory.T-CHO > (desired_cholesterol_threshold)

Note: Replace (desired_cholesterol_threshold) with the actual threshold value for high cholesterol. Since the threshold value is not provided in the question, I've left it as a placeholder.",0,thrombosis_prediction,best_pred_metadata
1201,1228,"SELECT T1.ID, T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TG > 300","
SELECT Patient.ID, Patient.Diagnosis
FROM Patient
JOIN Examination ON Patient.ID = Examination.ID
JOIN Laboratory ON Patient.ID = Laboratory.ID
WHERE Laboratory.TG > 100;",0,thrombosis_prediction,best_pred_metadata
1202,1229,"SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TG >= 200 AND STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) > 50","
SELECT COUNT(*)
FROM Patient
WHERE ID IN (
    SELECT ID
    FROM Laboratory
    WHERE TG > 150
)
AND TIMESTAMPDIFF(YEAR, Birthday, CURDATE()) > 50;",0,thrombosis_prediction,best_pred_metadata
1203,1230,SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CPK < 250 AND T1.Admission = '-',"
SELECT DISTINCT P.ID
FROM Patient P
JOIN Examination E ON P.ID = E.ID
JOIN Laboratory L ON P.ID = L.ID
WHERE P.Admission = 'Outpatient' AND L.CPK BETWEEN normal_range_min AND normal_range_max;",0,thrombosis_prediction,best_pred_metadata
1204,1231,"SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T1.Birthday) BETWEEN '1936' AND '1956' AND T1.SEX = 'M' AND T2.CPK >= 250","
SELECT COUNT(*)
FROM Patient
JOIN Laboratory ON Patient.ID = Laboratory.ID
WHERE Patient.Birthday BETWEEN '1936-01-01' AND '1956-12-31'
AND Patient.SEX = 'Male'
AND Laboratory.CPK > 170;",0,thrombosis_prediction,best_pred_metadata
1205,1232,"SELECT DISTINCT T1.ID, T1.SEX , STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GLU >= 180 AND T2.`T-CHO` < 250","
SELECT p.ID, p.SEX, TIMESTAMPDIFF(YEAR, p.Birthday, CURDATE()) AS Age
FROM Patient p
JOIN Laboratory l ON p.ID = l.ID
WHERE l.GLU NOT BETWEEN 70 AND 100
AND l.T_CHO BETWEEN 125 AND 200;",0,thrombosis_prediction,best_pred_metadata
1206,1233,"SELECT DISTINCT T1.ID, T2.GLU FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T1.`First Date`) = '1991' AND T2.GLU < 180","
SELECT P.ID, L.GLU
FROM Patient P
JOIN Laboratory L ON P.ID = L.ID
WHERE P.First_Date BETWEEN '1991-01-01' AND '1991-12-31'
AND L.GLU BETWEEN 70 AND 100;",0,thrombosis_prediction,best_pred_metadata
1207,1234,"SELECT DISTINCT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.WBC <= 3.5 OR T2.WBC >= 9.0 GROUP BY T1.SEX,T1.ID ORDER BY T1.Birthday ASC","
SELECT p.ID, p.SEX, p.Birthday
FROM Patient p
JOIN Laboratory l ON p.ID = l.ID
WHERE l.WBC < (SELECT LOWER_BOUND FROM Normal_Ranges WHERE Test = 'WBC')
OR l.WBC > (SELECT UPPER_BOUND FROM Normal_Ranges WHERE Test = 'WBC')
GROUP BY p.SEX
ORDER BY TIMESTAMPDIFF(YEAR, p.Birthday, CURDATE()) ASC;",0,thrombosis_prediction,best_pred_metadata
1208,1235,"SELECT T1.Diagnosis, T1.ID , STRFTIME('%Y', CURRENT_TIMESTAMP) -STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RBC < 3.5","
SELECT p.ID, TIMESTAMPDIFF(YEAR, p.Birthday, CURDATE()) AS Age, e.Diagnosis
FROM Patient p
JOIN Examination e ON p.ID = e.ID
JOIN Laboratory l ON p.ID = l.ID AND e.Examination_Date = l.Date
WHERE l.RBC < (SELECT AVG(RBC) FROM Laboratory)
ORDER BY p.ID;",0,thrombosis_prediction,best_pred_metadata
1209,1236,"SELECT DISTINCT T1.ID, T1.Admission FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND (T2.RBC <= 3.5 OR T2.RBC >= 6.0) AND STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) >= 50","
SELECT Patient.Admission
FROM Patient
JOIN Laboratory ON Patient.ID = Laboratory.ID
WHERE Patient.SEX = 'Female'
AND TIMESTAMPDIFF(YEAR, Patient.Birthday, CURDATE()) >= 50
AND (Laboratory.RBC < LOWER_LIMIT OR Laboratory.RBC > UPPER_LIMIT);",0,thrombosis_prediction,best_pred_metadata
1210,1237,"SELECT DISTINCT T1.ID, T1.SEX FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.HGB < 10 AND T1.Admission = '-'","
SELECT P.ID, P.SEX
FROM Patient P
JOIN Examination E ON P.ID = E.ID
JOIN Laboratory L ON P.ID = L.ID
WHERE P.Admission = 'Outpatient' AND L.HGB < 12.0;",0,thrombosis_prediction,best_pred_metadata
1211,1238,"SELECT T1.ID, T1.SEX FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SLE' AND T2.HGB > 10 AND T2.HGB < 17 ORDER BY T1.Birthday ASC LIMIT 1","
SELECT ID, SEX
FROM Patient
WHERE Diagnosis = 'SLE'
AND ID IN (
    SELECT ID
    FROM Laboratory
    WHERE HGB = (SELECT MAX(HGB) FROM Laboratory WHERE HGB <= 15)
)
ORDER BY Birthday ASC
LIMIT 1;",0,thrombosis_prediction,best_pred_metadata
1212,1239,"SELECT DISTINCT T1.ID, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.ID IN ( SELECT ID FROM Laboratory WHERE HCT >= 52 GROUP BY ID HAVING COUNT(ID) >= 2 )","
SELECT p.ID, TIMESTAMPDIFF(YEAR, p.Birthday, CURDATE()) AS Age
FROM Patient p
JOIN Laboratory l ON p.ID = l.ID
WHERE l.HCT > (normal_range_upper_limit)
GROUP BY p.ID, p.Birthday
HAVING COUNT(l.Date) >= 2;",0,thrombosis_prediction,best_pred_metadata
1213,1240,"SELECT AVG(T2.HCT) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.HCT < 29 AND STRFTIME('%Y', T2.Date) = '1991'","
SELECT AVG(HCT)
FROM Laboratory
WHERE Date BETWEEN '1991-01-01' AND '1991-12-31'
AND HCT < (normal_range_value)

Note: The normal range for hematocrit is typically between 36% and 54% for adult males and 33% to 47% for adult females. However, without specific normal range values provided, I've left a placeholder in the SQL query. Please replace (normal_range_value) with the appropriate normal range value for hematocrit based on the context of the question.",0,thrombosis_prediction,best_pred_metadata
1214,1242,"SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.PLT BETWEEN 100 AND 400 AND STRFTIME('%Y', T2.Date) - STRFTIME('%Y', T1.Birthday) < 50 AND STRFTIME('%Y', T2.Date) = '1984'","
SELECT P.ID, P.SEX, P.Birthday
FROM Patient P
JOIN Laboratory L ON P.ID = L.ID
WHERE YEAR(L.Date) = 1984
AND TIMESTAMPDIFF(YEAR, P.Birthday, CURDATE()) < 50
AND L.PLT BETWEEN 150000 AND 450000;",0,thrombosis_prediction,best_pred_metadata
1215,1243,"SELECT CAST(SUM(CASE WHEN T2.PT >= 14 AND T1.SEX = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) > 55","
SELECT
    (COUNT(DISTINCT p.ID) * 100.0 / (SELECT COUNT(DISTINCT p.ID) FROM Patient p WHERE p.Birthday <= DATE_SUB(CURDATE(), INTERVAL 55 YEAR))) AS 'Percentage of Female with Abnormal PT'
FROM
    Patient p
JOIN
    Laboratory l ON p.ID = l.ID
WHERE
    p.Birthday <= DATE_SUB(CURDATE(), INTERVAL 55 YEAR)
    AND p.SEX = 'Female'
    AND l.PT NOT BETWEEN 12 AND 14;",0,thrombosis_prediction,best_pred_metadata
1216,1244,"SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T1.`First Date`) > '1992' AND T2.PT < 14","
SELECT P.ID, P.SEX, P.Birthday, P.Description, P.`First Date`, P.Admission, P.Diagnosis
FROM Patient P
JOIN Laboratory L ON P.ID = L.ID
WHERE P.`First Date` > '1992-12-31'
AND L.PT BETWEEN 12 AND 14;",0,thrombosis_prediction,best_pred_metadata
1217,1245,SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.Date > '1997-01-01' AND T2.APTT >= 45,"
SELECT COUNT(*)
FROM Examination
WHERE `Examination Date` > '1997-01-01'
AND `APTT` IS NOT NULL;",0,thrombosis_prediction,best_pred_metadata
1218,1246,SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE T3.Thrombosis = 3 AND T2.APTT > 45,"
SELECT COUNT(*)
FROM Examination
WHERE APTT IS NOT NULL AND Thrombosis = 1;",0,thrombosis_prediction,best_pred_metadata
1219,1247,SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.FG <= 150 OR T2.FG >= 450 AND T2.WBC > 3.5 AND T2.WBC < 9.0 AND T1.SEX = 'M',"
SELECT COUNT(*)
FROM Patient
JOIN Laboratory ON Patient.ID = Laboratory.ID
WHERE Patient.SEX = 'Male' AND Laboratory.WBC BETWEEN 4500 AND 11000 AND Laboratory.FG NOT BETWEEN 200 AND 400;",0,thrombosis_prediction,best_pred_metadata
1220,1248,SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.FG <= 150 OR T2.FG >= 450 AND T1.Birthday > '1980-01-01',"
SELECT COUNT(*)
FROM Patient
WHERE Birthday > '1980-01-01'
AND ID IN (
    SELECT ID
    FROM Laboratory
    WHERE FG <> 'Normal'
);",0,thrombosis_prediction,best_pred_metadata
1221,1249,SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`U-PRO` >= 30,"
SELECT Examination.Diagnosis
FROM Examination
JOIN Laboratory ON Examination.ID = Laboratory.ID
WHERE Laboratory.U-PRO = 'Higher than normal'",0,thrombosis_prediction,best_pred_metadata
1222,1250,SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`U-PRO` > 0 AND T2.`U-PRO` < 30 AND T1.Diagnosis = 'SLE',"
SELECT p.ID
FROM Patient p
JOIN Examination e ON p.ID = e.ID
JOIN Laboratory l ON p.ID = l.ID
WHERE l.U_PRO = 'Normal' AND p.Diagnosis = 'SLE';",0,thrombosis_prediction,best_pred_metadata
1223,1251,SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE T2.IGG < 900 AND T3.Symptoms = 'abortion',"
SELECT COUNT(*)
FROM Patient
JOIN Examination ON Patient.ID = Examination.ID
JOIN Laboratory ON Patient.ID = Laboratory.ID
WHERE Laboratory.IGG < (SELECT AVG(IGG) FROM Laboratory)
AND Examination.Symptoms LIKE '%abortion%';",1,thrombosis_prediction,best_pred_metadata
1224,1252,SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE T2.IGG BETWEEN 900 AND 2000 AND T3.Symptoms IS NOT NULL,"
SELECT COUNT(*)
FROM Examination
WHERE ID IN (
    SELECT ID
    FROM Laboratory
    WHERE IGG = (SELECT MIN(IGG) FROM Laboratory)
)
AND Symptoms IS NOT NULL;",0,thrombosis_prediction,best_pred_metadata
1225,1253,SELECT patientData.Diagnosis FROM Patient AS patientData INNER JOIN Laboratory AS labData ON patientData.ID = labData.ID WHERE labData.IGA BETWEEN 80 AND 500 ORDER BY labData.IGA DESC LIMIT 1,"
SELECT Diagnosis
FROM Examination
WHERE aCL_IgA = (SELECT MAX(aCL_IgA) FROM Examination WHERE aCL_IgA <= NORMAL_RANGE_VALUE);",0,thrombosis_prediction,best_pred_metadata
1226,1254,SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.IGA BETWEEN 80 AND 500 AND T1.`First Date` > '1990-01-01',"
SELECT COUNT(*)
FROM Patient
WHERE ID IN (
    SELECT ID
    FROM Examination
    WHERE `aCL IgA` = 0
)
AND `First Date` > '1990-01-01';",0,thrombosis_prediction,best_pred_metadata
1227,1255,SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.IGM NOT BETWEEN 40 AND 400 GROUP BY T1.Diagnosis ORDER BY COUNT(T1.Diagnosis) DESC LIMIT 1,"
SELECT Diagnosis, COUNT(*) as frequency
FROM Examination
WHERE ID IN (
    SELECT ID
    FROM Laboratory
    WHERE IGM IS NOT NULL AND IGM <> 0
)
GROUP BY Diagnosis
ORDER BY frequency DESC
LIMIT 1;",0,thrombosis_prediction,best_pred_metadata
1228,1256,SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE (T2.CRP = '-' OR T2.CRP = '+-' OR T2.CRP < 1.0) AND T1.Description IS NULL,"
SELECT COUNT(*)
FROM Patient
WHERE ID NOT IN (
    SELECT ID
    FROM Laboratory
    WHERE CRP = 'normal'
)",0,thrombosis_prediction,best_pred_metadata
1229,1257,"SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE (T2.CRP != '-' AND T2.CRP != '+-') AND T2.CRP >= 1.0 AND STRFTIME('%Y', Date('now')) - STRFTIME('%Y', T1.Birthday) < '18'","
SELECT COUNT(*)
FROM Patient
WHERE ID IN (
    SELECT ID
    FROM Laboratory
    WHERE CRP IS NOT NULL AND CRP <> 'Normal'
)
AND TIMESTAMPDIFF(YEAR, Birthday, CURDATE()) < 18;",0,thrombosis_prediction,best_pred_metadata
1230,1258,SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE (T2.RA = '-' OR T2.RA = '+-') AND T3.KCT = '+',"
SELECT COUNT(*)
FROM Patient
WHERE ID IN (
    SELECT ID
    FROM Examination
    WHERE RF = 'Normal'
    AND ID IN (
        SELECT ID
        FROM Laboratory
        WHERE FG IS NOT NULL
    )
);",0,thrombosis_prediction,best_pred_metadata
1231,1259,SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE (T2.RA = '-' OR T2.RA = '+-') AND T1.Birthday > 1995-01-01,"
SELECT Examination.Diagnosis
FROM Examination
JOIN Patient ON Examination.ID = Patient.ID
WHERE Patient.Birthday > '1995-01-01'
AND Examination.RF = 'Normal';",0,thrombosis_prediction,best_pred_metadata
1232,1260,"SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RF < 20 AND STRFTIME('%Y', DATE('now')) - STRFTIME('%Y', T1.Birthday) > 60","
SELECT p.ID
FROM Patient p
JOIN Laboratory l ON p.ID = l.ID
WHERE l.RF = 'Normal' AND TIMESTAMPDIFF(YEAR, p.Birthday, CURDATE()) > 60;",0,thrombosis_prediction,best_pred_metadata
1233,1261,SELECT COUNT(DISTINCT T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RF < 20 AND T1.Thrombosis = 0,"
SELECT COUNT(*)
FROM Patient
WHERE ID NOT IN (
    SELECT ID
    FROM Examination
    WHERE Thrombosis = 1
)
AND ID NOT IN (
    SELECT ID
    FROM Laboratory
    WHERE RF IS NOT NULL AND RF <> 'normal'
);",0,thrombosis_prediction,best_pred_metadata
1234,1262,SELECT COUNT(DISTINCT T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.C3 > 35 AND T1.`ANA Pattern` = 'P',"
SELECT COUNT(*)
FROM Examination
WHERE `ANA Pattern` = 'P'
AND ID IN (
    SELECT ID
    FROM Laboratory
    WHERE C3 = (SELECT MIN(C3) FROM Laboratory)
);",0,thrombosis_prediction,best_pred_metadata
1235,1263,SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 on T1.ID = T3.ID WHERE (T3.HCT >= 52 OR T3.HCT <= 29) ORDER BY T2.`aCL IgA` DESC LIMIT 1,"
SELECT P.ID
FROM Patient P
JOIN Examination E ON P.ID = E.ID
JOIN Laboratory L ON P.ID = L.ID
WHERE L.HCT NOT IN (SELECT AVG(HCT) FROM Laboratory)
ORDER BY (E.`aCL IgG` + E.`aCL IgM` + E.`aCL IgA`) DESC
LIMIT 1;",0,thrombosis_prediction,best_pred_metadata
1236,1264,SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.C4 > 10 AND T1.Diagnosis = 'APS',"
SELECT COUNT(*)
FROM Patient
JOIN Examination ON Patient.ID = Examination.ID
JOIN Laboratory ON Patient.ID = Laboratory.ID
WHERE Examination.Thrombosis = 1 AND Laboratory.C4 IS NULL;",0,thrombosis_prediction,best_pred_metadata
1237,1265,SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RNP = 'negative' OR T2.RNP = '0' AND T1.Admission = '+',"
SELECT COUNT(*)
FROM Patient
WHERE Admission = 'Admitted'
AND ID IN (
    SELECT ID
    FROM Laboratory
    WHERE RNP IS NULL OR RNP = 'Normal'
)",0,thrombosis_prediction,best_pred_metadata
1238,1266,SELECT T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RNP != '-' OR '+-' ORDER BY T1.Birthday DESC LIMIT 1,"
SELECT Patient.Birthday
FROM Patient
JOIN Laboratory ON Patient.ID = Laboratory.ID
WHERE Laboratory.RNP IS NOT NULL
ORDER BY Patient.Birthday DESC
LIMIT 1;",1,thrombosis_prediction,best_pred_metadata
1239,1267,"SELECT COUNT(T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SM IN ('negative','0') AND T1.Thrombosis = 1","
SELECT COUNT(*)
FROM Examination
WHERE ID IN (
    SELECT ID
    FROM Laboratory
    WHERE SM IS NULL OR SM = 'Normal'
) AND Thrombosis = (
    SELECT MAX(Thrombosis)
    FROM Examination
);",1,thrombosis_prediction,best_pred_metadata
1240,1268,"SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SM NOT IN ('negative','0') ORDER BY T1.Birthday DESC LIMIT 3","
SELECT ID
FROM Patient
WHERE ID IN (
    SELECT ID
    FROM Laboratory
    WHERE SM = 'abnormal'
)
ORDER BY Birthday DESC
LIMIT 3;",0,thrombosis_prediction,best_pred_metadata
1241,1269,"SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SC170 IN ('negative','0') AND T2.Date > 1997-01-01","
SELECT p.ID
FROM Patient p
JOIN Examination e ON p.ID = e.ID
WHERE e.ExaminationDate > '1997-01-01'
AND e.aCL_IgA IS NULL;

The query assumes that a normal anti-scl70 is represented by a NULL value in the aCL_IgA column. If the database uses a different representation for normal anti-scl70, the query may need to be adjusted accordingly.",0,thrombosis_prediction,best_pred_metadata
1242,1270,SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE (T2.SC170 = '-' OR T2.SC170 = '+-') AND T1.SEX = 'M' AND T3.Symptoms = 'vertigo',"
SELECT COUNT(*)
FROM Patient
WHERE SEX = 'Male'
AND ID IN (
    SELECT ID
    FROM Examination
    WHERE Symptoms LIKE '%vertigo%'
    AND ID IN (
        SELECT ID
        FROM Laboratory
        WHERE SC170 = 'Normal'
    )
);",1,thrombosis_prediction,best_pred_metadata
1243,1271,"SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SSA IN ('negative', '0') AND STRFTIME('%Y', T2.Date) < '1990'","
SELECT COUNT(DISTINCT p.ID)
FROM Patient p
JOIN Laboratory l ON p.ID = l.ID
WHERE l.SSA = 'normal' AND p.First_Date < '1990-01-01';",0,thrombosis_prediction,best_pred_metadata
1244,1272,"SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.`First Date` IS NOT NULL AND T2.SSA NOT IN ('negative', '0') ORDER BY T1.`First Date` ASC LIMIT 1","
SELECT p.ID
FROM Patient p
JOIN Examination e ON p.ID = e.ID
WHERE e.`ANA Pattern` LIKE '%SSA%'
ORDER BY p.`First Date`
LIMIT 1;",0,thrombosis_prediction,best_pred_metadata
1245,1273,SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SSB = 'negative' OR '0' AND T1.Diagnosis = 'SLE',"
SELECT COUNT(*)
FROM Examination
WHERE `aCL IgA` IS NULL AND Diagnosis = 'SLE';",0,thrombosis_prediction,best_pred_metadata
1246,1274,SELECT COUNT(DISTINCT T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SSB = 'negative' OR '0' AND T1.Symptoms IS NOT NULL,"
SELECT COUNT(DISTINCT e.ID)
FROM Examination e
JOIN Laboratory l ON e.ID = l.ID
WHERE l.SSB IS NULL OR l.SSB = 'Normal'
AND e.Symptoms IS NOT NULL;",0,thrombosis_prediction,best_pred_metadata
1247,1275,"SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CENTROMEA IN ('negative', '0') AND T2.SSB IN ('negative', '0') AND T1.SEX = 'M'","
SELECT COUNT(*)
FROM Patient
WHERE ID IN (
    SELECT ID
    FROM Examination
    WHERE `aCL IgA` IS NULL OR `aCL IgA` = 0
)
AND ID IN (
    SELECT ID
    FROM Laboratory
    WHERE SSB IS NULL OR SSB = 'Normal'
)
AND SEX = 'Male';",0,thrombosis_prediction,best_pred_metadata
1248,1276,SELECT DISTINCT(T1.Diagnosis) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.DNA >= 8,"
SELECT Examination.Diagnosis
FROM Examination
JOIN Laboratory ON Examination.ID = Laboratory.ID
WHERE Laboratory.DNA IS NOT NULL;",0,thrombosis_prediction,best_pred_metadata
1249,1277,SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.DNA < 8 AND T1.Description IS NULL,"
SELECT COUNT(*)
FROM Patient
WHERE ID NOT IN (
    SELECT ID
    FROM Laboratory
    WHERE DNA IS NULL
)
AND ID IN (
    SELECT ID
    FROM Examination
    WHERE aCL_IgG IS NULL AND aCL_IgM IS NULL AND aCL_IgA IS NULL
)",0,thrombosis_prediction,best_pred_metadata
1250,1278,SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`DNA-II` >= 8 AND T1.Admission = '+',"
SELECT COUNT(*)
FROM Patient
WHERE ID IN (
    SELECT ID
    FROM Laboratory
    WHERE `DNA-II` IS NOT NULL
);",1,thrombosis_prediction,best_pred_metadata
1251,1279,SELECT COUNT(CASE WHEN T1.Diagnosis LIKE '%SLE%' THEN T1.ID ELSE 0 END) / COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`GOT` >= 60,"
SELECT
    (COUNT(DISTINCT p.ID) * 100.0 / (SELECT COUNT(DISTINCT ID) FROM Patient)) AS Percentage
FROM
    Patient p
JOIN
    Examination e ON p.ID = e.ID
JOIN
    Laboratory l ON p.ID = l.ID AND l.Date = e.`Examination Date`
WHERE
    l.GOT > (SELECT AVG(GOT) + 2 * STDDEV(GOT) FROM Laboratory)
    AND p.Diagnosis LIKE '%SLE%';",0,thrombosis_prediction,best_pred_metadata
1252,1280,SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GOT < 60 AND T1.SEX = 'M',"
SELECT COUNT(*)
FROM Patient
JOIN Laboratory ON Patient.ID = Laboratory.ID
WHERE Patient.SEX = 'Male' AND Laboratory.GOT BETWEEN 10 AND 40;",0,thrombosis_prediction,best_pred_metadata
1253,1281,SELECT T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GOT >= 60 ORDER BY T1.Birthday DESC LIMIT 1,"
SELECT MIN(Birthday)
FROM Patient
WHERE ID IN (
    SELECT ID
    FROM Laboratory
    WHERE GOT > (SELECT AVG(GOT) + 2 * STDDEV(GOT) FROM Laboratory)
    OR GOT < (SELECT AVG(GOT) - 2 * STDDEV(GOT) FROM Laboratory)
);",0,thrombosis_prediction,best_pred_metadata
1254,1282,SELECT T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GPT < 60 ORDER BY T2.GPT DESC LIMIT 3,"
SELECT Patient.Birthday
FROM Patient
JOIN Laboratory ON Patient.ID = Laboratory.ID
WHERE Laboratory.GPT BETWEEN 10 AND 40
ORDER BY Laboratory.GPT DESC
LIMIT 3;",0,thrombosis_prediction,best_pred_metadata
1255,1283,SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GOT < 60 AND T1.SEX = 'M',"
SELECT COUNT(*)
FROM Patient
WHERE SEX = 'Male'
AND ID IN (
    SELECT ID
    FROM Laboratory
    WHERE GPT IS NULL OR GPT = 0
)",0,thrombosis_prediction,best_pred_metadata
1256,1284,SELECT T1.`First Date` FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.LDH < 500 ORDER BY T2.LDH DESC LIMIT 1,"
SELECT MIN(Date)
FROM Laboratory
WHERE ID = (
    SELECT ID
    FROM Laboratory
    WHERE LDH = (
        SELECT MAX(LDH)
        FROM Laboratory
        WHERE LDH <= 248
    )
)",0,thrombosis_prediction,best_pred_metadata
1257,1285,SELECT T1.`First Date` FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.LDH >= 500 ORDER BY T1.`First Date` DESC LIMIT 1,"
SELECT MAX(Date)
FROM Laboratory
WHERE LDH IS NOT NULL AND ID IN (
    SELECT ID
    FROM Examination
    WHERE LDH IS NOT NULL
);",0,thrombosis_prediction,best_pred_metadata
1258,1286,SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.ALP >= 300 AND T1.Admission = '+',"
SELECT COUNT(*)
FROM Patient
WHERE ID IN (
    SELECT ID
    FROM Laboratory
    WHERE ALP IS NOT NULL AND ALP NOT BETWEEN 44 AND 145
)
AND Admission = 'Yes';",0,thrombosis_prediction,best_pred_metadata
1259,1287,SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.ALP < 300 AND T1.Admission = '-',"
SELECT COUNT(*)
FROM Patient
WHERE ID IN (
    SELECT ID
    FROM Examination
    WHERE ID IN (
        SELECT ID
        FROM Laboratory
        WHERE ALP BETWEEN 44 AND 145
    )
);",0,thrombosis_prediction,best_pred_metadata
1260,1288,SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TP < 6.0,"
SELECT p.Diagnosis
FROM Patient p
JOIN Laboratory l ON p.ID = l.ID
WHERE l.TP < (SELECT AVG(TP) FROM Laboratory)

This query joins the Patient and Laboratory tables on the ID column, filters the rows where the total protein (TP) is lower than the average total protein in the Laboratory table, and then selects the diagnosis of those patients.",0,thrombosis_prediction,best_pred_metadata
1261,1289,SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SJS' AND T2.TP > 6.0 AND T2.TP < 8.5,"
SELECT COUNT(*)
FROM Patient
JOIN Examination ON Patient.ID = Examination.ID
JOIN Laboratory ON Patient.ID = Laboratory.ID
WHERE Examination.Diagnosis = 'SJS' AND Laboratory.TP = 'Normal'",0,thrombosis_prediction,best_pred_metadata
1262,1290,SELECT Date FROM Laboratory WHERE ALB BETWEEN 3.5 AND 5.5 ORDER BY ALB DESC LIMIT 1,"
SELECT Examination.""Examination Date""
FROM Examination
JOIN Laboratory ON Examination.ID = Laboratory.ID
WHERE Laboratory.ALB = (SELECT MAX(ALB) FROM Laboratory WHERE ALB <= 5.0)
LIMIT 1;",0,thrombosis_prediction,best_pred_metadata
1263,1291,SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.ALB BETWEEN 3.5 AND 5.5 AND T2.TP BETWEEN 6.0 AND 8.5,"
SELECT COUNT(*)
FROM Patient
JOIN Laboratory ON Patient.ID = Laboratory.ID
WHERE Patient.SEX = 'Male'
AND Laboratory.ALB IS NOT NULL
AND Laboratory.TP IS NOT NULL;",0,thrombosis_prediction,best_pred_metadata
1264,1292,"SELECT T3.`aCL IgG`, T3.`aCL IgM`, T3.`aCL IgA` FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE T1.SEX = 'F' AND T2.UA > 6.5 ORDER BY T2.UA DESC LIMIT 1","
SELECT e.`aCL IgG`, e.`aCL IgM`, e.`aCL IgA`
FROM Examination e
JOIN Patient p ON e.ID = p.ID
JOIN Laboratory l ON e.ID = l.ID
WHERE p.SEX = 'female'
AND l.UA BETWEEN 3.4 AND 7.0
ORDER BY l.UA DESC
LIMIT 1;",0,thrombosis_prediction,best_pred_metadata
1265,1293,SELECT T2.ANA FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 ON T1.ID = T3.ID WHERE T3.CRE < 1.5 ORDER BY T2.ANA DESC LIMIT 1,"
SELECT MAX(ANA) AS Highest_ANA_Concentration
FROM Examination
WHERE ID IN (
    SELECT ID
    FROM Laboratory
    WHERE CRE = (SELECT MIN(CRE) FROM Laboratory)
);",0,thrombosis_prediction,best_pred_metadata
1266,1294,SELECT T2.ID FROM Laboratory AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.CRE < 1.5 ORDER BY T2.`aCL IgA` DESC LIMIT 1,"
SELECT p.ID
FROM Patient p
JOIN Examination e ON p.ID = e.ID
JOIN Laboratory l ON p.ID = l.ID
WHERE l.CRE BETWEEN 0.6 AND 1.2
ORDER BY (e.`aCL IgG` + e.`aCL IgM` + e.`aCL IgA`) DESC
LIMIT 1;",0,thrombosis_prediction,best_pred_metadata
1267,1295,SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.`T-BIL` >= 2 AND T3.`ANA Pattern` LIKE '%P%',"
SELECT COUNT(*)
FROM Examination
WHERE ID IN (
    SELECT ID
    FROM Laboratory
    WHERE `T-BIL` > [normal range]
)
AND `ANA Pattern` = 'peripheral';",0,thrombosis_prediction,best_pred_metadata
1268,1296,SELECT T3.ANA FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.`T-BIL` < 2.0 ORDER BY T2.`T-BIL` DESC LIMIT 1,"
SELECT ANA
FROM Examination
WHERE `T-BIL` = (SELECT MAX(`T-BIL`) FROM Laboratory WHERE `T-BIL` <= 1.2)
AND ID = (SELECT ID FROM Laboratory WHERE `T-BIL` = (SELECT MAX(`T-BIL`) FROM Laboratory WHERE `T-BIL` <= 1.2))",0,thrombosis_prediction,best_pred_metadata
1269,1297,SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.`T-CHO` >= 250 AND T3.KCT = '-',"
SELECT COUNT(*)
FROM Examination
JOIN Patient ON Examination.ID = Patient.ID
JOIN Laboratory ON Examination.ID = Laboratory.ID
WHERE Laboratory.T-CHO > (SELECT AVG(T-CHO) FROM Laboratory)
AND Laboratory.PT IS NULL OR Laboratory.PT < 0;",0,thrombosis_prediction,best_pred_metadata
1270,1298,SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T3.`ANA Pattern` = 'P' AND T2.`T-CHO` < 250,"
SELECT COUNT(*)
FROM Examination
WHERE ID IN (
    SELECT ID
    FROM Laboratory
    WHERE `T-CHO` BETWEEN 125 AND 200
)
AND `ANA Pattern` = 'P';",0,thrombosis_prediction,best_pred_metadata
1271,1299,SELECT COUNT(T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TG < 200 AND T1.Symptoms IS NOT NULL,"
SELECT COUNT(DISTINCT p.ID)
FROM Patient p
JOIN Examination e ON p.ID = e.ID
JOIN Laboratory l ON p.ID = l.ID AND l.Date = e.Examination_Date
WHERE l.TG IS NULL OR l.TG = 0
AND e.Symptoms IS NOT NULL;",0,thrombosis_prediction,best_pred_metadata
1272,1300,SELECT T1.Diagnosis FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TG < 200 ORDER BY T2.TG DESC LIMIT 1,"
SELECT Patient.Diagnosis
FROM Patient
JOIN Examination ON Patient.ID = Examination.ID
JOIN Laboratory ON Patient.ID = Laboratory.ID
WHERE Laboratory.TG = (SELECT MAX(TG) FROM Laboratory WHERE TG <= 150)
LIMIT 1;",1,thrombosis_prediction,best_pred_metadata
1273,1301,SELECT DISTINCT T1.ID FROM Laboratory AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Thrombosis = 0 AND T1.CPK < 250,"
SELECT ID
FROM Examination
WHERE Thrombosis = 0
AND ID IN (
    SELECT ID
    FROM Laboratory
    WHERE CPK > (SELECT AVG(CPK) + 3 * STDDEV(CPK) FROM Laboratory)
    OR CPK < (SELECT AVG(CPK) - 3 * STDDEV(CPK) FROM Laboratory)
)",0,thrombosis_prediction,best_pred_metadata
1274,1302,SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.CPK < 250 AND (T3.KCT = '+' OR T3.RVVT = '+' OR T3.LAC = '+'),"
SELECT COUNT(*)
FROM Patient
JOIN Laboratory ON Patient.ID = Laboratory.ID
WHERE Laboratory.CPK BETWEEN 20 AND 120
AND (Laboratory.PT IS NOT NULL OR Laboratory.FG IS NOT NULL OR Laboratory.TAT IS NOT NULL);",0,thrombosis_prediction,best_pred_metadata
1275,1303,SELECT T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GLU > 180 ORDER BY T1.Birthday ASC LIMIT 1,"
SELECT Birthday
FROM Patient
WHERE ID IN (
    SELECT ID
    FROM Laboratory
    WHERE GLU <> 70 AND GLU IS NOT NULL
)
ORDER BY Birthday ASC
LIMIT 1;",0,thrombosis_prediction,best_pred_metadata
1276,1304,SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.GLU < 180 AND T3.Thrombosis = 0,"
SELECT COUNT(*)
FROM Patient
JOIN Examination ON Patient.ID = Examination.ID
JOIN Laboratory ON Patient.ID = Laboratory.ID
WHERE Laboratory.GLU IS NULL AND Examination.Thrombosis = 0;",0,thrombosis_prediction,best_pred_metadata
1277,1305,SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.WBC BETWEEN 3.5 AND 9 AND T1.Admission = '+',"
SELECT COUNT(*)
FROM Patient
WHERE Admission = 'Accepted'
AND ID IN (
    SELECT ID
    FROM Laboratory
    WHERE WBC BETWEEN 4500 AND 11000
);",0,thrombosis_prediction,best_pred_metadata
1278,1306,SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SLE' AND T2.WBC BETWEEN 3.5 AND 9,"
SELECT COUNT(*)
FROM Patient
WHERE Diagnosis = 'SLE'
AND ID IN (
    SELECT ID
    FROM Laboratory
    WHERE WBC BETWEEN 4500 AND 11000
);",0,thrombosis_prediction,best_pred_metadata
1279,1307,SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE (T2.RBC <= 3.5 OR T2.RBC >= 6) AND T1.Admission = '-',"
SELECT p.ID
FROM Patient p
JOIN Laboratory l ON p.ID = l.ID
WHERE l.RBC < (SELECT AVG(RBC) - 2*STDDEV(RBC) FROM Laboratory)
OR l.RBC > (SELECT AVG(RBC) + 2*STDDEV(RBC) FROM Laboratory)
AND p.Admission = 'Outpatient'",0,thrombosis_prediction,best_pred_metadata
1280,1308,SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.PLT BETWEEN 100 AND 400 AND T1.Diagnosis IS NOT NULL,"
SELECT COUNT(*)
FROM Examination
WHERE ID IN (
    SELECT ID
    FROM Laboratory
    WHERE PLT BETWEEN 150000 AND 450000
)
AND Symptoms IS NOT NULL;",0,thrombosis_prediction,best_pred_metadata
1281,1309,SELECT T2.PLT FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'MCTD' AND T2.PLT BETWEEN 100 AND 400,"
SELECT Laboratory.PLT
FROM Laboratory
JOIN Patient ON Laboratory.ID = Patient.ID
JOIN Examination ON Laboratory.ID = Examination.ID
WHERE Patient.Diagnosis = 'MCTD'
AND Laboratory.PLT BETWEEN 150000 AND 450000;",0,thrombosis_prediction,best_pred_metadata
1282,1310,SELECT AVG(T2.PT) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.PT < 14 AND T1.SEX = 'M',"
SELECT AVG(PT)
FROM Patient
JOIN Laboratory ON Patient.ID = Laboratory.ID
WHERE Patient.SEX = 'Male' AND Laboratory.PT IS NOT NULL;",0,thrombosis_prediction,best_pred_metadata
1283,1311,SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.PT < 14 AND T3.Thrombosis < 3 AND T3.Thrombosis > 0,"
SELECT COUNT(*)
FROM Patient
JOIN Examination ON Patient.ID = Examination.ID
JOIN Laboratory ON Patient.ID = Laboratory.ID
WHERE Examination.Thrombosis = 'severe' AND Laboratory.PT = 'normal';",0,thrombosis_prediction,best_pred_metadata
1284,1312,SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Angela' AND T1.last_name = 'Sanders',"
SELECT major.major_name
FROM member
JOIN major ON member.link_to_major = major.major_id
WHERE member.first_name = 'Angela' AND member.last_name = 'Sanders';",1,student_club,best_pred_metadata
1285,1313,SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.college = 'College of Engineering',"
SELECT COUNT(*)
FROM member
JOIN major ON member.link_to_major = major.major_id
WHERE major.college = 'College of Engineering';",1,student_club,best_pred_metadata
1286,1314,"SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.department = 'Art and Design Department'","
SELECT m.first_name, m.last_name
FROM member m
JOIN major ma ON m.link_to_major = ma.major_id
WHERE ma.department = 'Art and Design'
AND m.position = 'Student_Club';",0,student_club,best_pred_metadata
1287,1315,SELECT COUNT(T1.event_id) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'Women''s Soccer',"
SELECT COUNT(*)
FROM attendance
JOIN event ON attendance.link_to_event = event.event_id
JOIN member ON attendance.link_to_member = member.member_id
WHERE event.event_name = 'Women''s Soccer' AND member.position = 'Student' AND member.link_to_major = 'Student_Club';",0,student_club,best_pred_metadata
1288,1316,SELECT T3.phone FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.event_name = 'Women''s Soccer',"
SELECT m.phone
FROM member m
JOIN attendance a ON m.member_id = a.link_to_member
JOIN event e ON a.link_to_event = e.event_id
WHERE e.event_name = 'Women\'s Soccer' AND m.position = 'Student';",0,student_club,best_pred_metadata
1289,1317,SELECT COUNT(T1.event_id) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.event_name = 'Women''s Soccer' AND T3.t_shirt_size = 'Medium',"
SELECT COUNT(*)
FROM member
JOIN attendance ON member.member_id = attendance.link_to_member
JOIN event ON attendance.link_to_event = event.event_id
WHERE event.event_name = 'Women''s Soccer'
AND member.t_shirt_size = 'Medium'
AND member.link_to_major = (SELECT major_id FROM major WHERE major_name = 'Student_Club');",0,student_club,best_pred_metadata
1290,1318,SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event GROUP BY T1.event_name ORDER BY COUNT(T2.link_to_event) DESC LIMIT 1,"
SELECT e.event_name
FROM event e
JOIN attendance a ON e.event_id = a.link_to_event
JOIN member m ON a.link_to_member = m.member_id
JOIN major ma ON m.link_to_major = ma.major_id
WHERE ma.major_name = 'Student_Club'
GROUP BY e.event_name
ORDER BY COUNT(a.link_to_member) DESC
LIMIT 1;",0,student_club,best_pred_metadata
1291,1319,SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position LIKE 'vice president',"
SELECT college
FROM member
JOIN major ON member.link_to_major = major.major_id
WHERE position = 'vice president' AND member_id = 'Student_Club';",0,student_club,best_pred_metadata
1292,1320,SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T3.first_name = 'Maya' AND T3.last_name = 'Mclean',"
SELECT event.event_name
FROM event
JOIN attendance ON event.event_id = attendance.link_to_event
JOIN member ON attendance.link_to_member = member.member_id
WHERE member.first_name = 'Maya' AND member.last_name = 'Mclean';",1,student_club,best_pred_metadata
1293,1321,"SELECT COUNT(T1.event_id) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T3.first_name = 'Sacha' AND T3.last_name = 'Harrison' AND SUBSTR(T1.event_date, 1, 4) = '2019'","
SELECT COUNT(*)
FROM attendance
JOIN event ON attendance.link_to_event = event.event_id
JOIN member ON attendance.link_to_member = member.member_id
WHERE member.first_name = 'Sacha' AND member.last_name = 'Harrison'
AND event.type = 'Student_Club' AND strftime('%Y', event.event_date) = '2019';",0,student_club,best_pred_metadata
1294,1322,SELECT COUNT(T1.event_id) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE T1.type = 'Meeting' GROUP BY T1.type HAVING COUNT(T2.link_to_event) > 10,"
SELECT COUNT(*)
FROM event
WHERE event_id IN (
    SELECT link_to_event
    FROM attendance
    WHERE link_to_member IN (
        SELECT member_id
        FROM member
        WHERE link_to_major = (
            SELECT major_id
            FROM major
            WHERE major_name = 'Student_Club'
        )
    )
    GROUP BY link_to_event
    HAVING COUNT(link_to_member) > 10
)
AND type = 'meeting';",0,student_club,best_pred_metadata
1295,1323,SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event GROUP BY T1.event_id HAVING COUNT(T2.link_to_event) > 20,"
SELECT e.event_name
FROM event e
JOIN attendance a ON e.event_id = a.link_to_event
WHERE e.type = 'Student_Club'
GROUP BY e.event_name
HAVING COUNT(a.link_to_member) > 20;",0,student_club,best_pred_metadata
1296,1324,"SELECT CAST(COUNT(T2.link_to_event) AS REAL) / COUNT(DISTINCT T2.link_to_event) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE SUBSTR(T1.event_date, 1, 4) = '2020' AND T1.type = 'Meeting'","
SELECT AVG(COUNT(link_to_member)) AS average_attendance
FROM attendance
JOIN event ON attendance.link_to_event = event.event_id
WHERE event.type = 'meeting' AND strftime('%Y', event.event_date) = '2020';",0,student_club,best_pred_metadata
1297,1325,SELECT expense_description FROM expense ORDER BY cost DESC LIMIT 1,"
SELECT MAX(cost) AS most_expensive_item
FROM expense
WHERE link_to_budget IN (
    SELECT budget_id
    FROM budget
    WHERE link_to_event IN (
        SELECT event_id
        FROM event
    )
);",0,student_club,best_pred_metadata
1298,1326,SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Environmental Engineering',"
SELECT COUNT(*)
FROM member
JOIN major ON member.link_to_major = major.major_id
WHERE major.major_name = 'Environmental Engineering'
AND member.member_id IN (
    SELECT link_to_member
    FROM attendance
    WHERE link_to_event IN (
        SELECT event_id
        FROM event
        WHERE event_name = 'Student_Club'
    )
)",0,student_club,best_pred_metadata
1299,1327,"SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = 'Laugh Out Loud'","
SELECT member.first_name, member.last_name
FROM member
JOIN attendance ON member.member_id = attendance.link_to_member
JOIN event ON attendance.link_to_event = event.event_id
WHERE event.event_name = 'Laugh Out Loud' AND member.position = 'Student_Club';",0,student_club,best_pred_metadata
1300,1328,SELECT T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Law and Constitutional Studies',"
SELECT last_name
FROM member
WHERE link_to_major IN (
    SELECT major_id
    FROM major
    WHERE major_name = 'Law and Constitutional Studies'
);",1,student_club,best_pred_metadata
1301,1329,SELECT T2.county FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Sherri' AND T1.last_name = 'Ramsey',"
SELECT z.county
FROM member m
JOIN zip_code z ON m.zip = z.zip_code
WHERE m.first_name = 'Sherri' AND m.last_name = 'Ramsey';",1,student_club,best_pred_metadata
1302,1330,SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Tyler' AND T1.last_name = 'Hewitt',"
SELECT college
FROM major
JOIN member ON major.major_id = member.link_to_major
WHERE member.first_name = 'Tyler' AND member.last_name = 'Hewitt';",1,student_club,best_pred_metadata
1303,1331,SELECT T2.amount FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Vice President',"
SELECT SUM(amount)
FROM income
WHERE link_to_member IN (
    SELECT member_id
    FROM member
    WHERE position = 'Vice President'
);",1,student_club,best_pred_metadata
1304,1332,"SELECT T2.spent FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'September Meeting' AND T2.category = 'Food' AND SUBSTR(T1.event_date, 6, 2) = '09'","
SELECT SUM(e.cost) AS total_spent_on_food
FROM expense e
JOIN budget b ON e.link_to_budget = b.budget_id
JOIN event ev ON b.link_to_event = ev.event_id
JOIN attendance a ON ev.event_id = a.link_to_event
JOIN member m ON a.link_to_member = m.member_id
WHERE b.category = 'food'
AND ev.event_name = 'September Meeting'
AND m.position = 'Student_Club'

This SQL query calculates the total amount spent on food for the Student_Club members during the September Meeting. It joins the expense, budget, event, attendance, and member tables using appropriate foreign keys. The WHERE clause filters the results to include only expenses in the food category, events named 'September Meeting', and members with the position 'Student_Club'. The SUM function is used to calculate the total amount spent on food.",0,student_club,best_pred_metadata
1305,1333,"SELECT T2.city, T2.state FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.position = 'President'","
SELECT z.city, z.state
FROM member m
JOIN zip_code z ON m.zip = z.zip_code
WHERE m.position = 'President' AND m.link_to_major = (SELECT major_id FROM major WHERE major_name = 'Student_Club');",0,student_club,best_pred_metadata
1306,1334,"SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.state = 'Illinois'","
SELECT member.first_name, member.last_name
FROM member
JOIN zip_code ON member.zip = zip_code.zip_code
WHERE zip_code.state = 'Illinois';",1,student_club,best_pred_metadata
1307,1335,"SELECT T2.spent FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'September Meeting' AND T2.category = 'Advertisement' AND SUBSTR(T1.event_date, 6, 2) = '09'","
SELECT SUM(e.cost) AS total_spent
FROM expense e
JOIN budget b ON e.link_to_budget = b.budget_id
JOIN event ev ON b.link_to_event = ev.event_id
JOIN attendance a ON ev.event_id = a.link_to_event
JOIN member m ON a.link_to_member = m.member_id
WHERE m.position = 'Student_Club' AND ev.event_name = 'September Meeting' AND b.category = 'advertisement';",0,student_club,best_pred_metadata
1308,1336,SELECT T2.department FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.last_name = 'Pierce' OR T1.last_name = 'Guidi',"
SELECT major.department
FROM member
JOIN major ON member.link_to_major = major.major_id
WHERE member.first_name IN ('Pierce', 'Guidi');",0,student_club,best_pred_metadata
1309,1337,SELECT SUM(T2.amount) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'October Speaker',"
SELECT SUM(amount) AS total_budgeted_amount
FROM budget
WHERE link_to_event = (SELECT event_id FROM event WHERE event_name = 'October Speaker');",1,student_club,best_pred_metadata
1310,1338,SELECT T3.approved FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'October Meeting' AND T1.event_date LIKE '2019-10-08%',"
SELECT expense.approved
FROM expense
JOIN budget ON expense.link_to_budget = budget.budget_id
JOIN event ON budget.link_to_event = event.event_id
WHERE event.event_name = 'October Meeting' AND event.event_date = '2019-10-08';",0,student_club,best_pred_metadata
1311,1339,"SELECT AVG(T2.cost) FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.last_name = 'Allen' AND T1.first_name = 'Elijah' AND (SUBSTR(T2.expense_date, 6, 2) = '09' OR SUBSTR(T2.expense_date, 6, 2) = '10')","
SELECT AVG(e.cost) AS average_cost
FROM expense e
JOIN member m ON e.link_to_member = m.member_id
JOIN budget b ON e.link_to_budget = b.budget_id
JOIN event ev ON b.link_to_event = ev.event_id
WHERE m.first_name = 'Elijah' AND m.last_name = 'Allen'
AND strftime('%m', ev.event_date) IN ('09', '10');",1,student_club,best_pred_metadata
1312,1341,SELECT location FROM event WHERE event_name = 'Spring Budget Review',"
SELECT location FROM event WHERE event_name = 'Spring Budget Review';",1,student_club,best_pred_metadata
1313,1342,SELECT cost FROM expense WHERE expense_description = 'Posters' AND expense_date = '2019-09-04',"
SELECT cost
FROM expense
WHERE expense_description = 'Posters' AND expense_date = '2019/9/4';",0,student_club,best_pred_metadata
1314,1343,SELECT remaining FROM budget WHERE category = 'Food' AND amount = ( SELECT MAX(amount) FROM budget WHERE category = 'Food' ),"
SELECT remaining
FROM budget
WHERE category = 'Food'
ORDER BY amount DESC
LIMIT 1;",1,student_club,best_pred_metadata
1315,1344,SELECT notes FROM income WHERE source = 'Fundraising' AND date_received = '2019-09-14',"
SELECT notes
FROM event
WHERE event_date = '2019/9/14' AND type = 'fundraising';",0,student_club,best_pred_metadata
1316,1345,SELECT COUNT(major_name) FROM major WHERE college = 'College of Humanities and Social Sciences',"
SELECT COUNT(major_id)
FROM major
WHERE college = 'College of Humanities and Social Sciences';",1,student_club,best_pred_metadata
1317,1346,SELECT phone FROM member WHERE first_name = 'Carlo' AND last_name = 'Jacobs',"
SELECT phone FROM member WHERE first_name = 'Carlo' AND last_name = 'Jacobs';",1,student_club,best_pred_metadata
1318,1347,SELECT T2.county FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Adela' AND T1.last_name = 'O''Gallagher',"
SELECT z.county
FROM member m
JOIN zip_code z ON m.zip = z.zip_code
WHERE m.first_name = 'Adela' AND m.last_name = 'O''Gallagher';",1,student_club,best_pred_metadata
1319,1348,SELECT COUNT(T2.event_id) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'November Meeting' AND T1.remaining < 0,"
SELECT COUNT(*)
FROM budget
WHERE spent > amount
AND link_to_event IN (
    SELECT event_id
    FROM event
    WHERE event_name = 'November Meeting'
);",1,student_club,best_pred_metadata
1320,1349,SELECT SUM(T1.amount) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'September Speaker',"
SELECT SUM(amount) AS total_budget_amount
FROM budget
JOIN event ON budget.link_to_event = event.event_id
WHERE event.event_name = 'September Speaker';",1,student_club,best_pred_metadata
1321,1350,"SELECT T1.event_status FROM budget AS T1 INNER JOIN expense AS T2 ON T1.budget_id = T2.link_to_budget WHERE T2.expense_description = 'Post Cards, Posters' AND T2.expense_date = '2019-08-20'","
SELECT e.status
FROM event e
JOIN budget b ON e.event_id = b.link_to_event
JOIN expense ex ON b.budget_id = ex.link_to_budget
WHERE ex.expense_description = 'Post Cards, Posters' AND ex.expense_date = '2019/8/20';",0,student_club,best_pred_metadata
1322,1351,SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Brent' AND T1.last_name = 'Thomason',"
SELECT major.major_name
FROM member
JOIN major ON member.link_to_major = major.major_id
WHERE member.first_name = 'Brent' AND member.last_name = 'Thomason';",1,student_club,best_pred_metadata
1323,1352,SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Human Development AND Family Studies' AND T1.t_shirt_size = 'Large',"
SELECT COUNT(*)
FROM member
WHERE link_to_major = (SELECT major_id FROM major WHERE major_name = 'Human Development and Family Studies')
AND t_shirt_size = 'large';",1,student_club,best_pred_metadata
1324,1353,SELECT T2.type FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Christof' AND T1.last_name = 'Nielson',"
SELECT z.type
FROM member m
JOIN zip_code z ON m.zip = z.zip_code
WHERE m.first_name = 'Christof' AND m.last_name = 'Nielson';",1,student_club,best_pred_metadata
1325,1354,SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'Vice President',"
SELECT major.major_name
FROM member
JOIN major ON member.link_to_major = major.major_id
WHERE member.position = 'Vice President';",1,student_club,best_pred_metadata
1326,1355,SELECT T2.state FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Sacha' AND T1.last_name = 'Harrison',"
SELECT z.state
FROM member m
JOIN zip_code z ON m.zip = z.zip_code
WHERE m.first_name = 'Sacha' AND m.last_name = 'Harrison';",1,student_club,best_pred_metadata
1327,1356,SELECT T2.department FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'President',"
SELECT m.department
FROM member AS m
JOIN major AS ma ON m.link_to_major = ma.major_id
WHERE m.position = 'President';",0,student_club,best_pred_metadata
1328,1357,SELECT T2.date_received FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Connor' AND T1.last_name = 'Hilton' AND T2.source = 'Dues',"
SELECT i.date_received
FROM income i
JOIN member m ON i.link_to_member = m.member_id
WHERE m.first_name = 'Connor' AND m.last_name = 'Hilton' AND i.source = 'dues';",0,student_club,best_pred_metadata
1329,1358,"SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T2.source = 'Dues' ORDER BY T2.date_received LIMIT 1","
SELECT m.first_name, m.last_name
FROM member m
JOIN income i ON m.member_id = i.link_to_member
ORDER BY i.date_received ASC
LIMIT 1;",1,student_club,best_pred_metadata
1330,1359,SELECT CAST(SUM(CASE WHEN T2.event_name = 'Yearly Kickoff' THEN T1.amount ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.event_name = 'October Meeting' THEN T1.amount ELSE 0 END) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Advertisement' AND T2.type = 'Meeting',"
SELECT COUNT(*)
FROM budget
WHERE category = 'Advertisement'
AND link_to_event = (SELECT event_id FROM event WHERE event_name = 'Yearly Kickoff')
AND remaining > (SELECT remaining FROM budget WHERE category = 'Advertisement' AND link_to_event = (SELECT event_id FROM event WHERE event_name = 'October Meeting'));",0,student_club,best_pred_metadata
1331,1360,SELECT CAST(SUM(CASE WHEN T1.category = 'Parking' THEN T1.amount ELSE 0 END) AS REAL) * 100 / SUM(T1.amount) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'November Speaker',"
SELECT
    (SUM(CASE WHEN category = 'Parking' THEN spent ELSE 0 END) / SUM(spent)) * 100 AS percentage_budget_parking
FROM
    budget
WHERE
    link_to_event IN (SELECT event_id FROM event WHERE event_name = 'November Speaker');",0,student_club,best_pred_metadata
1332,1361,SELECT SUM(cost) FROM expense WHERE expense_description = 'Pizza',"
SELECT SUM(cost) AS total_pizza_cost
FROM expense
WHERE expense_description = 'pizzas';",0,student_club,best_pred_metadata
1333,1362,SELECT COUNT(city) FROM zip_code WHERE county = 'Orange County' AND state = 'Virginia',"
SELECT COUNT(DISTINCT city)
FROM zip_code
WHERE county = 'Orange County' AND state = 'Virginia';",1,student_club,best_pred_metadata
1334,1363,SELECT department FROM major WHERE college = 'College of Humanities and Social Sciences',"
SELECT DISTINCT department
FROM major
WHERE college = 'College of Humanities and Social Sciences';",0,student_club,best_pred_metadata
1335,1364,"SELECT T2.city, T2.county, T2.state FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Amy' AND T1.last_name = 'Firth'","
SELECT z.city
FROM member m
JOIN zip_code z ON m.zip = z.zip_code
WHERE m.first_name = 'Amy' AND m.last_name = 'Firth';",0,student_club,best_pred_metadata
1336,1365,SELECT T2.expense_description FROM budget AS T1 INNER JOIN expense AS T2 ON T1.budget_id = T2.link_to_budget ORDER BY T1.remaining LIMIT 1,"
SELECT expense.expense_id, expense.expense_description, expense.cost
FROM expense
JOIN budget ON expense.link_to_budget = budget.budget_id
WHERE budget.remaining = (SELECT MIN(remaining) FROM budget);",0,student_club,best_pred_metadata
1337,1366,SELECT DISTINCT T3.member_id FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.event_name = 'October Meeting',"
SELECT member.*
FROM member
JOIN attendance ON member.member_id = attendance.link_to_member
JOIN event ON attendance.link_to_event = event.event_id
WHERE event.event_name = 'October Meeting';",0,student_club,best_pred_metadata
1338,1367,SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id GROUP BY T2.major_id ORDER BY COUNT(T2.college) DESC LIMIT 1,"
SELECT college, COUNT(*) as member_count
FROM member
JOIN major ON member.link_to_major = major.major_id
GROUP BY college
ORDER BY member_count DESC
LIMIT 1;",0,student_club,best_pred_metadata
1339,1368,SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.phone = '809-555-3360',"
SELECT major.major_name
FROM member
JOIN major ON member.link_to_major = major.major_id
WHERE member.phone = '809-555-3360';",1,student_club,best_pred_metadata
1340,1369,SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id ORDER BY T1.amount DESC LIMIT 1,"
SELECT event_id, MAX(amount) AS highest_budget
FROM budget
GROUP BY event_id
ORDER BY highest_budget DESC
LIMIT 1;",0,student_club,best_pred_metadata
1341,1370,"SELECT T2.expense_id, T2.expense_description FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Vice President'","
SELECT e.expense_id, e.expense_description, e.expense_date, e.cost, e.approved
FROM expense e
JOIN member m ON e.link_to_member = m.member_id
WHERE m.position = 'vice president';",0,student_club,best_pred_metadata
1342,1372,SELECT T2.date_received FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Casey' AND T1.last_name = 'Mason',"
SELECT date_received
FROM income
WHERE link_to_member = (SELECT member_id FROM member WHERE first_name = 'Casey' AND last_name = 'Mason');",1,student_club,best_pred_metadata
1343,1373,SELECT COUNT(T2.member_id) FROM zip_code AS T1 INNER JOIN member AS T2 ON T1.zip_code = T2.zip WHERE T1.state = 'Maryland',"
SELECT COUNT(*)
FROM member
JOIN zip_code ON member.zip = zip_code.zip_code
WHERE zip_code.state = 'Maryland';",1,student_club,best_pred_metadata
1344,1374,SELECT COUNT(T2.link_to_event) FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member WHERE T1.phone = '954-555-6240',"
SELECT COUNT(*)
FROM attendance
WHERE link_to_member = (SELECT member_id FROM member WHERE phone = '954-555-6240');",1,student_club,best_pred_metadata
1345,1375,"SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.department = 'School of Applied Sciences, Technology and Education'","
SELECT m.member_id, m.first_name, m.last_name, m.email, m.position, m.t_shirt_size, m.phone, m.zip
FROM member m
JOIN major ma ON m.link_to_major = ma.major_id
WHERE ma.department = 'School of Applied Sciences, Technology and Education';",0,student_club,best_pred_metadata
1346,1376,SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.status = 'Closed' ORDER BY T1.spent / T1.amount DESC LIMIT 1,"
SELECT e.event_id, e.event_name, MAX((SUM(ex.cost) / SUM(b.amount)) * 100) AS spend_to_budget_ratio
FROM event e
JOIN budget b ON e.event_id = b.link_to_event
JOIN expense ex ON b.budget_id = ex.link_to_budget
WHERE e.status = 'closed'
GROUP BY e.event_id, e.event_name
ORDER BY spend_to_budget_ratio DESC
LIMIT 1;",0,student_club,best_pred_metadata
1347,1377,SELECT COUNT(member_id) FROM member WHERE position = 'President',"
SELECT COUNT(*)
FROM member
WHERE position = 'president';",0,student_club,best_pred_metadata
1348,1378,SELECT MAX(spent) FROM budget,"
SELECT MAX(spent) AS highest_budget_spend
FROM budget;",1,student_club,best_pred_metadata
1349,1379,"SELECT COUNT(event_id) FROM event WHERE type = 'Meeting' AND SUBSTR(event_date, 1, 4) = '2020'","
SELECT COUNT(*)
FROM event
WHERE type = 'meeting' AND strftime('%Y', event_date) = '2020';",0,student_club,best_pred_metadata
1350,1380,SELECT SUM(spent) FROM budget WHERE category = 'Food',"
SELECT SUM(cost) AS total_spent_on_food
FROM expense
WHERE expense_description = 'food';",0,student_club,best_pred_metadata
1351,1381,"SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member GROUP BY T2.link_to_member HAVING COUNT(T2.link_to_event) > 7","
SELECT m.first_name, m.last_name
FROM member m
JOIN attendance a ON m.member_id = a.link_to_member
GROUP BY m.member_id
HAVING COUNT(a.link_to_event) > 7;",1,student_club,best_pred_metadata
1352,1382,"SELECT T2.first_name, T2.last_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member INNER JOIN event AS T4 ON T3.link_to_event = T4.event_id WHERE T4.event_name = 'Community Theater' AND T1.major_name = 'Interior Design'","
SELECT m.first_name, m.last_name
FROM member m
JOIN attendance a ON m.member_id = a.link_to_member
JOIN event e ON a.link_to_event = e.event_id
JOIN major ma ON m.link_to_major = ma.major_id
WHERE ma.major_name = 'interior design' AND e.event_name = 'Community Theater';",0,student_club,best_pred_metadata
1353,1383,"SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.city = 'Georgetown' AND T2.state = 'South Carolina'","
SELECT m.first_name, m.last_name
FROM member m
JOIN zip_code z ON m.zip = z.zip_code
WHERE z.city = 'Georgetown' AND z.state = 'South Carolina';",1,student_club,best_pred_metadata
1354,1384,SELECT T2.amount FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Grant' AND T1.last_name = 'Gilmour',"
SELECT COUNT(*)
FROM income
JOIN member ON income.link_to_member = member.member_id
WHERE member.first_name = 'Grant' AND member.last_name = 'Gilmour';",0,student_club,best_pred_metadata
1355,1385,"SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T2.amount > 40","
SELECT m.first_name, m.last_name
FROM member m
JOIN income i ON m.member_id = i.link_to_member
WHERE i.amount > 40;",1,student_club,best_pred_metadata
1356,1386,SELECT SUM(T3.cost) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'Yearly Kickoff',"
SELECT SUM(cost) AS total_expense
FROM expense
JOIN budget ON expense.link_to_budget = budget.budget_id
JOIN event ON budget.link_to_event = event.event_id
WHERE event.event_name = 'Yearly Kickoff';",1,student_club,best_pred_metadata
1357,1387,"SELECT T4.first_name, T4.last_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget INNER JOIN member AS T4 ON T3.link_to_member = T4.member_id WHERE T1.event_name = 'Yearly Kickoff'","
SELECT m.first_name, m.last_name
FROM member m
JOIN budget b ON m.member_id = b.link_to_member
JOIN event e ON b.link_to_event = e.event_id
WHERE e.event_name = 'Yearly Kickoff';",0,student_club,best_pred_metadata
1358,1388,"SELECT T1.first_name, T1.last_name, T2.source FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member GROUP BY T1.first_name, T1.last_name, T2.source ORDER BY SUM(T2.amount) DESC LIMIT 1","
SELECT m.first_name, m.last_name, i.source, SUM(i.amount) AS total_income
FROM member m
JOIN income i ON m.member_id = i.link_to_member
GROUP BY m.member_id
ORDER BY total_income DESC
LIMIT 1;",0,student_club,best_pred_metadata
1359,1389,SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget ORDER BY T3.cost LIMIT 1,"
SELECT event.event_id, event.event_name, SUM(expense.cost) AS total_cost
FROM event
JOIN budget ON event.event_id = budget.link_to_event
JOIN expense ON budget.budget_id = expense.link_to_budget
GROUP BY event.event_id, event.event_name
ORDER BY total_cost ASC
LIMIT 1;",0,student_club,best_pred_metadata
1360,1390,SELECT CAST(SUM(CASE WHEN T1.event_name = 'Yearly Kickoff' THEN T3.cost ELSE 0 END) AS REAL) * 100 / SUM(T3.cost) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget,"
SELECT
    (SUM(e.cost) FILTER (WHERE ev.event_name = 'Yearly Kickoff')) / SUM(e.cost) * 100 AS percentage_of_cost
FROM
    expense e
JOIN
    budget b ON e.link_to_budget = b.budget_id
JOIN
    event ev ON b.link_to_event = ev.event_id;",1,student_club,best_pred_metadata
1361,1391,SELECT SUM(CASE WHEN major_name = 'Finance' THEN 1 ELSE 0 END) / SUM(CASE WHEN major_name = 'Physics' THEN 1 ELSE 0 END) AS ratio FROM major,"
SELECT
    (SELECT COUNT(*) FROM member WHERE link_to_major IN (SELECT major_id FROM major WHERE major_name = 'Finance')) AS finance_students,
    (SELECT COUNT(*) FROM member WHERE link_to_major IN (SELECT major_id FROM major WHERE major_name = 'Physics')) AS physics_students,
    CAST((SELECT COUNT(*) FROM member WHERE link_to_major IN (SELECT major_id FROM major WHERE major_name = 'Finance')) AS FLOAT) /
    CAST((SELECT COUNT(*) FROM member WHERE link_to_major IN (SELECT major_id FROM major WHERE major_name = 'Physics')) AS FLOAT) AS ratio
FROM
    member;",0,student_club,best_pred_metadata
1362,1392,SELECT source FROM income WHERE date_received BETWEEN '2019-09-01' and '2019-09-30' ORDER BY source DESC LIMIT 1,"
SELECT source, SUM(amount) as total_amount
FROM income
WHERE strftime('%Y-%m', date_received) = '2019-09'
GROUP BY source
ORDER BY total_amount DESC
LIMIT 1;",0,student_club,best_pred_metadata
1363,1393,"SELECT first_name, last_name, email FROM member WHERE position = 'Secretary'","
SELECT m.first_name, m.last_name, m.email
FROM member m
WHERE m.position = 'Secretary';",1,student_club,best_pred_metadata
1364,1394,SELECT COUNT(T2.member_id) FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T1.major_name = 'Physics Teaching',"
SELECT COUNT(*)
FROM member
WHERE link_to_major IN (
    SELECT major_id
    FROM major
    WHERE major_name = 'Physics Teaching'
);",1,student_club,best_pred_metadata
1365,1395,"SELECT COUNT(T2.link_to_member) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'Community Theater' AND SUBSTR(T1.event_date, 1, 4) = '2019'","
SELECT COUNT(*)
FROM attendance
JOIN event ON attendance.link_to_event = event.event_id
WHERE event.event_name = 'Community Theater' AND event.event_date LIKE '2019%';",1,student_club,best_pred_metadata
1366,1397,SELECT SUM(spent) / COUNT(spent) FROM budget WHERE category = 'Food' AND event_status = 'Closed',"
SELECT AVG(cost)
FROM expense
JOIN budget ON expense.link_to_budget = budget.budget_id
WHERE budget.category = 'food' AND budget.event_status = 'past';",0,student_club,best_pred_metadata
1367,1398,SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Advertisement' ORDER BY T1.spent DESC LIMIT 1,"
SELECT e.event_name
FROM event e
JOIN budget b ON e.event_id = b.link_to_event
WHERE b.category = 'advertisement'
ORDER BY b.spent DESC
LIMIT 1;",0,student_club,best_pred_metadata
1368,1400,"SELECT CAST(SUM(CASE WHEN type = 'Community Service' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(type) FROM event WHERE SUBSTR(event_date, 1, 4) = '2019'","
SELECT
    (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM event WHERE strftime('%Y', event_date) = '2019')) AS percentage_share
FROM
    event
WHERE
    type = 'Community Service'
    AND strftime('%Y', event_date) = '2019';",1,student_club,best_pred_metadata
1369,1401,SELECT T3.cost FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'September Speaker' AND T3.expense_description = 'Posters',"
SELECT cost
FROM expense
WHERE link_to_budget IN (
    SELECT budget_id
    FROM budget
    WHERE category = 'Posters'
    AND link_to_event IN (
        SELECT event_id
        FROM event
        WHERE event_name = 'September Speaker'
    )
);",0,student_club,best_pred_metadata
1370,1402,SELECT t_shirt_size FROM member GROUP BY t_shirt_size ORDER BY COUNT(t_shirt_size) DESC LIMIT 1,"
SELECT t_shirt_size, COUNT(*) as num_orders
FROM member
GROUP BY t_shirt_size
ORDER BY num_orders DESC
LIMIT 1;",0,student_club,best_pred_metadata
1371,1403,SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T2.event_id = T1.link_to_event WHERE T1.event_status = 'Closed' AND T1.remaining < 0 ORDER BY T1.remaining LIMIT 1,"
SELECT e.event_name
FROM event e
JOIN budget b ON e.event_id = b.link_to_event
JOIN expense ex ON b.budget_id = ex.link_to_budget
WHERE e.status = 'closed'
GROUP BY e.event_name
ORDER BY (SUM(ex.cost) - b.amount) DESC
LIMIT 1;",0,student_club,best_pred_metadata
1372,1404,"SELECT T1.type, SUM(T3.cost) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'October Meeting'","
SELECT expense.expense_description, SUM(expense.cost) AS total_value
FROM expense
JOIN budget ON expense.link_to_budget = budget.budget_id
JOIN event ON budget.link_to_event = event.event_id
WHERE event.event_name = 'October Meeting' AND expense.approved = 'Yes'
GROUP BY expense.expense_description;",0,student_club,best_pred_metadata
1373,1405,"SELECT SUM(T2.amount), T2.category FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'April Speaker' ORDER BY T2.amount","
SELECT category, amount
FROM budget
WHERE link_to_event = (SELECT event_id FROM event WHERE event_name = 'April Speaker')
ORDER BY amount ASC;",0,student_club,best_pred_metadata
1374,1406,SELECT budget_id FROM budget WHERE category = 'Food' AND amount = ( SELECT MAX(amount) FROM budget ),"
SELECT budget_id, amount
FROM budget
WHERE category = 'Food'
ORDER BY amount DESC
LIMIT 1;",0,student_club,best_pred_metadata
1375,1407,SELECT budget_id FROM budget WHERE category = 'Advertisement' ORDER BY amount DESC LIMIT 3,"
SELECT budget_id, amount
FROM budget
WHERE category = 'Advertising'
ORDER BY amount DESC
LIMIT 3;",0,student_club,best_pred_metadata
1376,1408,SELECT SUM(cost) FROM expense WHERE expense_description = 'Parking',"
SELECT SUM(cost) AS total_cost_spent
FROM expense
WHERE expense_description = 'Parking';",1,student_club,best_pred_metadata
1377,1409,SELECT SUM(cost) FROM expense WHERE expense_date = '2019-08-20',"
SELECT SUM(cost) AS total_expense
FROM expense
WHERE expense_date = '8/20/2019';",0,student_club,best_pred_metadata
1378,1410,"SELECT T1.first_name, T1.last_name, SUM(T2.cost) FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.member_id = 'rec4BLdZHS2Blfp4v'","
SELECT m.first_name || ' ' || m.last_name AS full_name, SUM(e.cost) AS total_cost
FROM member m
JOIN expense e ON m.member_id = e.link_to_member
WHERE m.member_id = 'rec4BLdZHS2Blfp4v'
GROUP BY m.member_id;",0,student_club,best_pred_metadata
1379,1411,SELECT T2.expense_description FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Sacha' AND T1.last_name = 'Harrison',"
SELECT expense_description
FROM expense
JOIN member ON expense.link_to_member = member.member_id
WHERE member.first_name = 'Sacha' AND member.last_name = 'Harrison';",1,student_club,best_pred_metadata
1380,1412,SELECT T2.expense_description FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.t_shirt_size = 'X-Large',"
SELECT expense.expense_description
FROM expense
JOIN member ON expense.link_to_member = member.member_id
WHERE member.t_shirt_size = 'X-Large';",1,student_club,best_pred_metadata
1381,1413,SELECT T1.zip FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T2.cost < 50,"
SELECT zip
FROM member
WHERE member_id IN (
    SELECT link_to_member
    FROM expense
    WHERE cost < 50
);",0,student_club,best_pred_metadata
1382,1414,SELECT T1.major_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.first_name = 'Phillip' AND T2.last_name = 'Cullen',"
SELECT major.major_name
FROM member
JOIN major ON member.link_to_major = major.major_id
WHERE member.first_name = 'Phillip' AND member.last_name = 'Cullen';",1,student_club,best_pred_metadata
1383,1415,SELECT T2.position FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T1.major_name = 'Business',"
SELECT m.position
FROM member m
JOIN major ma ON m.link_to_major = ma.major_id
WHERE ma.major_name = 'Business';",1,student_club,best_pred_metadata
1384,1416,SELECT COUNT(T2.member_id) FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T1.major_name = 'Business' AND T2.t_shirt_size = 'Medium',"
SELECT COUNT(*)
FROM member
JOIN major ON member.link_to_major = major.major_id
WHERE major.major_name = 'Business' AND member.t_shirt_size = 'Medium';",1,student_club,best_pred_metadata
1385,1417,SELECT T1.type FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.remaining > 30,"
SELECT e.type
FROM event e
JOIN budget b ON e.event_id = b.link_to_event
WHERE b.remaining > 30;",1,student_club,best_pred_metadata
1386,1418,SELECT T2.category FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.location = 'MU 215',"
SELECT type
FROM event
WHERE location = 'MU 215';",0,student_club,best_pred_metadata
1387,1419,SELECT T2.category FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_date = '2020-03-24T12:00:00',"
SELECT type
FROM event
WHERE event_date = '2020-03-24T12:00:00';",0,student_club,best_pred_metadata
1388,1420,SELECT T1.major_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.position = 'Vice President',"
SELECT major.major_name
FROM member
JOIN major ON member.link_to_major = major.major_id
WHERE member.position = 'Vice President';",1,student_club,best_pred_metadata
1389,1421,SELECT CAST(SUM(CASE WHEN T2.major_name = 'Mathematics' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.position = 'Member',"
SELECT
    (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM member)) AS percentage_of_mathematics_majors
FROM
    member
WHERE
    link_to_major IN (SELECT major_id FROM major WHERE major_name = 'Mathematics');",1,student_club,best_pred_metadata
1390,1422,SELECT T2.category FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.location = 'MU 215',"
SELECT type
FROM event
WHERE location = 'MU 215';",0,student_club,best_pred_metadata
1391,1423,SELECT COUNT(income_id) FROM income WHERE amount = 50,"
SELECT COUNT(*)
FROM income
WHERE amount = 50;",1,student_club,best_pred_metadata
1392,1424,SELECT COUNT(member_id) FROM member WHERE position = 'Member' AND t_shirt_size = 'X-Large',"
SELECT COUNT(*)
FROM member
WHERE t_shirt_size = 'Extra Large';",0,student_club,best_pred_metadata
1393,1425,"SELECT COUNT(major_id) FROM major WHERE department = 'School of Applied Sciences, Technology AND Education' AND college = 'College of Agriculture AND Applied Sciences'","
SELECT COUNT(*)
FROM major
WHERE college = 'College of Agriculture and Applied Sciences'
AND department = 'School of Applied Sciences, Technology and Education';",0,student_club,best_pred_metadata
1394,1426,"SELECT T2.last_name, T1.department, T1.college FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.position = 'Member' AND T1.major_name = 'Environmental Engineering'","
SELECT m.last_name, maj.department, maj.college
FROM member m
JOIN major maj ON m.link_to_major = maj.major_id
WHERE maj.major_name = 'environmental engineering';",0,student_club,best_pred_metadata
1395,1427,"SELECT DISTINCT T2.category, T1.type FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.location = 'MU 215' AND T2.spent = 0 AND T1.type = 'Guest Speaker'","
SELECT budget.category
FROM budget
JOIN event ON budget.link_to_event = event.event_id
WHERE event.location = 'MU 215'
AND event.type = 'guest speaker'
AND budget.spent = 0;",0,student_club,best_pred_metadata
1396,1428,"SELECT city, state FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major INNER JOIN zip_code AS T3 ON T3.zip_code = T1.zip WHERE department = 'Electrical and Computer Engineering Department' AND position = 'Member'","
SELECT z.city, z.state
FROM member m
JOIN major ma ON m.link_to_major = ma.major_id
JOIN zip_code z ON m.zip = z.zip_code
WHERE ma.department = 'electrical and computer engineering';",0,student_club,best_pred_metadata
1397,1429,SELECT T2.event_name FROM attendance AS T1 INNER JOIN event AS T2 ON T2.event_id = T1.link_to_event INNER JOIN member AS T3 ON T1.link_to_member = T3.member_id WHERE T3.position = 'Vice President' AND T2.location = '900 E. Washington St.' AND T2.type = 'Social',"
SELECT e.event_name
FROM event e
JOIN attendance a ON e.event_id = a.link_to_event
JOIN member m ON a.link_to_member = m.member_id
JOIN zip_code z ON m.zip = z.zip_code
WHERE m.position = 'vice president'
AND z.city = 'Chicago'
AND z.state = 'IL'
AND z.street = '900 E. Washington St.'
AND e.type = 'social';",0,student_club,best_pred_metadata
1398,1430,"SELECT T1.last_name, T1.position FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T2.expense_date = '2019-09-10' AND T2.expense_description = 'Pizza'","
SELECT m.last_name, m.position
FROM member m
JOIN income i ON m.member_id = i.link_to_member
JOIN expense e ON i.income_id = e.link_to_budget
WHERE e.expense_description = 'pizza' AND e.expense_date = '09/10/2019';",0,student_club,best_pred_metadata
1399,1431,SELECT T3.last_name FROM attendance AS T1 INNER JOIN event AS T2 ON T2.event_id = T1.link_to_event INNER JOIN member AS T3 ON T1.link_to_member = T3.member_id WHERE T2.event_name = 'Women''s Soccer' AND T3.position = 'Member',"
SELECT m.last_name
FROM member m
JOIN attendance a ON m.member_id = a.link_to_member
JOIN event e ON a.link_to_event = e.event_id
WHERE e.event_name = 'women\'s soccer event';",0,student_club,best_pred_metadata
1400,1432,SELECT CAST(SUM(CASE WHEN T2.amount = 50 THEN 1.0 ELSE 0 END) AS REAL) * 100 / COUNT(T2.income_id) FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Member' AND T1.t_shirt_size = 'Medium',"
SELECT
    (COUNT(DISTINCT i.link_to_member) * 100.0 /
    (SELECT COUNT(DISTINCT m.member_id)
     FROM member m
     WHERE m.t_shirt_size = 'medium')) AS percentage_of_amount_50
FROM
    income i
JOIN
    member m ON i.link_to_member = m.member_id
WHERE
    m.t_shirt_size = 'medium'
    AND i.amount = 50
    AND i.source = 'Student_Club';",0,student_club,best_pred_metadata
1401,1433,SELECT DISTINCT county FROM zip_code WHERE type = 'PO Box' AND county IS NOT NULL,"
SELECT county
FROM zip_code
WHERE type = 'PO Box';",0,student_club,best_pred_metadata
1402,1434,SELECT zip_code FROM zip_code WHERE type = 'PO Box' AND county = 'San Juan Municipio' AND state = 'Puerto Rico',"
SELECT zip_code
FROM zip_code
WHERE type = 'PO Box' AND county = 'San Juan Municipio' AND state = 'Puerto Rico';",1,student_club,best_pred_metadata
1403,1435,"SELECT DISTINCT event_name FROM event WHERE type = 'Game' AND date(SUBSTR(event_date, 1, 10)) BETWEEN '2019-03-15' AND '2020-03-20' AND status = 'Closed'","
SELECT event_name
FROM event
WHERE type = 'game'
AND status = 'closed'
AND event_date BETWEEN '2019-03-15' AND '2020-03-20';",0,student_club,best_pred_metadata
1404,1436,SELECT DISTINCT T3.link_to_event FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member WHERE T1.cost > 50,"
SELECT e.event_id
FROM event e
JOIN attendance a ON e.event_id = a.link_to_event
JOIN member m ON a.link_to_member = m.member_id
JOIN income i ON m.member_id = i.link_to_member
WHERE i.amount > 50;",0,student_club,best_pred_metadata
1405,1437,"SELECT DISTINCT T1.link_to_member, T3.link_to_event FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member WHERE date(SUBSTR(T1.expense_date, 1, 10)) BETWEEN '2019-01-10' AND '2019-11-19' AND T1.approved = 'true'","
SELECT m.member_id, m.first_name, m.last_name, a.link_to_event
FROM member m
JOIN attendance a ON m.member_id = a.link_to_member
JOIN expense e ON m.member_id = e.link_to_member
WHERE e.approved = 'Yes' AND e.expense_date BETWEEN '2019-01-10' AND '2019-11-19';",0,student_club,best_pred_metadata
1406,1438,SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.link_to_major = 'rec1N0upiVLy5esTO' AND T1.first_name = 'Katy',"
SELECT m.college
FROM member m
JOIN major ma ON m.link_to_major = ma.major_id
WHERE m.first_name = 'Katy' AND m.link_to_major = 'rec1N0upiVLy5esTO';",0,student_club,best_pred_metadata
1407,1439,SELECT T1.phone FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T2.major_name = 'Business' AND T2.college = 'College of Agriculture and Applied Sciences',"
SELECT m.phone
FROM member m
JOIN major ma ON m.link_to_major = ma.major_id
WHERE ma.major_name = 'Business' AND ma.college = 'College of Agriculture and Applied Sciences';",1,student_club,best_pred_metadata
1408,1440,"SELECT DISTINCT T1.email FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE date(SUBSTR(T2.expense_date, 1, 10)) BETWEEN '2019-09-10' AND '2019-11-19' AND T2.cost > 20","
SELECT m.email
FROM member m
JOIN income i ON m.member_id = i.link_to_member
WHERE i.amount > 20 AND i.date_received BETWEEN '2019-09-10' AND '2019-11-19';",0,student_club,best_pred_metadata
1409,1441,SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.position = 'Member' AND T2.major_name LIKE '%Education%' AND T2.college = 'College of Education & Human Services',"
SELECT COUNT(*)
FROM member
JOIN major ON member.link_to_major = major.major_id
WHERE major.major_name = 'Education' AND major.college = 'College of Education & Human Services';",0,student_club,best_pred_metadata
1410,1442,SELECT CAST(SUM(CASE WHEN remaining < 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(budget_id) FROM budget,"
SELECT
    (COUNT(DISTINCT e.event_id) * 100.0 / (SELECT COUNT(DISTINCT event_id) FROM event)) AS percentage_over_budget
FROM
    event e
JOIN
    budget b ON e.event_id = b.link_to_event
WHERE
    b.spent > b.amount;",0,student_club,best_pred_metadata
1411,1443,"SELECT event_id, location, status FROM event WHERE date(SUBSTR(event_date, 1, 10)) BETWEEN '2019-11-01' AND '2020-03-31'","
SELECT event_id, location, status
FROM event
WHERE event_date BETWEEN '2019-11-01' AND '2020-03-31';",1,student_club,best_pred_metadata
1412,1444,SELECT expense_description FROM expense GROUP BY expense_description HAVING AVG(cost) > 50,"
SELECT expense_id, expense_description, cost
FROM expense
GROUP BY expense_id, expense_description, cost
HAVING AVG(cost) > 50;",0,student_club,best_pred_metadata
1413,1445,"SELECT first_name, last_name FROM member WHERE t_shirt_size = 'X-Large'","
SELECT first_name, last_name
FROM member
WHERE t_shirt_size = 'extra large';",0,student_club,best_pred_metadata
1414,1446,SELECT CAST(SUM(CASE WHEN type = 'PO box' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(zip_code) FROM zip_code,"
SELECT
    (COUNT(*) FILTER (WHERE type = 'PO Box')) * 100.0 / COUNT(*) AS percentage_po_boxes
FROM
    zip_code;",0,student_club,best_pred_metadata
1415,1447,"SELECT DISTINCT T1.event_name, T1.location FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.remaining > 0","
SELECT e.event_name, e.location
FROM event e
JOIN budget b ON e.event_id = b.link_to_event
WHERE b.spent < b.amount;",0,student_club,best_pred_metadata
1416,1448,"SELECT T1.event_name, T1.event_date FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T3.expense_description = 'Pizza' AND T3.cost > 50 AND T3.cost < 100","
SELECT e.event_name, e.event_date
FROM event e
JOIN attendance a ON e.event_id = a.link_to_event
JOIN budget b ON e.event_id = b.link_to_event
JOIN expense ex ON b.budget_id = ex.link_to_budget
WHERE ex.expense_description LIKE '%pizza%'
AND ex.cost > 50
AND ex.cost < 100;",0,student_club,best_pred_metadata
1417,1449,"SELECT DISTINCT T1.first_name, T1.last_name, T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major INNER JOIN expense AS T3 ON T1.member_id = T3.link_to_member WHERE T3.cost > 100","
SELECT m.first_name, m.last_name, maj.major_name
FROM member m
JOIN expense e ON m.member_id = e.link_to_member
JOIN major maj ON m.link_to_major = maj.major_id
WHERE e.cost > 100;",0,student_club,best_pred_metadata
1418,1450,"SELECT DISTINCT T3.city, T3.county FROM income AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN zip_code AS T3 ON T3.zip_code = T2.zip WHERE T1.amount > 40","
SELECT z.city, z.county
FROM event e
JOIN income i ON e.event_id = i.link_to_event
JOIN member m ON i.link_to_member = m.member_id
JOIN zip_code z ON m.zip = z.zip_code
GROUP BY e.event_id, z.city, z.county
HAVING COUNT(i.income_id) > 40;",0,student_club,best_pred_metadata
1419,1451,SELECT T2.member_id FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN budget AS T3 ON T1.link_to_budget = T3.budget_id INNER JOIN event AS T4 ON T3.link_to_event = T4.event_id GROUP BY T2.member_id HAVING COUNT(DISTINCT T4.event_id) > 1 ORDER BY SUM(T1.cost) DESC LIMIT 1,"
SELECT m.first_name, m.last_name, SUM(e.cost) AS total_expenses
FROM member m
JOIN expense e ON m.member_id = e.link_to_member
GROUP BY m.member_id
HAVING COUNT(DISTINCT e.link_to_event) > 1
ORDER BY total_expenses DESC
LIMIT 1;",0,student_club,best_pred_metadata
1420,1452,SELECT AVG(T1.cost) FROM expense AS T1 INNER JOIN member as T2 ON T1.link_to_member = T2.member_id WHERE T2.position != 'Member',"
SELECT AVG(amount)
FROM income
WHERE source <> 'Member'

This query calculates the average amount paid by students who are not in a member position. It selects the average amount from the income table where the source of income is not 'Member'.",0,student_club,best_pred_metadata
1421,1453,SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T2.category = 'Parking' AND T3.cost < (SELECT AVG(cost) FROM expense),"
SELECT e.event_name
FROM event e
JOIN budget b ON e.event_id = b.link_to_event
JOIN expense ex ON b.budget_id = ex.link_to_budget
WHERE ex.category = 'Parking' AND ex.cost < (SELECT AVG(cost) FROM expense WHERE category = 'Parking')",0,student_club,best_pred_metadata
1422,1454,SELECT SUM(CASE WHEN T1.type = 'Game' THEN T3.cost ELSE 0 END) * 100 / SUM(T3.cost) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget,"
SELECT
    SUM(e.cost) / SUM(b.amount) * 100 AS percentage_of_cost
FROM
    expense e
JOIN
    budget b ON e.link_to_budget = b.budget_id
JOIN
    event ev ON b.link_to_event = ev.event_id
WHERE
    ev.type = 'game';",0,student_club,best_pred_metadata
1423,1455,"SELECT T2.budget_id FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id WHERE T1.expense_description = 'Water, chips, cookies' ORDER BY T1.cost DESC LIMIT 1","
SELECT budget_id, amount
FROM budget
WHERE category IN ('water', 'chips', 'cookies')
ORDER BY amount DESC
LIMIT 1;",0,student_club,best_pred_metadata
1424,1456,"SELECT T3.first_name, T3.last_name FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN member AS T3 ON T1.link_to_member = T3.member_id ORDER BY T2.spent DESC LIMIT 5","
SELECT m.first_name || ' ' || m.last_name AS full_name, SUM(e.cost) AS total_spending
FROM member m
JOIN expense e ON m.member_id = e.link_to_member
GROUP BY m.member_id
ORDER BY total_spending DESC
LIMIT 5;",0,student_club,best_pred_metadata
1425,1457,"SELECT DISTINCT T3.first_name, T3.last_name, T3.phone FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN member AS T3 ON T3.member_id = T1.link_to_member WHERE T1.cost > ( SELECT AVG(T1.cost) FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN member AS T3 ON T3.member_id = T1.link_to_member )","
SELECT m.first_name, m.last_name, m.phone
FROM member m
JOIN expense e ON m.member_id = e.link_to_member
GROUP BY m.member_id
HAVING AVG(e.cost) > (SELECT AVG(cost) FROM expense);",0,student_club,best_pred_metadata
1426,1458,SELECT CAST((SUM(CASE WHEN T2.state = 'Maine' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.state = 'Vermont' THEN 1 ELSE 0 END)) AS REAL) * 100 / COUNT(T1.member_id) AS diff FROM member AS T1 INNER JOIN zip_code AS T2 ON T2.zip_code = T1.zip,"
SELECT
    (CAST(COUNT(DISTINCT m.member_id) AS FLOAT) / (SELECT COUNT(DISTINCT member_id) FROM member)) * 100 AS percentage
FROM
    member m
    JOIN zip_code z ON m.zip = z.zip_code
WHERE
    z.state = 'Maine'

UNION ALL

SELECT
    (CAST(COUNT(DISTINCT m.member_id) AS FLOAT) / (SELECT COUNT(DISTINCT member_id) FROM member)) * 100 AS percentage
FROM
    member m
    JOIN zip_code z ON m.zip = z.zip_code
WHERE
    z.state = 'Vermont';

-- To calculate the difference in percentage, subtract the percentage of members in Maine from the percentage of members in Vermont.
-- The result will be the difference in the percentage of members in Maine and Vermont.",0,student_club,best_pred_metadata
1427,1459,"SELECT T2.major_name, T2.department FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.first_name = 'Garrett' AND T1.last_name = 'Gerke'","
SELECT major.major_name, major.department
FROM member
JOIN major ON member.link_to_major = major.major_id
WHERE member.first_name = 'Garrett' AND member.last_name = 'Gerke';",1,student_club,best_pred_metadata
1428,1460,"SELECT T2.first_name, T2.last_name, T1.cost FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T1.expense_description = 'Water, Veggie tray, supplies'","
SELECT m.first_name || ' ' || m.last_name AS full_name, e.cost
FROM member m
JOIN expense e ON m.member_id = e.link_to_member
WHERE e.expense_description IN ('water', 'veggie tray', 'supplies');",0,student_club,best_pred_metadata
1429,1461,"SELECT T1.last_name, T1.phone FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T2.major_name = 'Elementary Education'","
SELECT last_name, phone
FROM member
WHERE link_to_major = (SELECT major_id FROM major WHERE major_name = 'Elementary Education');",1,student_club,best_pred_metadata
1430,1462,"SELECT T2.category, T2.amount FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'January Speaker'","
SELECT category, amount
FROM budget
WHERE link_to_event = (SELECT event_id FROM event WHERE event_name = 'January Speaker');",1,student_club,best_pred_metadata
1431,1463,SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.category = 'Food',"
SELECT event.event_name
FROM event
JOIN budget ON event.event_id = budget.link_to_event
WHERE budget.category = 'food';",0,student_club,best_pred_metadata
1432,1464,"SELECT DISTINCT T3.first_name, T3.last_name, T4.amount FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T3.member_id = T2.link_to_member INNER JOIN income AS T4 ON T4.link_to_member = T3.member_id WHERE T4.date_received = '2019-09-09'","
SELECT m.first_name, m.last_name, i.amount
FROM member m
JOIN income i ON m.member_id = i.link_to_member
WHERE i.date_received = '9/9/2019';",0,student_club,best_pred_metadata
1433,1465,SELECT DISTINCT T2.category FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id WHERE T1.expense_description = 'Posters',"
SELECT budget.category
FROM expense
JOIN budget ON expense.link_to_budget = budget.budget_id
WHERE expense.expense_description = 'Posters';",0,student_club,best_pred_metadata
1434,1466,"SELECT T1.first_name, T1.last_name, college FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.position = 'Secretary'","
SELECT m.first_name, m.last_name, maj.college
FROM member m
JOIN major maj ON m.link_to_major = maj.major_id
WHERE m.position = 'Secretary';",1,student_club,best_pred_metadata
1435,1467,"SELECT SUM(T1.spent), T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Speaker Gifts'","
SELECT e.event_name, SUM(ex.cost) AS total_spent
FROM expense ex
JOIN budget b ON ex.link_to_budget = b.budget_id
JOIN event e ON b.link_to_event = e.event_id
WHERE b.category = 'speaker gifts'
GROUP BY e.event_name;",0,student_club,best_pred_metadata
1436,1468,SELECT T2.city FROM member AS T1 INNER JOIN zip_code AS T2 ON T2.zip_code = T1.zip WHERE T1.first_name = 'Garrett' AND T1.last_name = 'Gerke',"
SELECT z.city
FROM member m
JOIN zip_code z ON m.zip = z.zip_code
WHERE m.first_name = 'Garrett' AND m.last_name = 'Girke';",0,student_club,best_pred_metadata
1437,1469,"SELECT T1.first_name, T1.last_name, T1.position FROM member AS T1 INNER JOIN zip_code AS T2 ON T2.zip_code = T1.zip WHERE T2.city = 'Lincolnton' AND T2.state = 'North Carolina' AND T2.zip_code = 28092","
SELECT m.first_name, m.last_name, m.position
FROM member m
JOIN zip_code z ON m.zip = z.zip_code
WHERE z.city = 'Lincolnton' AND z.state = 'North Carolina' AND z.zip_code = 28092;",1,student_club,best_pred_metadata
1438,1470,SELECT COUNT(GasStationID) FROM gasstations WHERE Country = 'CZE' AND Segment = 'Premium',"
SELECT COUNT(*)
FROM gasstations
WHERE Country = 'CZE' AND Segment = 'Premium';",1,debit_card_specializing,best_pred_metadata
1439,1472,SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM' AND T2.date BETWEEN 201201 AND 201212 GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) ASC LIMIT 1,"
SELECT CustomerID, MIN(Consumption) AS MinConsumption
FROM yearmonth
WHERE strftime('%Y', Date) = '2012'
AND CustomerID IN (
    SELECT CustomerID
    FROM customers
    WHERE Segment = 'LAM'
)
GROUP BY CustomerID
ORDER BY MinConsumption ASC
LIMIT 1;",0,debit_card_specializing,best_pred_metadata
1440,1473,"SELECT AVG(T2.Consumption) / 12 FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE SUBSTRING(T2.Date, 1, 4) = '2013' AND T1.Segment = 'SME'","
SELECT AVG(Consumption)
FROM yearmonth
JOIN customers ON yearmonth.CustomerID = customers.CustomerID
WHERE customers.Segment = 'SME' AND strftime('%Y', yearmonth.Date) = '2013';",0,debit_card_specializing,best_pred_metadata
1441,1474,SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'CZK' AND T2.Date BETWEEN 201101 AND 201112 GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) DESC LIMIT 1,"
SELECT c.CustomerID, SUM(t.Amount) as TotalConsumption
FROM customers c
JOIN transactions_1k t ON c.CustomerID = t.CustomerID
WHERE c.Currency = 'CZK' AND strftime('%Y', t.Date) = '2011'
GROUP BY c.CustomerID
ORDER BY TotalConsumption DESC;",0,debit_card_specializing,best_pred_metadata
1442,1475,"SELECT COUNT(*) FROM ( SELECT T2.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'KAM' AND SUBSTRING(T2.Date, 1, 4) = '2012' GROUP BY T2.CustomerID HAVING SUM(T2.Consumption) < 30000 ) AS t1","
SELECT COUNT(DISTINCT c.CustomerID)
FROM customers c
JOIN yearmonth ym ON c.CustomerID = ym.CustomerID
WHERE c.Segment = 'KAM' AND ym.Date LIKE '2012%' AND ym.Consumption < 30000;",0,debit_card_specializing,best_pred_metadata
1443,1476,"SELECT SUM(IIF(T1.Currency = 'CZK', T2.Consumption, 0)) - SUM(IIF(T1.Currency = 'EUR', T2.Consumption, 0)) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE SUBSTRING(T2.Date, 1, 4) = '2012'","
SELECT
    SUM(CASE WHEN c.Currency = 'CZK' THEN ym.Consumption ELSE 0 END) -
    SUM(CASE WHEN c.Currency = 'EUR' THEN ym.Consumption ELSE 0 END) AS ConsumptionDifference
FROM
    yearmonth ym
JOIN
    customers c ON ym.CustomerID = c.CustomerID
WHERE
    ym.Date LIKE '2012%';",1,debit_card_specializing,best_pred_metadata
1444,1477,"SELECT SUBSTRING(T2.Date, 1, 4) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'EUR' GROUP BY SUBSTRING(T2.Date, 1, 4) ORDER BY SUM(T2.Consumption) DESC LIMIT 1","
SELECT strftime('%Y', t.Date) AS Year, SUM(t.Amount * t.Price) AS TotalGasUse
FROM transactions_1k AS t
JOIN customers AS c ON t.CustomerID = c.CustomerID
WHERE c.Currency = 'EUR'
GROUP BY Year
ORDER BY TotalGasUse DESC
LIMIT 1;",0,debit_card_specializing,best_pred_metadata
1445,1478,SELECT T1.Segment FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID GROUP BY T1.Segment ORDER BY SUM(T2.Consumption) ASC LIMIT 1,"
SELECT Segment, SUM(Consumption) as TotalConsumption
FROM yearmonth
JOIN customers ON yearmonth.CustomerID = customers.CustomerID
GROUP BY Segment
ORDER BY TotalConsumption ASC
LIMIT 1;",0,debit_card_specializing,best_pred_metadata
1446,1479,"SELECT SUBSTRING(T2.Date, 1, 4) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'CZK' GROUP BY SUBSTRING(T2.Date, 1, 4) ORDER BY SUM(T2.Consumption) DESC LIMIT 1","
SELECT strftime('%Y', Date) AS Year, SUM(Consumption) AS TotalConsumption
FROM yearmonth
JOIN customers ON yearmonth.CustomerID = customers.CustomerID
WHERE customers.Currency = 'CZK'
GROUP BY Year
ORDER BY TotalConsumption DESC
LIMIT 1;",0,debit_card_specializing,best_pred_metadata
1447,1480,"SELECT SUBSTRING(T2.Date, 5, 2) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE SUBSTRING(T2.Date, 1, 4) = '2013' AND T1.Segment = 'SME' GROUP BY SUBSTRING(T2.Date, 5, 2) ORDER BY SUM(T2.Consumption) DESC LIMIT 1","
SELECT Date
FROM yearmonth
WHERE CustomerID IN (SELECT CustomerID FROM customers WHERE Segment = 'SME')
AND strftime('%Y', Date) = '2013'
ORDER BY Consumption DESC
LIMIT 1;",0,debit_card_specializing,best_pred_metadata
1448,1482,"SELECT CAST((SUM(IIF(T1.Segment = 'SME' AND T2.Date LIKE '2013%', T2.Consumption, 0)) - SUM(IIF(T1.Segment = 'SME' AND T2.Date LIKE '2012%', T2.Consumption, 0))) AS FLOAT) * 100 / SUM(IIF(T1.Segment = 'SME' AND T2.Date LIKE '2012%', T2.Consumption, 0)), CAST(SUM(IIF(T1.Segment = 'LAM' AND T2.Date LIKE '2013%', T2.Consumption, 0)) - SUM(IIF(T1.Segment = 'LAM' AND T2.Date LIKE '2012%', T2.Consumption, 0)) AS FLOAT) * 100 / SUM(IIF(T1.Segment = 'LAM' AND T2.Date LIKE '2012%', T2.Consumption, 0)) , CAST(SUM(IIF(T1.Segment = 'KAM' AND T2.Date LIKE '2013%', T2.Consumption, 0)) - SUM(IIF(T1.Segment = 'KAM' AND T2.Date LIKE '2012%', T2.Consumption, 0)) AS FLOAT) * 100 / SUM(IIF(T1.Segment = 'KAM' AND T2.Date LIKE '2012%', T2.Consumption, 0)) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID","
SELECT
    c.Segment,
    ((SUM(CASE WHEN ym.Date LIKE '2013%' THEN ym.Consumption ELSE 0 END) - SUM(CASE WHEN ym.Date LIKE '2012%' THEN ym.Consumption ELSE 0 END)) / SUM(CASE WHEN ym.Date LIKE '2012%' THEN ym.Consumption ELSE 0 END)) * 100 AS PercentageIncrease
FROM
    customers c
JOIN
    yearmonth ym ON c.CustomerID = ym.CustomerID
WHERE
    c.Segment IN ('SME', 'LAM', 'KAM') AND c.Currency = 'EUR'
GROUP BY
    c.Segment
ORDER BY
    PercentageIncrease DESC, PercentageIncrease ASC;",0,debit_card_specializing,best_pred_metadata
1449,1483,SELECT SUM(Consumption) FROM yearmonth WHERE CustomerID = 6 AND Date BETWEEN '201308' AND '201311',"
SELECT SUM(Consumption)
FROM yearmonth
WHERE CustomerID = 6
AND Date BETWEEN '2013-08-01' AND '2013-11-30';",0,debit_card_specializing,best_pred_metadata
1450,1484,"SELECT SUM(IIF(Country = 'CZE', 1, 0)) - SUM(IIF(Country = 'SVK', 1, 0)) FROM gasstations WHERE Segment = 'Discount'","
SELECT COUNT(*) AS discount_gas_stations_czech
FROM gasstations
WHERE Country = 'Czech Republic' AND Segment = 'Discount'

SELECT COUNT(*) AS discount_gas_stations_slovakia
FROM gasstations
WHERE Country = 'Slovakia' AND Segment = 'Discount'

SELECT discount_gas_stations_czech - discount_gas_stations_slovakia AS difference
FROM (
    SELECT COUNT(*) AS discount_gas_stations_czech
    FROM gasstations
    WHERE Country = 'Czech Republic' AND Segment = 'Discount'
),
(
    SELECT COUNT(*) AS discount_gas_stations_slovakia
    FROM gasstations
    WHERE Country = 'Slovakia' AND Segment = 'Discount'
)

The final SQL query to answer the question is:

SELECT (
    SELECT COUNT(*)
    FROM gasstations
    WHERE Country = 'Czech Republic' AND Segment = 'Discount'
) - (
    SELECT COUNT(*)
    FROM gasstations
    WHERE Country = 'Slovakia' AND Segment = 'Discount'
) AS difference",0,debit_card_specializing,best_pred_metadata
1451,1485,"SELECT SUM(IIF(CustomerID = 7, Consumption, 0)) - SUM(IIF(CustomerID = 5, Consumption, 0)) FROM yearmonth WHERE Date = '201304'","
SELECT
    (SELECT Consumption FROM yearmonth WHERE CustomerID = 7 AND Date = '2013-04') -
    (SELECT Consumption FROM yearmonth WHERE CustomerID = 5 AND Date = '2013-04') AS consumption_difference;",0,debit_card_specializing,best_pred_metadata
1452,1487,SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM' AND T2.Date = '201310' AND T1.Currency = 'EUR' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) DESC LIMIT 1,"
SELECT CustomerID
FROM customers
WHERE Segment = 'LAM' AND Currency = 'Euro'
ORDER BY (
    SELECT Consumption
    FROM yearmonth
    WHERE CustomerID = customers.CustomerID AND Date = '2013-10'
) DESC
LIMIT 1;",0,debit_card_specializing,best_pred_metadata
1453,1488,"SELECT T2.CustomerID, SUM(T2.Consumption) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'KAM' GROUP BY T2.CustomerID ORDER BY SUM(T2.Consumption) DESC LIMIT 1","
SELECT CustomerID, SUM(Consumption) as TotalConsumption
FROM yearmonth
WHERE CustomerID IN (
    SELECT CustomerID
    FROM customers
    WHERE Segment = 'KAM'
)
GROUP BY CustomerID
ORDER BY TotalConsumption DESC
LIMIT 1;",1,debit_card_specializing,best_pred_metadata
1454,1489,SELECT SUM(T2.Consumption) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '201305' AND T1.Segment = 'KAM',"
SELECT SUM(Consumption)
FROM yearmonth
JOIN customers ON yearmonth.CustomerID = customers.CustomerID
WHERE strftime('%Y-%m', Date) = '2013-05' AND customers.Segment = 'KAM';",0,debit_card_specializing,best_pred_metadata
1455,1490,"SELECT CAST(SUM(IIF(T2.Consumption > 46.73, 1, 0)) AS FLOAT) * 100 / COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM'","
SELECT
    (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM yearmonth WHERE CustomerID IN (SELECT CustomerID FROM customers WHERE Segment = 'LAM'))) AS percentage
FROM
    yearmonth
WHERE
    Consumption > 46.73 AND CustomerID IN (SELECT CustomerID FROM customers WHERE Segment = 'LAM');",1,debit_card_specializing,best_pred_metadata
1456,1491,"SELECT Country , ( SELECT COUNT(GasStationID) FROM gasstations WHERE Segment = 'Value for money' ) FROM gasstations WHERE Segment = 'Value for money' GROUP BY Country ORDER BY COUNT(GasStationID) DESC LIMIT 1","
SELECT Country, COUNT(*) as ValueForMoneyStations
FROM gasstations
WHERE Segment = 'Value for money'
GROUP BY Country
ORDER BY ValueForMoneyStations DESC
LIMIT 1;",0,debit_card_specializing,best_pred_metadata
1457,1492,SELECT CAST(SUM(Currency = 'EUR') AS FLOAT) * 100 / COUNT(CustomerID) FROM customers WHERE Segment = 'KAM',"
SELECT
    (COUNT(DISTINCT c.CustomerID) * 100.0 /
    (SELECT COUNT(DISTINCT CustomerID) FROM customers WHERE Segment = 'KAM')) AS Percentage_KAM_Customers_Paying_In_Euros
FROM
    customers c
JOIN
    transactions_1k t ON c.CustomerID = t.CustomerID
WHERE
    c.Segment = 'KAM' AND c.Currency = 'Euros';",0,debit_card_specializing,best_pred_metadata
1458,1493,"SELECT CAST(SUM(IIF(Consumption > 528.3, 1, 0)) AS FLOAT) * 100 / COUNT(CustomerID) FROM yearmonth WHERE Date = '201202'","
SELECT
    (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM yearmonth WHERE Date = '2012-02')) AS percentage
FROM
    yearmonth
WHERE
    Date = '2012-02' AND Consumption > 528.3;",0,debit_card_specializing,best_pred_metadata
1459,1494,"SELECT CAST(SUM(IIF(Segment = 'Premium', 1, 0)) AS FLOAT) * 100 / COUNT(GasStationID) FROM gasstations WHERE Country = 'SVK'","
SELECT
    (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM gasstations WHERE Country = 'Slovakia')) AS percentage_premium
FROM
    gasstations
WHERE
    Country = 'Slovakia' AND Segment = 'Premium';",0,debit_card_specializing,best_pred_metadata
1460,1495,SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '201309' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) DESC LIMIT 1,"
SELECT CustomerID, SUM(Consumption) as TotalConsumption
FROM yearmonth
WHERE strftime('%Y-%m', Date) = '2013-09'
GROUP BY CustomerID
ORDER BY TotalConsumption DESC
LIMIT 1;",0,debit_card_specializing,best_pred_metadata
1461,1496,SELECT T1.Segment FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '201309' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) ASC LIMIT 1,"
SELECT c.Segment, SUM(ym.Consumption) as TotalConsumption
FROM customers c
JOIN yearmonth ym ON c.CustomerID = ym.CustomerID
WHERE ym.Date = '2013-09'
GROUP BY c.Segment
ORDER BY TotalConsumption ASC
LIMIT 1;",0,debit_card_specializing,best_pred_metadata
1462,1497,SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '201206' AND T1.Segment = 'SME' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) ASC LIMIT 1,"
SELECT c.CustomerID, c.Segment, SUM(t.Amount) as TotalConsumption
FROM customers c
JOIN transactions_1k t ON c.CustomerID = t.CustomerID
WHERE c.Segment = 'SME' AND strftime('%Y-%m', t.Date) = '2012-06'
GROUP BY c.CustomerID
ORDER BY TotalConsumption ASC
LIMIT 1;",0,debit_card_specializing,best_pred_metadata
1463,1498,"SELECT SUM(Consumption) FROM yearmonth WHERE SUBSTRING(Date, 1, 4) = '2012' GROUP BY SUBSTRING(Date, 5, 2) ORDER BY SUM(Consumption) DESC LIMIT 1","
SELECT MAX(Consumption) AS HighestMonthlyConsumption
FROM yearmonth
WHERE strftime('%Y', Date) = '2012';",0,debit_card_specializing,best_pred_metadata
1464,1499,SELECT SUM(T2.Consumption) / 12 AS MonthlyConsumption FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'EUR' GROUP BY T1.CustomerID ORDER BY MonthlyConsumption DESC LIMIT 1,"
SELECT MAX(Consumption)
FROM yearmonth
WHERE CustomerID IN (
    SELECT CustomerID
    FROM customers
    WHERE Currency = 'Euro'
);",0,debit_card_specializing,best_pred_metadata
1465,1500,SELECT T3.Description FROM transactions_1k AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN products AS T3 ON T1.ProductID = T3.ProductID WHERE T2.Date = '201309',"
SELECT p.Description
FROM transactions_1k t
JOIN products p ON t.ProductID = p.ProductID
WHERE strftime('%Y-%m', t.Date) = '2013-09';",0,debit_card_specializing,best_pred_metadata
1466,1501,SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN yearmonth AS T3 ON T1.CustomerID = T3.CustomerID WHERE T3.Date = '201306',"
SELECT DISTINCT g.Country
FROM gasstations g
JOIN transactions_1k t ON g.GasStationID = t.GasStationID
WHERE strftime('%Y-%m', t.Date) = '2013-06';",0,debit_card_specializing,best_pred_metadata
1467,1502,SELECT DISTINCT T3.ChainID FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN gasstations AS T3 ON T1.GasStationID = T3.GasStationID WHERE T2.Currency = 'EUR',"
SELECT DISTINCT gs.ChainID
FROM transactions_1k t
JOIN gasstations gs ON t.GasStationID = gs.GasStationID
JOIN customers c ON t.CustomerID = c.CustomerID
WHERE c.Currency = 'Euro';",0,debit_card_specializing,best_pred_metadata
1468,1503,"SELECT DISTINCT T1.ProductID, T3.Description FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN products AS T3 ON T1.ProductID = T3.ProductID WHERE T2.Currency = 'EUR'","
SELECT p.Description
FROM transactions_1k t
JOIN customers c ON t.CustomerID = c.CustomerID
JOIN products p ON t.ProductID = p.ProductID
WHERE c.Currency = 'Euro';",0,debit_card_specializing,best_pred_metadata
1469,1504,SELECT AVG(Amount) FROM transactions_1k WHERE Date LIKE '2012-01%',"
SELECT AVG(Price) AS AverageTotalPrice
FROM transactions_1k
WHERE strftime('%Y-%m', Date) = '2012-01';",1,debit_card_specializing,best_pred_metadata
1470,1505,SELECT COUNT(*) FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = 'EUR' AND T1.Consumption > 1000.00,"
SELECT COUNT(*)
FROM customers
JOIN yearmonth ON customers.CustomerID = yearmonth.CustomerID
WHERE customers.Currency = 'Euro' AND yearmonth.Consumption > 1000;",0,debit_card_specializing,best_pred_metadata
1471,1506,SELECT T3.Description FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN products AS T3 ON T1.ProductID = T3.ProductID WHERE T2.Country = 'CZE',"
SELECT p.Description
FROM transactions_1k t
JOIN gasstations g ON t.GasStationID = g.GasStationID
JOIN products p ON t.ProductID = p.ProductID
WHERE g.Country = 'Czech Republic';",0,debit_card_specializing,best_pred_metadata
1472,1507,SELECT DISTINCT T1.Time FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.ChainID = 11,"
SELECT Time
FROM transactions_1k
WHERE GasStationID IN (
    SELECT GasStationID
    FROM gasstations
    WHERE ChainID = 11
);",0,debit_card_specializing,best_pred_metadata
1473,1508,SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE' AND T1.Price > 1000,"
SELECT COUNT(*)
FROM transactions_1k
WHERE GasStationID IN (SELECT GasStationID FROM gasstations WHERE Country = 'Czech Republic')
AND Price > 1000;",0,debit_card_specializing,best_pred_metadata
1474,1509,"SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE' AND strftime('%Y', T1.Date) >= '2012'","
SELECT COUNT(*)
FROM transactions_1k
WHERE GasStationID IN (SELECT GasStationID FROM gasstations WHERE Country = 'Czech Republic')
AND Date > '2012-01-01';",0,debit_card_specializing,best_pred_metadata
1475,1510,SELECT AVG(T1.Price) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE',"
SELECT AVG(Price) AS AverageTotalPrice
FROM transactions_1k
WHERE GasStationID IN (
    SELECT GasStationID
    FROM gasstations
    WHERE Country = 'Czech Republic'
);",0,debit_card_specializing,best_pred_metadata
1476,1511,SELECT AVG(T1.Price) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN customers AS T3 ON T1.CustomerID = T3.CustomerID WHERE T3.Currency = 'EUR',"
SELECT AVG(t.Price) AS AverageTotalPrice
FROM transactions_1k AS t
JOIN customers AS c ON t.CustomerID = c.CustomerID
WHERE c.Currency = 'euro';",0,debit_card_specializing,best_pred_metadata
1477,1512,SELECT CustomerID FROM transactions_1k WHERE Date = '2012-08-25' GROUP BY CustomerID ORDER BY SUM(Price) DESC LIMIT 1,"
SELECT CustomerID, SUM(Price) as TotalSpent
FROM transactions_1k
WHERE Date = '2012-08-25'
GROUP BY CustomerID
ORDER BY TotalSpent DESC
LIMIT 1;",0,debit_card_specializing,best_pred_metadata
1478,1513,SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-25' ORDER BY T1.Time DESC LIMIT 1,"
SELECT Country
FROM gasstations
WHERE GasStationID = (
    SELECT GasStationID
    FROM transactions_1k
    WHERE Date = '2012-08-25'
    ORDER BY TransactionID
    LIMIT 1
);",1,debit_card_specializing,best_pred_metadata
1479,1514,SELECT T3.Currency FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN customers AS T3 ON T1.CustomerID = T3.CustomerID WHERE T1.Date = '2012-08-24' AND T1.Time = '16:25:00',"
SELECT c.Currency
FROM transactions_1k t
JOIN customers c ON t.CustomerID = c.CustomerID
WHERE t.Time = '16:25:00' AND t.Date = '2012-08-24';",1,debit_card_specializing,best_pred_metadata
1480,1515,SELECT T2.Segment FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.date = '2012-08-23' AND T1.time = '21:20:00',"
SELECT c.Segment
FROM customers c
JOIN transactions_1k t ON c.CustomerID = t.CustomerID
WHERE t.Date = '2012-08-23' AND t.Time = '21:20:00';",1,debit_card_specializing,best_pred_metadata
1481,1516,SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '2012-08-26' AND T1.Time < '13:00:00' AND T2.Currency = 'EUR',"
SELECT COUNT(*)
FROM transactions_1k
JOIN customers ON transactions_1k.CustomerID = customers.CustomerID
WHERE customers.Currency = 'EUR'
AND transactions_1k.Date = '2012-08-26'
AND transactions_1k.Time < '12:00:00';",1,debit_card_specializing,best_pred_metadata
1482,1517,SELECT T2.Segment FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID ORDER BY Date ASC LIMIT 1,"
SELECT Segment
FROM customers
ORDER BY CustomerID ASC
LIMIT 1;",0,debit_card_specializing,best_pred_metadata
1483,1518,SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-24' AND T1.Time = '12:42:00',"
SELECT Country
FROM transactions_1k
JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID
WHERE transactions_1k.Date = '2012/8/24' AND transactions_1k.Time = '12:42:00';",0,debit_card_specializing,best_pred_metadata
1484,1519,SELECT T1.ProductID FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-23' AND T1.Time = '21:20:00',"
SELECT ProductID
FROM transactions_1k
WHERE Date = '2012/8/23' AND Time = '21:20:00';",0,debit_card_specializing,best_pred_metadata
1485,1521,SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-26' AND T1.Time BETWEEN '08:00:00' AND '09:00:00' AND T2.Country = 'CZE',"
SELECT COUNT(*)
FROM transactions_1k
JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID
WHERE transactions_1k.Date = '2012-08-26'
AND transactions_1k.Time BETWEEN '08:00' AND '09:00'
AND gasstations.Country = 'CZE';",1,debit_card_specializing,best_pred_metadata
1486,1522,SELECT T2.Currency FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '201306' AND T1.Consumption = 214582.17,"
SELECT c.Currency
FROM customers c
JOIN transactions_1k t ON c.CustomerID = t.CustomerID
WHERE t.Date BETWEEN '2013-06-01' AND '2013-06-30'
AND t.Amount = 214582.17;",0,debit_card_specializing,best_pred_metadata
1487,1523,SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.CardID = '667467',"
SELECT Country
FROM transactions_1k
JOIN customers ON transactions_1k.CustomerID = customers.CustomerID
JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID
WHERE transactions_1k.CardID = 667467;",1,debit_card_specializing,best_pred_metadata
1488,1524,SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-24' AND T1.Price = 548.4,"
SELECT c.Segment
FROM customers c
JOIN transactions_1k t ON c.CustomerID = t.CustomerID
WHERE t.Amount = 548.4 AND t.Date = '2012-08-24';",0,debit_card_specializing,best_pred_metadata
1489,1525,"SELECT CAST(SUM(IIF(T2.Currency = 'EUR', 1, 0)) AS FLOAT) * 100 / COUNT(T1.CustomerID) FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '2012-08-25'","
SELECT
    (COUNT(DISTINCT customers.CustomerID) * 100.0 / (SELECT COUNT(DISTINCT CustomerID) FROM transactions_1k WHERE Date = '2012-08-25')) AS Percentage_of_Customers_Using_EUR
FROM
    customers
INNER JOIN
    transactions_1k ON customers.CustomerID = transactions_1k.CustomerID
WHERE
    customers.Currency = 'EUR'
    AND transactions_1k.Date = '2012-08-25';",0,debit_card_specializing,best_pred_metadata
1490,1526,"SELECT CAST(SUM(IIF(SUBSTRING(Date, 1, 4) = '2012', Consumption, 0)) - SUM(IIF(SUBSTRING(Date, 1, 4) = '2013', Consumption, 0)) AS FLOAT) / SUM(IIF(SUBSTRING(Date, 1, 4) = '2012', Consumption, 0)) FROM yearmonth WHERE CustomerID = ( SELECT T1.CustomerID FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-25' AND T1.Price = 634.8 )","
SELECT
    ((SELECT Consumption FROM yearmonth WHERE CustomerID = (SELECT CustomerID FROM transactions_1k WHERE Date = '2013-08-25' AND Price = 634.8) AND Date = '2013-08-25') -
    (SELECT Consumption FROM yearmonth WHERE CustomerID = (SELECT CustomerID FROM transactions_1k WHERE Date = '2012-08-25' AND Price = 634.8) AND Date = '2012-08-25')) /
    (SELECT Consumption FROM yearmonth WHERE CustomerID = (SELECT CustomerID FROM transactions_1k WHERE Date = '2012-08-25' AND Price = 634.8) AND Date = '2012-08-25') * 100 AS ConsumptionDecreaseRate
FROM transactions_1k
WHERE Price = 634.8 AND Date = '2012-08-25'
LIMIT 1;",0,debit_card_specializing,best_pred_metadata
1491,1527,SELECT GasStationID FROM transactions_1k GROUP BY GasStationID ORDER BY SUM(Price) DESC LIMIT 1,"
SELECT GasStationID, SUM(Amount * Price) AS TotalRevenue
FROM transactions_1k
GROUP BY GasStationID
ORDER BY TotalRevenue DESC
LIMIT 1;",0,debit_card_specializing,best_pred_metadata
1492,1528,"SELECT CAST(SUM(IIF(Country = 'SVK' AND Segment = 'Premium', 1, 0)) AS FLOAT) * 100 / SUM(IIF(Country = 'SVK', 1, 0)) FROM gasstations","
SELECT
    (COUNT(*) * 100.0) / (SELECT COUNT(*) FROM gasstations WHERE Country = 'SVK') AS percentage_premium
FROM
    gasstations
WHERE
    Country = 'SVK' AND Segment = 'Premium'",1,debit_card_specializing,best_pred_metadata
1493,1529,"SELECT SUM(T1.Price) , SUM(IIF(T3.Date = '201201', T1.Price, 0)) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN yearmonth AS T3 ON T1.CustomerID = T3.CustomerID WHERE T1.CustomerID = '38508'","
SELECT SUM(Amount * Price) AS TotalSpent,
       CASE
           WHEN strftime('%Y-%m', Date) = '2012-01' THEN SUM(Amount * Price)
           ELSE 0
       END AS SpentInJanuary2012
FROM transactions_1k
WHERE CustomerID = 38508;",0,debit_card_specializing,best_pred_metadata
1494,1530,SELECT T2.Description FROM transactions_1k AS T1 INNER JOIN products AS T2 ON T1.ProductID = T2.ProductID ORDER BY T1.Amount DESC LIMIT 5,"
SELECT p.Description, SUM(t.Amount) as TotalAmount
FROM transactions_1k t
JOIN products p ON t.ProductID = p.ProductID
GROUP BY t.ProductID
ORDER BY TotalAmount DESC
LIMIT 5;",0,debit_card_specializing,best_pred_metadata
1495,1531,"SELECT T2.CustomerID, SUM(T2.Price / T2.Amount), T1.Currency FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.CustomerID = ( SELECT CustomerID FROM yearmonth ORDER BY Consumption DESC LIMIT 1 ) GROUP BY T2.CustomerID, T1.Currency","
SELECT c.CustomerID, c.Currency, AVG(t.Price) AS AveragePricePerItem
FROM customers c
JOIN transactions_1k t ON c.CustomerID = t.CustomerID
GROUP BY c.CustomerID, c.Currency
ORDER BY SUM(t.Amount * t.Price) DESC
LIMIT 1;",0,debit_card_specializing,best_pred_metadata
1496,1532,SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.ProductID = 2 ORDER BY T1.Price DESC LIMIT 1,"
SELECT Country
FROM gasstations
WHERE GasStationID = (
    SELECT GasStationID
    FROM transactions_1k
    WHERE ProductID = 2
    ORDER BY Price DESC
    LIMIT 1
)",1,debit_card_specializing,best_pred_metadata
1497,1533,SELECT T2.Consumption FROM transactions_1k AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Price / T1.Amount > 29.00 AND T1.ProductID = 5 AND T2.Date = '201208',"
SELECT ym.Consumption
FROM yearmonth ym
JOIN transactions_1k t ON ym.CustomerID = t.CustomerID
WHERE t.ProductID = 5 AND t.Price > 29.00 AND ym.Date = '2012-08';",0,debit_card_specializing,best_pred_metadata
